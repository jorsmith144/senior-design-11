
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007de0  08007de0  00008de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008008  08008008  0000a0e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008008  08008008  00009008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008010  08008010  0000a0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008010  08008010  00009010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008014  08008014  00009014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  08008018  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007394  200000e8  08008100  0000a0e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000747c  08008100  0000a47c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a0e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144b9  00000000  00000000  0000a116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b38  00000000  00000000  0001e5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00021108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d74  00000000  00000000  00022248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029579  00000000  00000000  00022fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c83  00000000  00000000  0004c535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001039c1  00000000  00000000  000621b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00165b79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004edc  00000000  00000000  00165c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016aadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000e8 	.word	0x200000e8
 800021c:	00000000 	.word	0x00000000
 8000220:	08007dc8 	.word	0x08007dc8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000ec 	.word	0x200000ec
 800023c:	08007dc8 	.word	0x08007dc8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <LPF>:
float PKG_w0 = 0, PKG_A = 0, PKG_cos_w0 = 0, PKG_sin_w0 = 0, PKG_alpha = 0;
float PKG_b0 = 0, PKG_b1 = 0, PKG_b2 = 0, PKG_a0 = 0, PKG_a1 = 0, PKG_a2 = 0;
float PKG_norm_b0 = 0, PKG_norm_b1 = 0, PKG_norm_b2 = 0, PKG_norm_a1 = 0, PKG_norm_a2 = 0;


void LPF() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	 // LPF Coefficients and Parameters

	    LPF_w0 = 2 * PI * (LPF_f0 / Fs);    	// Cutoff Freq in radians
 80005d4:	4b62      	ldr	r3, [pc, #392]	@ (8000760 <LPF+0x190>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	ee07 3a90 	vmov	s15, r3
 80005dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80005e0:	4b60      	ldr	r3, [pc, #384]	@ (8000764 <LPF+0x194>)
 80005e2:	ed93 7a00 	vldr	s14, [r3]
 80005e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80005ee:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8000758 <LPF+0x188>
 80005f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000768 <LPF+0x198>)
 80005fc:	edc3 7a00 	vstr	s15, [r3]
	    LPF_cos_w0 = cos(LPF_w0);           	// cosine omega
 8000600:	4b59      	ldr	r3, [pc, #356]	@ (8000768 <LPF+0x198>)
 8000602:	edd3 7a00 	vldr	s15, [r3]
 8000606:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800060a:	eeb0 0b47 	vmov.f64	d0, d7
 800060e:	f006 fdc3 	bl	8007198 <cos>
 8000612:	eeb0 7b40 	vmov.f64	d7, d0
 8000616:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800061a:	4b54      	ldr	r3, [pc, #336]	@ (800076c <LPF+0x19c>)
 800061c:	edc3 7a00 	vstr	s15, [r3]
	    LPF_sin_w0 = sin(LPF_w0);           	// sine omega
 8000620:	4b51      	ldr	r3, [pc, #324]	@ (8000768 <LPF+0x198>)
 8000622:	edd3 7a00 	vldr	s15, [r3]
 8000626:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800062a:	eeb0 0b47 	vmov.f64	d0, d7
 800062e:	f006 fdff 	bl	8007230 <sin>
 8000632:	eeb0 7b40 	vmov.f64	d7, d0
 8000636:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800063a:	4b4d      	ldr	r3, [pc, #308]	@ (8000770 <LPF+0x1a0>)
 800063c:	edc3 7a00 	vstr	s15, [r3]
	    LPF_alpha = LPF_sin_w0 / (2 * LPF_Q);
 8000640:	4b4b      	ldr	r3, [pc, #300]	@ (8000770 <LPF+0x1a0>)
 8000642:	edd3 6a00 	vldr	s13, [r3]
 8000646:	4b4b      	ldr	r3, [pc, #300]	@ (8000774 <LPF+0x1a4>)
 8000648:	edd3 7a00 	vldr	s15, [r3]
 800064c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000654:	4b48      	ldr	r3, [pc, #288]	@ (8000778 <LPF+0x1a8>)
 8000656:	edc3 7a00 	vstr	s15, [r3]

	    LPF_b0 = (1 - LPF_cos_w0) / 2;
 800065a:	4b44      	ldr	r3, [pc, #272]	@ (800076c <LPF+0x19c>)
 800065c:	edd3 7a00 	vldr	s15, [r3]
 8000660:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000668:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800066c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000670:	4b42      	ldr	r3, [pc, #264]	@ (800077c <LPF+0x1ac>)
 8000672:	edc3 7a00 	vstr	s15, [r3]
	    LPF_b1 = (1 - LPF_cos_w0);
 8000676:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <LPF+0x19c>)
 8000678:	edd3 7a00 	vldr	s15, [r3]
 800067c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000684:	4b3e      	ldr	r3, [pc, #248]	@ (8000780 <LPF+0x1b0>)
 8000686:	edc3 7a00 	vstr	s15, [r3]
	    LPF_b2 = (1 - LPF_cos_w0) / 2;
 800068a:	4b38      	ldr	r3, [pc, #224]	@ (800076c <LPF+0x19c>)
 800068c:	edd3 7a00 	vldr	s15, [r3]
 8000690:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000698:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800069c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006a0:	4b38      	ldr	r3, [pc, #224]	@ (8000784 <LPF+0x1b4>)
 80006a2:	edc3 7a00 	vstr	s15, [r3]
	    LPF_a0 = 1 + LPF_alpha;
 80006a6:	4b34      	ldr	r3, [pc, #208]	@ (8000778 <LPF+0x1a8>)
 80006a8:	edd3 7a00 	vldr	s15, [r3]
 80006ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006b4:	4b34      	ldr	r3, [pc, #208]	@ (8000788 <LPF+0x1b8>)
 80006b6:	edc3 7a00 	vstr	s15, [r3]
	    LPF_a1 = -2 * LPF_cos_w0;
 80006ba:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <LPF+0x19c>)
 80006bc:	edd3 7a00 	vldr	s15, [r3]
 80006c0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80006c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006c8:	4b30      	ldr	r3, [pc, #192]	@ (800078c <LPF+0x1bc>)
 80006ca:	edc3 7a00 	vstr	s15, [r3]
	    LPF_a2 = 1 - LPF_alpha;
 80006ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <LPF+0x1a8>)
 80006d0:	edd3 7a00 	vldr	s15, [r3]
 80006d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000790 <LPF+0x1c0>)
 80006de:	edc3 7a00 	vstr	s15, [r3]

	    LPF_norm_b0 = LPF_b0 / LPF_a0;
 80006e2:	4b26      	ldr	r3, [pc, #152]	@ (800077c <LPF+0x1ac>)
 80006e4:	edd3 6a00 	vldr	s13, [r3]
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <LPF+0x1b8>)
 80006ea:	ed93 7a00 	vldr	s14, [r3]
 80006ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006f2:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <LPF+0x1c4>)
 80006f4:	edc3 7a00 	vstr	s15, [r3]
	    LPF_norm_b1 = LPF_b1 / LPF_a0;
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <LPF+0x1b0>)
 80006fa:	edd3 6a00 	vldr	s13, [r3]
 80006fe:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <LPF+0x1b8>)
 8000700:	ed93 7a00 	vldr	s14, [r3]
 8000704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000708:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <LPF+0x1c8>)
 800070a:	edc3 7a00 	vstr	s15, [r3]
	    LPF_norm_b2 = LPF_b2 / LPF_a0;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <LPF+0x1b4>)
 8000710:	edd3 6a00 	vldr	s13, [r3]
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <LPF+0x1b8>)
 8000716:	ed93 7a00 	vldr	s14, [r3]
 800071a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <LPF+0x1cc>)
 8000720:	edc3 7a00 	vstr	s15, [r3]
	    LPF_norm_a1 = LPF_a1 / LPF_a0;
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <LPF+0x1bc>)
 8000726:	edd3 6a00 	vldr	s13, [r3]
 800072a:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <LPF+0x1b8>)
 800072c:	ed93 7a00 	vldr	s14, [r3]
 8000730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <LPF+0x1d0>)
 8000736:	edc3 7a00 	vstr	s15, [r3]
	    LPF_norm_a2 = LPF_a2 / LPF_a0;
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <LPF+0x1c0>)
 800073c:	edd3 6a00 	vldr	s13, [r3]
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <LPF+0x1b8>)
 8000742:	ed93 7a00 	vldr	s14, [r3]
 8000746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <LPF+0x1d4>)
 800074c:	edc3 7a00 	vstr	s15, [r3]
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	f3af 8000 	nop.w
 8000758:	f01b866e 	.word	0xf01b866e
 800075c:	401921f9 	.word	0x401921f9
 8000760:	2000006c 	.word	0x2000006c
 8000764:	20000068 	.word	0x20000068
 8000768:	20007238 	.word	0x20007238
 800076c:	2000723c 	.word	0x2000723c
 8000770:	20007240 	.word	0x20007240
 8000774:	20000070 	.word	0x20000070
 8000778:	20007244 	.word	0x20007244
 800077c:	20007248 	.word	0x20007248
 8000780:	2000724c 	.word	0x2000724c
 8000784:	20007250 	.word	0x20007250
 8000788:	20007254 	.word	0x20007254
 800078c:	20007258 	.word	0x20007258
 8000790:	2000725c 	.word	0x2000725c
 8000794:	20007260 	.word	0x20007260
 8000798:	20007264 	.word	0x20007264
 800079c:	20007268 	.word	0x20007268
 80007a0:	2000726c 	.word	0x2000726c
 80007a4:	20007270 	.word	0x20007270

080007a8 <Notch>:
void Notch() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	  // Notch Coefficients and Parameters

	    NCH1_w0 = 2 * PI * (NCH1_f0 / Fs);      // Center Freq in radians
 80007ac:	4b58      	ldr	r3, [pc, #352]	@ (8000910 <Notch+0x168>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007b8:	4b56      	ldr	r3, [pc, #344]	@ (8000914 <Notch+0x16c>)
 80007ba:	ed93 7a00 	vldr	s14, [r3]
 80007be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007c6:	ed9f 6b50 	vldr	d6, [pc, #320]	@ 8000908 <Notch+0x160>
 80007ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007d2:	4b51      	ldr	r3, [pc, #324]	@ (8000918 <Notch+0x170>)
 80007d4:	edc3 7a00 	vstr	s15, [r3]
	    NCH1_cos_w0 = cos(NCH1_w0);             // cosine omega
 80007d8:	4b4f      	ldr	r3, [pc, #316]	@ (8000918 <Notch+0x170>)
 80007da:	edd3 7a00 	vldr	s15, [r3]
 80007de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007e2:	eeb0 0b47 	vmov.f64	d0, d7
 80007e6:	f006 fcd7 	bl	8007198 <cos>
 80007ea:	eeb0 7b40 	vmov.f64	d7, d0
 80007ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007f2:	4b4a      	ldr	r3, [pc, #296]	@ (800091c <Notch+0x174>)
 80007f4:	edc3 7a00 	vstr	s15, [r3]
	    NCH1_sin_w0 = sin(NCH1_w0);             // sine omega
 80007f8:	4b47      	ldr	r3, [pc, #284]	@ (8000918 <Notch+0x170>)
 80007fa:	edd3 7a00 	vldr	s15, [r3]
 80007fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000802:	eeb0 0b47 	vmov.f64	d0, d7
 8000806:	f006 fd13 	bl	8007230 <sin>
 800080a:	eeb0 7b40 	vmov.f64	d7, d0
 800080e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000812:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <Notch+0x178>)
 8000814:	edc3 7a00 	vstr	s15, [r3]
	    NCH1_alpha = NCH1_sin_w0 / (2 * NCH1_Q);
 8000818:	4b41      	ldr	r3, [pc, #260]	@ (8000920 <Notch+0x178>)
 800081a:	edd3 6a00 	vldr	s13, [r3]
 800081e:	4b41      	ldr	r3, [pc, #260]	@ (8000924 <Notch+0x17c>)
 8000820:	edd3 7a00 	vldr	s15, [r3]
 8000824:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800082c:	4b3e      	ldr	r3, [pc, #248]	@ (8000928 <Notch+0x180>)
 800082e:	edc3 7a00 	vstr	s15, [r3]

	    NCH1_b0 = 1;
 8000832:	4b3e      	ldr	r3, [pc, #248]	@ (800092c <Notch+0x184>)
 8000834:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000838:	601a      	str	r2, [r3, #0]
	    NCH1_b1 = -2 * NCH1_cos_w0;
 800083a:	4b38      	ldr	r3, [pc, #224]	@ (800091c <Notch+0x174>)
 800083c:	edd3 7a00 	vldr	s15, [r3]
 8000840:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8000844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000848:	4b39      	ldr	r3, [pc, #228]	@ (8000930 <Notch+0x188>)
 800084a:	edc3 7a00 	vstr	s15, [r3]
	    NCH1_b2 = 1;
 800084e:	4b39      	ldr	r3, [pc, #228]	@ (8000934 <Notch+0x18c>)
 8000850:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000854:	601a      	str	r2, [r3, #0]
	    NCH1_a0 = 1 + NCH1_alpha;
 8000856:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <Notch+0x180>)
 8000858:	edd3 7a00 	vldr	s15, [r3]
 800085c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000860:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000864:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <Notch+0x190>)
 8000866:	edc3 7a00 	vstr	s15, [r3]
	    NCH1_a1 = -2 * NCH1_cos_w0;
 800086a:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <Notch+0x174>)
 800086c:	edd3 7a00 	vldr	s15, [r3]
 8000870:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	4b30      	ldr	r3, [pc, #192]	@ (800093c <Notch+0x194>)
 800087a:	edc3 7a00 	vstr	s15, [r3]
	    NCH1_a2 = 1 - NCH1_alpha;
 800087e:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <Notch+0x180>)
 8000880:	edd3 7a00 	vldr	s15, [r3]
 8000884:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800088c:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <Notch+0x198>)
 800088e:	edc3 7a00 	vstr	s15, [r3]

	    NCH1_norm_b0 = NCH1_b0 / NCH1_a0;
 8000892:	4b26      	ldr	r3, [pc, #152]	@ (800092c <Notch+0x184>)
 8000894:	edd3 6a00 	vldr	s13, [r3]
 8000898:	4b27      	ldr	r3, [pc, #156]	@ (8000938 <Notch+0x190>)
 800089a:	ed93 7a00 	vldr	s14, [r3]
 800089e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a2:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <Notch+0x19c>)
 80008a4:	edc3 7a00 	vstr	s15, [r3]
	    NCH1_norm_b1 = NCH1_b1 / NCH1_a0;
 80008a8:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <Notch+0x188>)
 80008aa:	edd3 6a00 	vldr	s13, [r3]
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <Notch+0x190>)
 80008b0:	ed93 7a00 	vldr	s14, [r3]
 80008b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008b8:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <Notch+0x1a0>)
 80008ba:	edc3 7a00 	vstr	s15, [r3]
	    NCH1_norm_b2 = NCH1_b2 / NCH1_a0;
 80008be:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <Notch+0x18c>)
 80008c0:	edd3 6a00 	vldr	s13, [r3]
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <Notch+0x190>)
 80008c6:	ed93 7a00 	vldr	s14, [r3]
 80008ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <Notch+0x1a4>)
 80008d0:	edc3 7a00 	vstr	s15, [r3]
	    NCH1_norm_a1 = NCH1_a1 / NCH1_a0;
 80008d4:	4b19      	ldr	r3, [pc, #100]	@ (800093c <Notch+0x194>)
 80008d6:	edd3 6a00 	vldr	s13, [r3]
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <Notch+0x190>)
 80008dc:	ed93 7a00 	vldr	s14, [r3]
 80008e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <Notch+0x1a8>)
 80008e6:	edc3 7a00 	vstr	s15, [r3]
	    NCH1_norm_a2 = NCH1_a2 / NCH1_a0;
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <Notch+0x198>)
 80008ec:	edd3 6a00 	vldr	s13, [r3]
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <Notch+0x190>)
 80008f2:	ed93 7a00 	vldr	s14, [r3]
 80008f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008fa:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <Notch+0x1ac>)
 80008fc:	edc3 7a00 	vstr	s15, [r3]
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	f3af 8000 	nop.w
 8000908:	f01b866e 	.word	0xf01b866e
 800090c:	401921f9 	.word	0x401921f9
 8000910:	2000007c 	.word	0x2000007c
 8000914:	20000068 	.word	0x20000068
 8000918:	200072b0 	.word	0x200072b0
 800091c:	200072b4 	.word	0x200072b4
 8000920:	200072b8 	.word	0x200072b8
 8000924:	20000080 	.word	0x20000080
 8000928:	200072bc 	.word	0x200072bc
 800092c:	200072c0 	.word	0x200072c0
 8000930:	200072c4 	.word	0x200072c4
 8000934:	200072c8 	.word	0x200072c8
 8000938:	200072cc 	.word	0x200072cc
 800093c:	200072d0 	.word	0x200072d0
 8000940:	200072d4 	.word	0x200072d4
 8000944:	200072d8 	.word	0x200072d8
 8000948:	200072dc 	.word	0x200072dc
 800094c:	200072e0 	.word	0x200072e0
 8000950:	200072e4 	.word	0x200072e4
 8000954:	200072e8 	.word	0x200072e8

08000958 <PEAK>:
void PEAK() {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	  // Peaking EQ Coefficients and Parameters

	    PKG_w0 = 2 * PI * (PKG_f0 / Fs);    	// Center Freq in radians
 800095c:	4b6a      	ldr	r3, [pc, #424]	@ (8000b08 <PEAK+0x1b0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	ee07 3a90 	vmov	s15, r3
 8000964:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000968:	4b68      	ldr	r3, [pc, #416]	@ (8000b0c <PEAK+0x1b4>)
 800096a:	ed93 7a00 	vldr	s14, [r3]
 800096e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000972:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000976:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8000b00 <PEAK+0x1a8>
 800097a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800097e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000982:	4b63      	ldr	r3, [pc, #396]	@ (8000b10 <PEAK+0x1b8>)
 8000984:	edc3 7a00 	vstr	s15, [r3]
	    PKG_A = 0.1; //pow(10, PKG_dB_gain / 40);      	// Linear Gain from dB
 8000988:	4b62      	ldr	r3, [pc, #392]	@ (8000b14 <PEAK+0x1bc>)
 800098a:	4a63      	ldr	r2, [pc, #396]	@ (8000b18 <PEAK+0x1c0>)
 800098c:	601a      	str	r2, [r3, #0]
	    PKG_cos_w0 = cos(PKG_w0);      			// cosine omega
 800098e:	4b60      	ldr	r3, [pc, #384]	@ (8000b10 <PEAK+0x1b8>)
 8000990:	edd3 7a00 	vldr	s15, [r3]
 8000994:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000998:	eeb0 0b47 	vmov.f64	d0, d7
 800099c:	f006 fbfc 	bl	8007198 <cos>
 80009a0:	eeb0 7b40 	vmov.f64	d7, d0
 80009a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a8:	4b5c      	ldr	r3, [pc, #368]	@ (8000b1c <PEAK+0x1c4>)
 80009aa:	edc3 7a00 	vstr	s15, [r3]
	    PKG_sin_w0 = sin(PKG_w0);      			// sine omega
 80009ae:	4b58      	ldr	r3, [pc, #352]	@ (8000b10 <PEAK+0x1b8>)
 80009b0:	edd3 7a00 	vldr	s15, [r3]
 80009b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009b8:	eeb0 0b47 	vmov.f64	d0, d7
 80009bc:	f006 fc38 	bl	8007230 <sin>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009c8:	4b55      	ldr	r3, [pc, #340]	@ (8000b20 <PEAK+0x1c8>)
 80009ca:	edc3 7a00 	vstr	s15, [r3]
	    PKG_alpha = PKG_sin_w0 / (2 * PKG_Q);
 80009ce:	4b54      	ldr	r3, [pc, #336]	@ (8000b20 <PEAK+0x1c8>)
 80009d0:	edd3 6a00 	vldr	s13, [r3]
 80009d4:	4b53      	ldr	r3, [pc, #332]	@ (8000b24 <PEAK+0x1cc>)
 80009d6:	edd3 7a00 	vldr	s15, [r3]
 80009da:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80009de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e2:	4b51      	ldr	r3, [pc, #324]	@ (8000b28 <PEAK+0x1d0>)
 80009e4:	edc3 7a00 	vstr	s15, [r3]
	    // Case BW
	    //PKG_alpha = sin(PKG_w0) * sinh((log(2)/2) * PKG_BW * (PKG_w0 / sin(PKG_w0)));


	    PKG_b0 = 1 + PKG_alpha * PKG_A;
 80009e8:	4b4f      	ldr	r3, [pc, #316]	@ (8000b28 <PEAK+0x1d0>)
 80009ea:	ed93 7a00 	vldr	s14, [r3]
 80009ee:	4b49      	ldr	r3, [pc, #292]	@ (8000b14 <PEAK+0x1bc>)
 80009f0:	edd3 7a00 	vldr	s15, [r3]
 80009f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a00:	4b4a      	ldr	r3, [pc, #296]	@ (8000b2c <PEAK+0x1d4>)
 8000a02:	edc3 7a00 	vstr	s15, [r3]
	    PKG_b1 = -2 * PKG_cos_w0;
 8000a06:	4b45      	ldr	r3, [pc, #276]	@ (8000b1c <PEAK+0x1c4>)
 8000a08:	edd3 7a00 	vldr	s15, [r3]
 8000a0c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8000a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a14:	4b46      	ldr	r3, [pc, #280]	@ (8000b30 <PEAK+0x1d8>)
 8000a16:	edc3 7a00 	vstr	s15, [r3]
	    PKG_b2 = 1 - PKG_alpha * PKG_A;
 8000a1a:	4b43      	ldr	r3, [pc, #268]	@ (8000b28 <PEAK+0x1d0>)
 8000a1c:	ed93 7a00 	vldr	s14, [r3]
 8000a20:	4b3c      	ldr	r3, [pc, #240]	@ (8000b14 <PEAK+0x1bc>)
 8000a22:	edd3 7a00 	vldr	s15, [r3]
 8000a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a32:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <PEAK+0x1dc>)
 8000a34:	edc3 7a00 	vstr	s15, [r3]
	    PKG_a0 = 1 + ( PKG_alpha / PKG_A );
 8000a38:	4b3b      	ldr	r3, [pc, #236]	@ (8000b28 <PEAK+0x1d0>)
 8000a3a:	edd3 6a00 	vldr	s13, [r3]
 8000a3e:	4b35      	ldr	r3, [pc, #212]	@ (8000b14 <PEAK+0x1bc>)
 8000a40:	ed93 7a00 	vldr	s14, [r3]
 8000a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a50:	4b39      	ldr	r3, [pc, #228]	@ (8000b38 <PEAK+0x1e0>)
 8000a52:	edc3 7a00 	vstr	s15, [r3]
	    PKG_a1 = -2 * PKG_cos_w0;
 8000a56:	4b31      	ldr	r3, [pc, #196]	@ (8000b1c <PEAK+0x1c4>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8000a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a64:	4b35      	ldr	r3, [pc, #212]	@ (8000b3c <PEAK+0x1e4>)
 8000a66:	edc3 7a00 	vstr	s15, [r3]
	    PKG_a2 = 1 - ( PKG_alpha / PKG_A );
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b28 <PEAK+0x1d0>)
 8000a6c:	edd3 6a00 	vldr	s13, [r3]
 8000a70:	4b28      	ldr	r3, [pc, #160]	@ (8000b14 <PEAK+0x1bc>)
 8000a72:	ed93 7a00 	vldr	s14, [r3]
 8000a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a82:	4b2f      	ldr	r3, [pc, #188]	@ (8000b40 <PEAK+0x1e8>)
 8000a84:	edc3 7a00 	vstr	s15, [r3]

	    PKG_norm_b0 = PKG_b0 / PKG_a0;
 8000a88:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <PEAK+0x1d4>)
 8000a8a:	edd3 6a00 	vldr	s13, [r3]
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b38 <PEAK+0x1e0>)
 8000a90:	ed93 7a00 	vldr	s14, [r3]
 8000a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a98:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <PEAK+0x1ec>)
 8000a9a:	edc3 7a00 	vstr	s15, [r3]
	    PKG_norm_b1 = PKG_b1 / PKG_a0;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <PEAK+0x1d8>)
 8000aa0:	edd3 6a00 	vldr	s13, [r3]
 8000aa4:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <PEAK+0x1e0>)
 8000aa6:	ed93 7a00 	vldr	s14, [r3]
 8000aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <PEAK+0x1f0>)
 8000ab0:	edc3 7a00 	vstr	s15, [r3]
	    PKG_norm_b2 = PKG_b2 / PKG_a0;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <PEAK+0x1dc>)
 8000ab6:	edd3 6a00 	vldr	s13, [r3]
 8000aba:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <PEAK+0x1e0>)
 8000abc:	ed93 7a00 	vldr	s14, [r3]
 8000ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <PEAK+0x1f4>)
 8000ac6:	edc3 7a00 	vstr	s15, [r3]
	    PKG_norm_a1 = PKG_a1 / PKG_a0;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <PEAK+0x1e4>)
 8000acc:	edd3 6a00 	vldr	s13, [r3]
 8000ad0:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <PEAK+0x1e0>)
 8000ad2:	ed93 7a00 	vldr	s14, [r3]
 8000ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ada:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <PEAK+0x1f8>)
 8000adc:	edc3 7a00 	vstr	s15, [r3]
	    PKG_norm_a2 = PKG_a2 / PKG_a0;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <PEAK+0x1e8>)
 8000ae2:	edd3 6a00 	vldr	s13, [r3]
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <PEAK+0x1e0>)
 8000ae8:	ed93 7a00 	vldr	s14, [r3]
 8000aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <PEAK+0x1fc>)
 8000af2:	edc3 7a00 	vstr	s15, [r3]
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	f3af 8000 	nop.w
 8000b00:	f01b866e 	.word	0xf01b866e
 8000b04:	401921f9 	.word	0x401921f9
 8000b08:	20000084 	.word	0x20000084
 8000b0c:	20000068 	.word	0x20000068
 8000b10:	200072ec 	.word	0x200072ec
 8000b14:	200072f0 	.word	0x200072f0
 8000b18:	3dcccccd 	.word	0x3dcccccd
 8000b1c:	200072f4 	.word	0x200072f4
 8000b20:	200072f8 	.word	0x200072f8
 8000b24:	20000088 	.word	0x20000088
 8000b28:	200072fc 	.word	0x200072fc
 8000b2c:	20007300 	.word	0x20007300
 8000b30:	20007304 	.word	0x20007304
 8000b34:	20007308 	.word	0x20007308
 8000b38:	2000730c 	.word	0x2000730c
 8000b3c:	20007310 	.word	0x20007310
 8000b40:	20007314 	.word	0x20007314
 8000b44:	20007318 	.word	0x20007318
 8000b48:	2000731c 	.word	0x2000731c
 8000b4c:	20007320 	.word	0x20007320
 8000b50:	20007324 	.word	0x20007324
 8000b54:	20007328 	.word	0x20007328

08000b58 <HPF>:

void HPF() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	 // HPF Coefficients and Parameters

	    HPF_w0 = 2 * PI * (HPF_f0 / Fs);        // Cutoff Freq in radians
 8000b5c:	4b62      	ldr	r3, [pc, #392]	@ (8000ce8 <HPF+0x190>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	ee07 3a90 	vmov	s15, r3
 8000b64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b68:	4b60      	ldr	r3, [pc, #384]	@ (8000cec <HPF+0x194>)
 8000b6a:	ed93 7a00 	vldr	s14, [r3]
 8000b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b76:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8000ce0 <HPF+0x188>
 8000b7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b82:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf0 <HPF+0x198>)
 8000b84:	edc3 7a00 	vstr	s15, [r3]
	    HPF_cos_w0 = cos(HPF_w0);               // cosine omega
 8000b88:	4b59      	ldr	r3, [pc, #356]	@ (8000cf0 <HPF+0x198>)
 8000b8a:	edd3 7a00 	vldr	s15, [r3]
 8000b8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b92:	eeb0 0b47 	vmov.f64	d0, d7
 8000b96:	f006 faff 	bl	8007198 <cos>
 8000b9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ba2:	4b54      	ldr	r3, [pc, #336]	@ (8000cf4 <HPF+0x19c>)
 8000ba4:	edc3 7a00 	vstr	s15, [r3]
	    HPF_sin_w0 = sin(HPF_w0);               // sine omega
 8000ba8:	4b51      	ldr	r3, [pc, #324]	@ (8000cf0 <HPF+0x198>)
 8000baa:	edd3 7a00 	vldr	s15, [r3]
 8000bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bb2:	eeb0 0b47 	vmov.f64	d0, d7
 8000bb6:	f006 fb3b 	bl	8007230 <sin>
 8000bba:	eeb0 7b40 	vmov.f64	d7, d0
 8000bbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf8 <HPF+0x1a0>)
 8000bc4:	edc3 7a00 	vstr	s15, [r3]
	    HPF_alpha = HPF_sin_w0 / (2 * HPF_Q);
 8000bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf8 <HPF+0x1a0>)
 8000bca:	edd3 6a00 	vldr	s13, [r3]
 8000bce:	4b4b      	ldr	r3, [pc, #300]	@ (8000cfc <HPF+0x1a4>)
 8000bd0:	edd3 7a00 	vldr	s15, [r3]
 8000bd4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bdc:	4b48      	ldr	r3, [pc, #288]	@ (8000d00 <HPF+0x1a8>)
 8000bde:	edc3 7a00 	vstr	s15, [r3]

	    HPF_b0 = (1 + HPF_cos_w0) / 2;
 8000be2:	4b44      	ldr	r3, [pc, #272]	@ (8000cf4 <HPF+0x19c>)
 8000be4:	edd3 7a00 	vldr	s15, [r3]
 8000be8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000bec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000bf0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf8:	4b42      	ldr	r3, [pc, #264]	@ (8000d04 <HPF+0x1ac>)
 8000bfa:	edc3 7a00 	vstr	s15, [r3]
	    HPF_b1 = -(1 + HPF_cos_w0);
 8000bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf4 <HPF+0x19c>)
 8000c00:	edd3 7a00 	vldr	s15, [r3]
 8000c04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c0c:	eef1 7a67 	vneg.f32	s15, s15
 8000c10:	4b3d      	ldr	r3, [pc, #244]	@ (8000d08 <HPF+0x1b0>)
 8000c12:	edc3 7a00 	vstr	s15, [r3]
	    HPF_b2 = (1 + HPF_cos_w0) / 2;
 8000c16:	4b37      	ldr	r3, [pc, #220]	@ (8000cf4 <HPF+0x19c>)
 8000c18:	edd3 7a00 	vldr	s15, [r3]
 8000c1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c24:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c2c:	4b37      	ldr	r3, [pc, #220]	@ (8000d0c <HPF+0x1b4>)
 8000c2e:	edc3 7a00 	vstr	s15, [r3]
	    HPF_a0 = 1 + HPF_alpha;
 8000c32:	4b33      	ldr	r3, [pc, #204]	@ (8000d00 <HPF+0x1a8>)
 8000c34:	edd3 7a00 	vldr	s15, [r3]
 8000c38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c40:	4b33      	ldr	r3, [pc, #204]	@ (8000d10 <HPF+0x1b8>)
 8000c42:	edc3 7a00 	vstr	s15, [r3]
	    HPF_a1 = -2 * HPF_cos_w0;
 8000c46:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <HPF+0x19c>)
 8000c48:	edd3 7a00 	vldr	s15, [r3]
 8000c4c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8000c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c54:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <HPF+0x1bc>)
 8000c56:	edc3 7a00 	vstr	s15, [r3]
	    HPF_a2 = 1 - HPF_alpha;
 8000c5a:	4b29      	ldr	r3, [pc, #164]	@ (8000d00 <HPF+0x1a8>)
 8000c5c:	edd3 7a00 	vldr	s15, [r3]
 8000c60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c68:	4b2b      	ldr	r3, [pc, #172]	@ (8000d18 <HPF+0x1c0>)
 8000c6a:	edc3 7a00 	vstr	s15, [r3]

	    HPF_norm_b0 = HPF_b0 / HPF_a0;
 8000c6e:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <HPF+0x1ac>)
 8000c70:	edd3 6a00 	vldr	s13, [r3]
 8000c74:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <HPF+0x1b8>)
 8000c76:	ed93 7a00 	vldr	s14, [r3]
 8000c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c7e:	4b27      	ldr	r3, [pc, #156]	@ (8000d1c <HPF+0x1c4>)
 8000c80:	edc3 7a00 	vstr	s15, [r3]
	    HPF_norm_b1 = HPF_b1 / HPF_a0;
 8000c84:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <HPF+0x1b0>)
 8000c86:	edd3 6a00 	vldr	s13, [r3]
 8000c8a:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <HPF+0x1b8>)
 8000c8c:	ed93 7a00 	vldr	s14, [r3]
 8000c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <HPF+0x1c8>)
 8000c96:	edc3 7a00 	vstr	s15, [r3]
	    HPF_norm_b2 = HPF_b2 / HPF_a0;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <HPF+0x1b4>)
 8000c9c:	edd3 6a00 	vldr	s13, [r3]
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <HPF+0x1b8>)
 8000ca2:	ed93 7a00 	vldr	s14, [r3]
 8000ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000caa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <HPF+0x1cc>)
 8000cac:	edc3 7a00 	vstr	s15, [r3]
	    HPF_norm_a1 = HPF_a1 / HPF_a0;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HPF+0x1bc>)
 8000cb2:	edd3 6a00 	vldr	s13, [r3]
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <HPF+0x1b8>)
 8000cb8:	ed93 7a00 	vldr	s14, [r3]
 8000cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc0:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <HPF+0x1d0>)
 8000cc2:	edc3 7a00 	vstr	s15, [r3]
	    HPF_norm_a2 = HPF_a2 / HPF_a0;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <HPF+0x1c0>)
 8000cc8:	edd3 6a00 	vldr	s13, [r3]
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <HPF+0x1b8>)
 8000cce:	ed93 7a00 	vldr	s14, [r3]
 8000cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HPF+0x1d4>)
 8000cd8:	edc3 7a00 	vstr	s15, [r3]
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	f01b866e 	.word	0xf01b866e
 8000ce4:	401921f9 	.word	0x401921f9
 8000ce8:	20000074 	.word	0x20000074
 8000cec:	20000068 	.word	0x20000068
 8000cf0:	20007274 	.word	0x20007274
 8000cf4:	20007278 	.word	0x20007278
 8000cf8:	2000727c 	.word	0x2000727c
 8000cfc:	20000078 	.word	0x20000078
 8000d00:	20007280 	.word	0x20007280
 8000d04:	20007284 	.word	0x20007284
 8000d08:	20007288 	.word	0x20007288
 8000d0c:	2000728c 	.word	0x2000728c
 8000d10:	20007290 	.word	0x20007290
 8000d14:	20007294 	.word	0x20007294
 8000d18:	20007298 	.word	0x20007298
 8000d1c:	2000729c 	.word	0x2000729c
 8000d20:	200072a0 	.word	0x200072a0
 8000d24:	200072a4 	.word	0x200072a4
 8000d28:	200072a8 	.word	0x200072a8
 8000d2c:	200072ac 	.word	0x200072ac

08000d30 <Delay>:



void Delay() {
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

    Clim_1 = (Cdelay_1 * delay);
 8000d34:	4b3d      	ldr	r3, [pc, #244]	@ (8000e2c <Delay+0xfc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d40:	4b3b      	ldr	r3, [pc, #236]	@ (8000e30 <Delay+0x100>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4e:	ee17 2a90 	vmov	r2, s15
 8000d52:	4b38      	ldr	r3, [pc, #224]	@ (8000e34 <Delay+0x104>)
 8000d54:	601a      	str	r2, [r3, #0]
    Clim_2 = (Cdelay_2 * delay);
 8000d56:	4b38      	ldr	r3, [pc, #224]	@ (8000e38 <Delay+0x108>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d62:	4b33      	ldr	r3, [pc, #204]	@ (8000e30 <Delay+0x100>)
 8000d64:	edd3 7a00 	vldr	s15, [r3]
 8000d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d70:	ee17 2a90 	vmov	r2, s15
 8000d74:	4b31      	ldr	r3, [pc, #196]	@ (8000e3c <Delay+0x10c>)
 8000d76:	601a      	str	r2, [r3, #0]
    Clim_3 = (Cdelay_3 * delay);
 8000d78:	4b31      	ldr	r3, [pc, #196]	@ (8000e40 <Delay+0x110>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d84:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <Delay+0x100>)
 8000d86:	edd3 7a00 	vldr	s15, [r3]
 8000d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d92:	ee17 2a90 	vmov	r2, s15
 8000d96:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <Delay+0x114>)
 8000d98:	601a      	str	r2, [r3, #0]
    Clim_4 = (Cdelay_4 * delay);
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e48 <Delay+0x118>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da6:	4b22      	ldr	r3, [pc, #136]	@ (8000e30 <Delay+0x100>)
 8000da8:	edd3 7a00 	vldr	s15, [r3]
 8000dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000db4:	ee17 2a90 	vmov	r2, s15
 8000db8:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <Delay+0x11c>)
 8000dba:	601a      	str	r2, [r3, #0]

    // Calculate Alim values
    Alim_1 = (Adelay_1 * delay);
 8000dbc:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <Delay+0x120>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc8:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <Delay+0x100>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd6:	ee17 2a90 	vmov	r2, s15
 8000dda:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <Delay+0x124>)
 8000ddc:	601a      	str	r2, [r3, #0]
    Alim_2 = (Adelay_2 * delay);
 8000dde:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <Delay+0x128>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <Delay+0x100>)
 8000dec:	edd3 7a00 	vldr	s15, [r3]
 8000df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000df8:	ee17 2a90 	vmov	r2, s15
 8000dfc:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <Delay+0x12c>)
 8000dfe:	601a      	str	r2, [r3, #0]
    Alim_3 = (Adelay_3 * delay);
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <Delay+0x130>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	ee07 3a90 	vmov	s15, r3
 8000e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <Delay+0x100>)
 8000e0e:	edd3 7a00 	vldr	s15, [r3]
 8000e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e1a:	ee17 2a90 	vmov	r2, s15
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <Delay+0x134>)
 8000e20:	601a      	str	r2, [r3, #0]

    // Delay Calculated: Delay / Sample Time = Sample Buffer Length


}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000058 	.word	0x20000058
 8000e30:	2000002c 	.word	0x2000002c
 8000e34:	2000041c 	.word	0x2000041c
 8000e38:	2000005c 	.word	0x2000005c
 8000e3c:	20000420 	.word	0x20000420
 8000e40:	20000060 	.word	0x20000060
 8000e44:	20000424 	.word	0x20000424
 8000e48:	20000064 	.word	0x20000064
 8000e4c:	20000428 	.word	0x20000428
 8000e50:	20000040 	.word	0x20000040
 8000e54:	2000042c 	.word	0x2000042c
 8000e58:	20000048 	.word	0x20000048
 8000e5c:	20000430 	.word	0x20000430
 8000e60:	20000050 	.word	0x20000050
 8000e64:	20000434 	.word	0x20000434

08000e68 <buttonDebouncer>:


void buttonDebouncer()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	 	 int button_press = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);  // Filter select button
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4822      	ldr	r0, [pc, #136]	@ (8000efc <buttonDebouncer+0x94>)
 8000e72:	f002 fed7 	bl	8003c24 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	607b      	str	r3, [r7, #4]
	 	 int toggle_press = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);   // Filter ON/OFF toggle button
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	481f      	ldr	r0, [pc, #124]	@ (8000efc <buttonDebouncer+0x94>)
 8000e7e:	f002 fed1 	bl	8003c24 <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	603b      	str	r3, [r7, #0]
	    // Filter select button: Cycle through filters
	    if (button_press == 0 && last_state_filter == 1) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d10f      	bne.n	8000eac <buttonDebouncer+0x44>
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <buttonDebouncer+0x98>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10b      	bne.n	8000eac <buttonDebouncer+0x44>
	    	filter_count = (filter_count % 4) + 1;  // Cycle through filters
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <buttonDebouncer+0x9c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	425a      	negs	r2, r3
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	bf58      	it	pl
 8000ea4:	4253      	negpl	r3, r2
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a16      	ldr	r2, [pc, #88]	@ (8000f04 <buttonDebouncer+0x9c>)
 8000eaa:	6013      	str	r3, [r2, #0]
	    }
	    last_state_filter = button_press;
 8000eac:	4a14      	ldr	r2, [pc, #80]	@ (8000f00 <buttonDebouncer+0x98>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]

	    // Toggle button: Toggle the corresponding filter ON/OFF
	    if (toggle_press == 0 && last_state_toggle == 1) {
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d119      	bne.n	8000eec <buttonDebouncer+0x84>
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <buttonDebouncer+0xa0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d115      	bne.n	8000eec <buttonDebouncer+0x84>
	        filter_toggles[filter_count - 1] = !filter_toggles[filter_count - 1];  // Toggle the current filter's state
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <buttonDebouncer+0x9c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a11      	ldr	r2, [pc, #68]	@ (8000f0c <buttonDebouncer+0xa4>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bf14      	ite	ne
 8000ece:	2301      	movne	r3, #1
 8000ed0:	2300      	moveq	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f083 0301 	eor.w	r3, r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <buttonDebouncer+0x9c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	f002 0201 	and.w	r2, r2, #1
 8000ee6:	b2d1      	uxtb	r1, r2
 8000ee8:	4a08      	ldr	r2, [pc, #32]	@ (8000f0c <buttonDebouncer+0xa4>)
 8000eea:	54d1      	strb	r1, [r2, r3]
	    }
	    last_state_toggle = toggle_press;
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <buttonDebouncer+0xa0>)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	20000004 	.word	0x20000004
 8000f04:	200003f8 	.word	0x200003f8
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000000 	.word	0x20000000

08000f10 <ProcessFilters>:

void ProcessFilters()
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
		        h1[2] = h1[1];
 8000f14:	4b9c      	ldr	r3, [pc, #624]	@ (8001188 <ProcessFilters+0x278>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4a9b      	ldr	r2, [pc, #620]	@ (8001188 <ProcessFilters+0x278>)
 8000f1a:	6093      	str	r3, [r2, #8]
		       	h1[1] = h1[0];
 8000f1c:	4b9a      	ldr	r3, [pc, #616]	@ (8001188 <ProcessFilters+0x278>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a99      	ldr	r2, [pc, #612]	@ (8001188 <ProcessFilters+0x278>)
 8000f22:	6053      	str	r3, [r2, #4]
		        h1[0] = LPF_norm_b0 * x[0] + LPF_norm_b1 * x[1] + LPF_norm_b2 * x[2] - LPF_norm_a1 * h1[1] - LPF_norm_a2 * h1[2];
 8000f24:	4b99      	ldr	r3, [pc, #612]	@ (800118c <ProcessFilters+0x27c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f30:	4b97      	ldr	r3, [pc, #604]	@ (8001190 <ProcessFilters+0x280>)
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f3a:	4b94      	ldr	r3, [pc, #592]	@ (800118c <ProcessFilters+0x27c>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f46:	4b93      	ldr	r3, [pc, #588]	@ (8001194 <ProcessFilters+0x284>)
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f54:	4b8d      	ldr	r3, [pc, #564]	@ (800118c <ProcessFilters+0x27c>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f60:	4b8d      	ldr	r3, [pc, #564]	@ (8001198 <ProcessFilters+0x288>)
 8000f62:	edd3 7a00 	vldr	s15, [r3]
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f6e:	4b86      	ldr	r3, [pc, #536]	@ (8001188 <ProcessFilters+0x278>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f7a:	4b88      	ldr	r3, [pc, #544]	@ (800119c <ProcessFilters+0x28c>)
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f88:	4b7f      	ldr	r3, [pc, #508]	@ (8001188 <ProcessFilters+0x278>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f94:	4b82      	ldr	r3, [pc, #520]	@ (80011a0 <ProcessFilters+0x290>)
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa6:	ee17 2a90 	vmov	r2, s15
 8000faa:	4b77      	ldr	r3, [pc, #476]	@ (8001188 <ProcessFilters+0x278>)
 8000fac:	601a      	str	r2, [r3, #0]

		        h2[2] = h2[1];
 8000fae:	4b7d      	ldr	r3, [pc, #500]	@ (80011a4 <ProcessFilters+0x294>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4a7c      	ldr	r2, [pc, #496]	@ (80011a4 <ProcessFilters+0x294>)
 8000fb4:	6093      	str	r3, [r2, #8]
		        h2[1] = h2[0];
 8000fb6:	4b7b      	ldr	r3, [pc, #492]	@ (80011a4 <ProcessFilters+0x294>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a7a      	ldr	r2, [pc, #488]	@ (80011a4 <ProcessFilters+0x294>)
 8000fbc:	6053      	str	r3, [r2, #4]
		        h2[0] = NCH1_norm_b0 * h1[0] + NCH1_norm_b1 * h1[1] + NCH1_norm_b2 * h1[2] - NCH1_norm_a1 * h2[1] - NCH1_norm_a2 * h2[2];
 8000fbe:	4b72      	ldr	r3, [pc, #456]	@ (8001188 <ProcessFilters+0x278>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fca:	4b77      	ldr	r3, [pc, #476]	@ (80011a8 <ProcessFilters+0x298>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001188 <ProcessFilters+0x278>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fe0:	4b72      	ldr	r3, [pc, #456]	@ (80011ac <ProcessFilters+0x29c>)
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fee:	4b66      	ldr	r3, [pc, #408]	@ (8001188 <ProcessFilters+0x278>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80011b0 <ProcessFilters+0x2a0>)
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001004:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001008:	4b66      	ldr	r3, [pc, #408]	@ (80011a4 <ProcessFilters+0x294>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001014:	4b67      	ldr	r3, [pc, #412]	@ (80011b4 <ProcessFilters+0x2a4>)
 8001016:	edd3 7a00 	vldr	s15, [r3]
 800101a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800101e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001022:	4b60      	ldr	r3, [pc, #384]	@ (80011a4 <ProcessFilters+0x294>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800102e:	4b62      	ldr	r3, [pc, #392]	@ (80011b8 <ProcessFilters+0x2a8>)
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001040:	ee17 2a90 	vmov	r2, s15
 8001044:	4b57      	ldr	r3, [pc, #348]	@ (80011a4 <ProcessFilters+0x294>)
 8001046:	601a      	str	r2, [r3, #0]

		        h3[2] = h3[1];
 8001048:	4b5c      	ldr	r3, [pc, #368]	@ (80011bc <ProcessFilters+0x2ac>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a5b      	ldr	r2, [pc, #364]	@ (80011bc <ProcessFilters+0x2ac>)
 800104e:	6093      	str	r3, [r2, #8]
		        h3[1] = h3[0];
 8001050:	4b5a      	ldr	r3, [pc, #360]	@ (80011bc <ProcessFilters+0x2ac>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a59      	ldr	r2, [pc, #356]	@ (80011bc <ProcessFilters+0x2ac>)
 8001056:	6053      	str	r3, [r2, #4]
		        h3[0] = PKG_norm_b0 * h2[0] + PKG_norm_b1 * h2[1] + PKG_norm_b2 * h2[2] - PKG_norm_a1 * h3[1] - PKG_norm_a2 * h3[2];
 8001058:	4b52      	ldr	r3, [pc, #328]	@ (80011a4 <ProcessFilters+0x294>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	4b56      	ldr	r3, [pc, #344]	@ (80011c0 <ProcessFilters+0x2b0>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106e:	4b4d      	ldr	r3, [pc, #308]	@ (80011a4 <ProcessFilters+0x294>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800107a:	4b52      	ldr	r3, [pc, #328]	@ (80011c4 <ProcessFilters+0x2b4>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001084:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001088:	4b46      	ldr	r3, [pc, #280]	@ (80011a4 <ProcessFilters+0x294>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001094:	4b4c      	ldr	r3, [pc, #304]	@ (80011c8 <ProcessFilters+0x2b8>)
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a2:	4b46      	ldr	r3, [pc, #280]	@ (80011bc <ProcessFilters+0x2ac>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010ae:	4b47      	ldr	r3, [pc, #284]	@ (80011cc <ProcessFilters+0x2bc>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010bc:	4b3f      	ldr	r3, [pc, #252]	@ (80011bc <ProcessFilters+0x2ac>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010c8:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <ProcessFilters+0x2c0>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010da:	ee17 2a90 	vmov	r2, s15
 80010de:	4b37      	ldr	r3, [pc, #220]	@ (80011bc <ProcessFilters+0x2ac>)
 80010e0:	601a      	str	r2, [r3, #0]

		        z[2] = z[1];
 80010e2:	4b3c      	ldr	r3, [pc, #240]	@ (80011d4 <ProcessFilters+0x2c4>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4a3b      	ldr	r2, [pc, #236]	@ (80011d4 <ProcessFilters+0x2c4>)
 80010e8:	6093      	str	r3, [r2, #8]
		        z[1] = z[0];
 80010ea:	4b3a      	ldr	r3, [pc, #232]	@ (80011d4 <ProcessFilters+0x2c4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a39      	ldr	r2, [pc, #228]	@ (80011d4 <ProcessFilters+0x2c4>)
 80010f0:	6053      	str	r3, [r2, #4]
		       	z[0] = HPF_norm_b0 * h3[0] + HPF_norm_b1 * h3[1] + HPF_norm_b2 * h3[2] - HPF_norm_a1 * z[1] - HPF_norm_a2 * z[2];
 80010f2:	4b32      	ldr	r3, [pc, #200]	@ (80011bc <ProcessFilters+0x2ac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fe:	4b36      	ldr	r3, [pc, #216]	@ (80011d8 <ProcessFilters+0x2c8>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001108:	4b2c      	ldr	r3, [pc, #176]	@ (80011bc <ProcessFilters+0x2ac>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001114:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <ProcessFilters+0x2cc>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <ProcessFilters+0x2ac>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800112e:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <ProcessFilters+0x2d0>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <ProcessFilters+0x2c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001148:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <ProcessFilters+0x2d4>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001156:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <ProcessFilters+0x2c4>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001162:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <ProcessFilters+0x2d8>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001174:	ee17 2a90 	vmov	r2, s15
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <ProcessFilters+0x2c4>)
 800117a:	601a      	str	r2, [r3, #0]

}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200003c8 	.word	0x200003c8
 800118c:	200003bc 	.word	0x200003bc
 8001190:	20007260 	.word	0x20007260
 8001194:	20007264 	.word	0x20007264
 8001198:	20007268 	.word	0x20007268
 800119c:	2000726c 	.word	0x2000726c
 80011a0:	20007270 	.word	0x20007270
 80011a4:	200003d4 	.word	0x200003d4
 80011a8:	200072d8 	.word	0x200072d8
 80011ac:	200072dc 	.word	0x200072dc
 80011b0:	200072e0 	.word	0x200072e0
 80011b4:	200072e4 	.word	0x200072e4
 80011b8:	200072e8 	.word	0x200072e8
 80011bc:	200003e0 	.word	0x200003e0
 80011c0:	20007318 	.word	0x20007318
 80011c4:	2000731c 	.word	0x2000731c
 80011c8:	20007320 	.word	0x20007320
 80011cc:	20007324 	.word	0x20007324
 80011d0:	20007328 	.word	0x20007328
 80011d4:	200003ec 	.word	0x200003ec
 80011d8:	2000729c 	.word	0x2000729c
 80011dc:	200072a0 	.word	0x200072a0
 80011e0:	200072a4 	.word	0x200072a4
 80011e4:	200072a8 	.word	0x200072a8
 80011e8:	200072ac 	.word	0x200072ac

080011ec <reverb>:

void reverb()
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
    // --- Reverb Processing ---
   	      // Process the comb filters (using separate indices and buffers)
   	     // Comb Filter 1:
   	     Cout_1 = Cbuff_1[C_index_1];
 80011f0:	4baf      	ldr	r3, [pc, #700]	@ (80014b0 <reverb+0x2c4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4aaf      	ldr	r2, [pc, #700]	@ (80014b4 <reverb+0x2c8>)
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	4aaf      	ldr	r2, [pc, #700]	@ (80014b8 <reverb+0x2cc>)
 80011fc:	6013      	str	r3, [r2, #0]
   	     Cbuff_1[C_index_1] = z[0] + Cout_1 * Cgain_1;
 80011fe:	4baf      	ldr	r3, [pc, #700]	@ (80014bc <reverb+0x2d0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120a:	4bab      	ldr	r3, [pc, #684]	@ (80014b8 <reverb+0x2cc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001216:	4baa      	ldr	r3, [pc, #680]	@ (80014c0 <reverb+0x2d4>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001224:	4ba2      	ldr	r3, [pc, #648]	@ (80014b0 <reverb+0x2c4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122c:	ee17 1a90 	vmov	r1, s15
 8001230:	4aa0      	ldr	r2, [pc, #640]	@ (80014b4 <reverb+0x2c8>)
 8001232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   	     C_index_1++;
 8001236:	4b9e      	ldr	r3, [pc, #632]	@ (80014b0 <reverb+0x2c4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a9c      	ldr	r2, [pc, #624]	@ (80014b0 <reverb+0x2c4>)
 800123e:	6013      	str	r3, [r2, #0]
   	     if (C_index_1 >= Cdelay_1) { C_index_1 = 0; }
 8001240:	4b9b      	ldr	r3, [pc, #620]	@ (80014b0 <reverb+0x2c4>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b9f      	ldr	r3, [pc, #636]	@ (80014c4 <reverb+0x2d8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	db02      	blt.n	8001252 <reverb+0x66>
 800124c:	4b98      	ldr	r3, [pc, #608]	@ (80014b0 <reverb+0x2c4>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]

   	     // Comb Filter 2:
   	     Cout_2 = Cbuff_2[C_index_2];
 8001252:	4b9d      	ldr	r3, [pc, #628]	@ (80014c8 <reverb+0x2dc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a9d      	ldr	r2, [pc, #628]	@ (80014cc <reverb+0x2e0>)
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	4a9c      	ldr	r2, [pc, #624]	@ (80014d0 <reverb+0x2e4>)
 800125e:	6013      	str	r3, [r2, #0]
   	     Cbuff_2[C_index_2] = z[0] + Cout_2 * Cgain_2;
 8001260:	4b96      	ldr	r3, [pc, #600]	@ (80014bc <reverb+0x2d0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126c:	4b98      	ldr	r3, [pc, #608]	@ (80014d0 <reverb+0x2e4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001278:	4b96      	ldr	r3, [pc, #600]	@ (80014d4 <reverb+0x2e8>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	4b90      	ldr	r3, [pc, #576]	@ (80014c8 <reverb+0x2dc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128e:	ee17 1a90 	vmov	r1, s15
 8001292:	4a8e      	ldr	r2, [pc, #568]	@ (80014cc <reverb+0x2e0>)
 8001294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   	     C_index_2++;
 8001298:	4b8b      	ldr	r3, [pc, #556]	@ (80014c8 <reverb+0x2dc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a8a      	ldr	r2, [pc, #552]	@ (80014c8 <reverb+0x2dc>)
 80012a0:	6013      	str	r3, [r2, #0]
   	     if (C_index_2 >= Cdelay_2) { C_index_2 = 0; }
 80012a2:	4b89      	ldr	r3, [pc, #548]	@ (80014c8 <reverb+0x2dc>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b8c      	ldr	r3, [pc, #560]	@ (80014d8 <reverb+0x2ec>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	db02      	blt.n	80012b4 <reverb+0xc8>
 80012ae:	4b86      	ldr	r3, [pc, #536]	@ (80014c8 <reverb+0x2dc>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

   	     // Comb Filter 3:
   	     Cout_3 = Cbuff_3[C_index_3];
 80012b4:	4b89      	ldr	r3, [pc, #548]	@ (80014dc <reverb+0x2f0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a89      	ldr	r2, [pc, #548]	@ (80014e0 <reverb+0x2f4>)
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	4a89      	ldr	r2, [pc, #548]	@ (80014e4 <reverb+0x2f8>)
 80012c0:	6013      	str	r3, [r2, #0]
   	     Cbuff_3[C_index_3] = z[0] + Cout_3 * Cgain_3;
 80012c2:	4b7e      	ldr	r3, [pc, #504]	@ (80014bc <reverb+0x2d0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	4b85      	ldr	r3, [pc, #532]	@ (80014e4 <reverb+0x2f8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012da:	4b83      	ldr	r3, [pc, #524]	@ (80014e8 <reverb+0x2fc>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e8:	4b7c      	ldr	r3, [pc, #496]	@ (80014dc <reverb+0x2f0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f0:	ee17 1a90 	vmov	r1, s15
 80012f4:	4a7a      	ldr	r2, [pc, #488]	@ (80014e0 <reverb+0x2f4>)
 80012f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   	     C_index_3++;
 80012fa:	4b78      	ldr	r3, [pc, #480]	@ (80014dc <reverb+0x2f0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	4a76      	ldr	r2, [pc, #472]	@ (80014dc <reverb+0x2f0>)
 8001302:	6013      	str	r3, [r2, #0]
   	     if (C_index_3 >= Cdelay_3) { C_index_3 = 0; }
 8001304:	4b75      	ldr	r3, [pc, #468]	@ (80014dc <reverb+0x2f0>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b78      	ldr	r3, [pc, #480]	@ (80014ec <reverb+0x300>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	db02      	blt.n	8001316 <reverb+0x12a>
 8001310:	4b72      	ldr	r3, [pc, #456]	@ (80014dc <reverb+0x2f0>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

   	     // Comb Filter 4:
   	     Cout_4 = Cbuff_4[C_index_4];
 8001316:	4b76      	ldr	r3, [pc, #472]	@ (80014f0 <reverb+0x304>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a76      	ldr	r2, [pc, #472]	@ (80014f4 <reverb+0x308>)
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	4a75      	ldr	r2, [pc, #468]	@ (80014f8 <reverb+0x30c>)
 8001322:	6013      	str	r3, [r2, #0]
   	     Cbuff_4[C_index_4] = z[0] + Cout_4 * Cgain_4;
 8001324:	4b65      	ldr	r3, [pc, #404]	@ (80014bc <reverb+0x2d0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001330:	4b71      	ldr	r3, [pc, #452]	@ (80014f8 <reverb+0x30c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800133c:	4b6f      	ldr	r3, [pc, #444]	@ (80014fc <reverb+0x310>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134a:	4b69      	ldr	r3, [pc, #420]	@ (80014f0 <reverb+0x304>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001352:	ee17 1a90 	vmov	r1, s15
 8001356:	4a67      	ldr	r2, [pc, #412]	@ (80014f4 <reverb+0x308>)
 8001358:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   	     C_index_4++;
 800135c:	4b64      	ldr	r3, [pc, #400]	@ (80014f0 <reverb+0x304>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a63      	ldr	r2, [pc, #396]	@ (80014f0 <reverb+0x304>)
 8001364:	6013      	str	r3, [r2, #0]
   	     if (C_index_4 >= Cdelay_4) { C_index_4 = 0; }
 8001366:	4b62      	ldr	r3, [pc, #392]	@ (80014f0 <reverb+0x304>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b65      	ldr	r3, [pc, #404]	@ (8001500 <reverb+0x314>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	db02      	blt.n	8001378 <reverb+0x18c>
 8001372:	4b5f      	ldr	r3, [pc, #380]	@ (80014f0 <reverb+0x304>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

   	     // Combine the outputs of the comb filters:
   	     Csum = (Cout_1 + Cout_2 + Cout_3 + Cout_4) * 0.25f;
 8001378:	4b4f      	ldr	r3, [pc, #316]	@ (80014b8 <reverb+0x2cc>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b54      	ldr	r3, [pc, #336]	@ (80014d0 <reverb+0x2e4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	441a      	add	r2, r3
 8001382:	4b58      	ldr	r3, [pc, #352]	@ (80014e4 <reverb+0x2f8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	441a      	add	r2, r3
 8001388:	4b5b      	ldr	r3, [pc, #364]	@ (80014f8 <reverb+0x30c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4413      	add	r3, r2
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001396:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a2:	ee17 2a90 	vmov	r2, s15
 80013a6:	4b57      	ldr	r3, [pc, #348]	@ (8001504 <reverb+0x318>)
 80013a8:	601a      	str	r2, [r3, #0]

   	      // Process the all-pass filters:
   	      // All-pass Filter 1:
   	      Aout_1 = Abuff_1[A_index_1] - Csum * Again_1;
 80013aa:	4b57      	ldr	r3, [pc, #348]	@ (8001508 <reverb+0x31c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a57      	ldr	r2, [pc, #348]	@ (800150c <reverb+0x320>)
 80013b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	4b51      	ldr	r3, [pc, #324]	@ (8001504 <reverb+0x318>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013c8:	4b51      	ldr	r3, [pc, #324]	@ (8001510 <reverb+0x324>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013da:	ee17 2a90 	vmov	r2, s15
 80013de:	4b4d      	ldr	r3, [pc, #308]	@ (8001514 <reverb+0x328>)
 80013e0:	601a      	str	r2, [r3, #0]
   	      Abuff_1[A_index_1] = Csum + Aout_1 * Again_1;
 80013e2:	4b48      	ldr	r3, [pc, #288]	@ (8001504 <reverb+0x318>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ee:	4b49      	ldr	r3, [pc, #292]	@ (8001514 <reverb+0x328>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013fa:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <reverb+0x324>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001408:	4b3f      	ldr	r3, [pc, #252]	@ (8001508 <reverb+0x31c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001410:	ee17 1a90 	vmov	r1, s15
 8001414:	4a3d      	ldr	r2, [pc, #244]	@ (800150c <reverb+0x320>)
 8001416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   	      A_index_1++;
 800141a:	4b3b      	ldr	r3, [pc, #236]	@ (8001508 <reverb+0x31c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a39      	ldr	r2, [pc, #228]	@ (8001508 <reverb+0x31c>)
 8001422:	6013      	str	r3, [r2, #0]
   	      if (A_index_1 >= Adelay_1) { A_index_1 = 0; }
 8001424:	4b38      	ldr	r3, [pc, #224]	@ (8001508 <reverb+0x31c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b3b      	ldr	r3, [pc, #236]	@ (8001518 <reverb+0x32c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	db02      	blt.n	8001436 <reverb+0x24a>
 8001430:	4b35      	ldr	r3, [pc, #212]	@ (8001508 <reverb+0x31c>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

   	      // All-pass Filter 2:
   	      Aout_2 = Abuff_2[A_index_2] - Aout_1 * Again_2;
 8001436:	4b39      	ldr	r3, [pc, #228]	@ (800151c <reverb+0x330>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a39      	ldr	r2, [pc, #228]	@ (8001520 <reverb+0x334>)
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001448:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <reverb+0x328>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001454:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <reverb+0x338>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001466:	ee17 2a90 	vmov	r2, s15
 800146a:	4b2f      	ldr	r3, [pc, #188]	@ (8001528 <reverb+0x33c>)
 800146c:	601a      	str	r2, [r3, #0]
   	      Abuff_2[A_index_2] = Aout_1 + Aout_2 * Again_2;
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <reverb+0x328>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800147a:	4b2b      	ldr	r3, [pc, #172]	@ (8001528 <reverb+0x33c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001486:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <reverb+0x338>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001494:	4b21      	ldr	r3, [pc, #132]	@ (800151c <reverb+0x330>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800149c:	ee17 1a90 	vmov	r1, s15
 80014a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001520 <reverb+0x334>)
 80014a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   	      A_index_2++;
 80014a6:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <reverb+0x330>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	e03e      	b.n	800152c <reverb+0x340>
 80014ae:	bf00      	nop
 80014b0:	2000000c 	.word	0x2000000c
 80014b4:	2000043c 	.word	0x2000043c
 80014b8:	2000040c 	.word	0x2000040c
 80014bc:	200003ec 	.word	0x200003ec
 80014c0:	20000030 	.word	0x20000030
 80014c4:	20000058 	.word	0x20000058
 80014c8:	20000010 	.word	0x20000010
 80014cc:	20001d14 	.word	0x20001d14
 80014d0:	20000410 	.word	0x20000410
 80014d4:	20000034 	.word	0x20000034
 80014d8:	2000005c 	.word	0x2000005c
 80014dc:	20000014 	.word	0x20000014
 80014e0:	20003284 	.word	0x20003284
 80014e4:	20000414 	.word	0x20000414
 80014e8:	20000038 	.word	0x20000038
 80014ec:	20000060 	.word	0x20000060
 80014f0:	20000018 	.word	0x20000018
 80014f4:	20004e5c 	.word	0x20004e5c
 80014f8:	20000418 	.word	0x20000418
 80014fc:	2000003c 	.word	0x2000003c
 8001500:	20000064 	.word	0x20000064
 8001504:	200003fc 	.word	0x200003fc
 8001508:	2000001c 	.word	0x2000001c
 800150c:	20006d4c 	.word	0x20006d4c
 8001510:	20000044 	.word	0x20000044
 8001514:	20000400 	.word	0x20000400
 8001518:	20000040 	.word	0x20000040
 800151c:	20000020 	.word	0x20000020
 8001520:	200070bc 	.word	0x200070bc
 8001524:	2000004c 	.word	0x2000004c
 8001528:	20000404 	.word	0x20000404
 800152c:	4a2a      	ldr	r2, [pc, #168]	@ (80015d8 <reverb+0x3ec>)
 800152e:	6013      	str	r3, [r2, #0]
   	      if (A_index_2 >= Adelay_2) { A_index_2 = 0; }
 8001530:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <reverb+0x3ec>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <reverb+0x3f0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	db02      	blt.n	8001542 <reverb+0x356>
 800153c:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <reverb+0x3ec>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]

   	      // All-pass Filter 3:
   	      Aout_3 = Abuff_3[A_index_3] - Aout_2 * Again_3;
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <reverb+0x3f4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a27      	ldr	r2, [pc, #156]	@ (80015e4 <reverb+0x3f8>)
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001554:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <reverb+0x3fc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001560:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <reverb+0x400>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001572:	ee17 2a90 	vmov	r2, s15
 8001576:	4b1e      	ldr	r3, [pc, #120]	@ (80015f0 <reverb+0x404>)
 8001578:	601a      	str	r2, [r3, #0]
   	      Abuff_3[A_index_3] = Aout_2 + Aout_3 * Again_3;
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <reverb+0x3fc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001586:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <reverb+0x404>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <reverb+0x400>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <reverb+0x3f4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a8:	ee17 1a90 	vmov	r1, s15
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <reverb+0x3f8>)
 80015ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   	      A_index_3++;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <reverb+0x3f4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a09      	ldr	r2, [pc, #36]	@ (80015e0 <reverb+0x3f4>)
 80015ba:	6013      	str	r3, [r2, #0]
   	      if (A_index_3 >= Adelay_3) { A_index_3 = 0; }
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <reverb+0x3f4>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <reverb+0x408>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	db02      	blt.n	80015ce <reverb+0x3e2>
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <reverb+0x3f4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	20000020 	.word	0x20000020
 80015dc:	20000048 	.word	0x20000048
 80015e0:	20000024 	.word	0x20000024
 80015e4:	200071e4 	.word	0x200071e4
 80015e8:	20000404 	.word	0x20000404
 80015ec:	20000054 	.word	0x20000054
 80015f0:	20000408 	.word	0x20000408
 80015f4:	20000050 	.word	0x20000050

080015f8 <FilterToggle>:

void FilterToggle()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
		       	// Biquad Low Pass Filter
		       	if (filter_toggles[0]) {
 80015fc:	4b93      	ldr	r3, [pc, #588]	@ (800184c <FilterToggle+0x254>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d052      	beq.n	80016aa <FilterToggle+0xb2>
		       		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);  // Turn on Low-Pass LED
 8001604:	2201      	movs	r2, #1
 8001606:	2101      	movs	r1, #1
 8001608:	4891      	ldr	r0, [pc, #580]	@ (8001850 <FilterToggle+0x258>)
 800160a:	f002 fb23 	bl	8003c54 <HAL_GPIO_WritePin>
		       	    h1[2] = h1[1];
 800160e:	4b91      	ldr	r3, [pc, #580]	@ (8001854 <FilterToggle+0x25c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a90      	ldr	r2, [pc, #576]	@ (8001854 <FilterToggle+0x25c>)
 8001614:	6093      	str	r3, [r2, #8]
		       	    h1[1] = h1[0];
 8001616:	4b8f      	ldr	r3, [pc, #572]	@ (8001854 <FilterToggle+0x25c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a8e      	ldr	r2, [pc, #568]	@ (8001854 <FilterToggle+0x25c>)
 800161c:	6053      	str	r3, [r2, #4]
		       	    h1[0] = LPF_norm_b0 * x[0] + LPF_norm_b1 * x[1] + LPF_norm_b2 * x[2] - LPF_norm_a1 * h1[1] - LPF_norm_a2 * h1[2];
 800161e:	4b8e      	ldr	r3, [pc, #568]	@ (8001858 <FilterToggle+0x260>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	4b8c      	ldr	r3, [pc, #560]	@ (800185c <FilterToggle+0x264>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001634:	4b88      	ldr	r3, [pc, #544]	@ (8001858 <FilterToggle+0x260>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001640:	4b87      	ldr	r3, [pc, #540]	@ (8001860 <FilterToggle+0x268>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164e:	4b82      	ldr	r3, [pc, #520]	@ (8001858 <FilterToggle+0x260>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800165a:	4b82      	ldr	r3, [pc, #520]	@ (8001864 <FilterToggle+0x26c>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001668:	4b7a      	ldr	r3, [pc, #488]	@ (8001854 <FilterToggle+0x25c>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001674:	4b7c      	ldr	r3, [pc, #496]	@ (8001868 <FilterToggle+0x270>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001682:	4b74      	ldr	r3, [pc, #464]	@ (8001854 <FilterToggle+0x25c>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800168e:	4b77      	ldr	r3, [pc, #476]	@ (800186c <FilterToggle+0x274>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a0:	ee17 2a90 	vmov	r2, s15
 80016a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001854 <FilterToggle+0x25c>)
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e010      	b.n	80016cc <FilterToggle+0xd4>

		       	} else {
		       		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);  // Turn off Low-Pass LED
 80016aa:	2200      	movs	r2, #0
 80016ac:	2101      	movs	r1, #1
 80016ae:	4868      	ldr	r0, [pc, #416]	@ (8001850 <FilterToggle+0x258>)
 80016b0:	f002 fad0 	bl	8003c54 <HAL_GPIO_WritePin>
		       	    h1[2] = x[2];  // Bypass filter by passing input directly
 80016b4:	4b68      	ldr	r3, [pc, #416]	@ (8001858 <FilterToggle+0x260>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a66      	ldr	r2, [pc, #408]	@ (8001854 <FilterToggle+0x25c>)
 80016ba:	6093      	str	r3, [r2, #8]
		       	    h1[1] = x[1];
 80016bc:	4b66      	ldr	r3, [pc, #408]	@ (8001858 <FilterToggle+0x260>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a64      	ldr	r2, [pc, #400]	@ (8001854 <FilterToggle+0x25c>)
 80016c2:	6053      	str	r3, [r2, #4]
		       	    h1[0] = x[0];
 80016c4:	4b64      	ldr	r3, [pc, #400]	@ (8001858 <FilterToggle+0x260>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a62      	ldr	r2, [pc, #392]	@ (8001854 <FilterToggle+0x25c>)
 80016ca:	6013      	str	r3, [r2, #0]
		       	}

		       	// Biquad Notch Filter
		       	if (filter_toggles[1]) {
 80016cc:	4b5f      	ldr	r3, [pc, #380]	@ (800184c <FilterToggle+0x254>)
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d052      	beq.n	800177a <FilterToggle+0x182>
		       	    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);  // Turn on Notch LED
 80016d4:	2201      	movs	r2, #1
 80016d6:	2180      	movs	r1, #128	@ 0x80
 80016d8:	4865      	ldr	r0, [pc, #404]	@ (8001870 <FilterToggle+0x278>)
 80016da:	f002 fabb 	bl	8003c54 <HAL_GPIO_WritePin>

		       	    h2[2] = h2[1];
 80016de:	4b65      	ldr	r3, [pc, #404]	@ (8001874 <FilterToggle+0x27c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4a64      	ldr	r2, [pc, #400]	@ (8001874 <FilterToggle+0x27c>)
 80016e4:	6093      	str	r3, [r2, #8]
		       	    h2[1] = h2[0];
 80016e6:	4b63      	ldr	r3, [pc, #396]	@ (8001874 <FilterToggle+0x27c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a62      	ldr	r2, [pc, #392]	@ (8001874 <FilterToggle+0x27c>)
 80016ec:	6053      	str	r3, [r2, #4]
		       	    h2[0] = NCH1_norm_b0 * h1[0] + NCH1_norm_b1 * h1[1] + NCH1_norm_b2 * h1[2] - NCH1_norm_a1 * h2[1] - NCH1_norm_a2 * h2[2];
 80016ee:	4b59      	ldr	r3, [pc, #356]	@ (8001854 <FilterToggle+0x25c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001878 <FilterToggle+0x280>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001704:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <FilterToggle+0x25c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001710:	4b5a      	ldr	r3, [pc, #360]	@ (800187c <FilterToggle+0x284>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800171e:	4b4d      	ldr	r3, [pc, #308]	@ (8001854 <FilterToggle+0x25c>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172a:	4b55      	ldr	r3, [pc, #340]	@ (8001880 <FilterToggle+0x288>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001738:	4b4e      	ldr	r3, [pc, #312]	@ (8001874 <FilterToggle+0x27c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001744:	4b4f      	ldr	r3, [pc, #316]	@ (8001884 <FilterToggle+0x28c>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001752:	4b48      	ldr	r3, [pc, #288]	@ (8001874 <FilterToggle+0x27c>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800175e:	4b4a      	ldr	r3, [pc, #296]	@ (8001888 <FilterToggle+0x290>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001770:	ee17 2a90 	vmov	r2, s15
 8001774:	4b3f      	ldr	r3, [pc, #252]	@ (8001874 <FilterToggle+0x27c>)
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e010      	b.n	800179c <FilterToggle+0x1a4>

		       	} else {
		       	    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);  // Turn off Notch LED
 800177a:	2200      	movs	r2, #0
 800177c:	2180      	movs	r1, #128	@ 0x80
 800177e:	483c      	ldr	r0, [pc, #240]	@ (8001870 <FilterToggle+0x278>)
 8001780:	f002 fa68 	bl	8003c54 <HAL_GPIO_WritePin>
		       	    h2[2] = h1[2];  // Bypass filter
 8001784:	4b33      	ldr	r3, [pc, #204]	@ (8001854 <FilterToggle+0x25c>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a3a      	ldr	r2, [pc, #232]	@ (8001874 <FilterToggle+0x27c>)
 800178a:	6093      	str	r3, [r2, #8]
		       	    h2[1] = h1[1];
 800178c:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <FilterToggle+0x25c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a38      	ldr	r2, [pc, #224]	@ (8001874 <FilterToggle+0x27c>)
 8001792:	6053      	str	r3, [r2, #4]
		       	    h2[0] = h1[0];
 8001794:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <FilterToggle+0x25c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a36      	ldr	r2, [pc, #216]	@ (8001874 <FilterToggle+0x27c>)
 800179a:	6013      	str	r3, [r2, #0]
		       	}

		       	// Biquad Peak Filter
		       	if (filter_toggles[2]) {
 800179c:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <FilterToggle+0x254>)
 800179e:	789b      	ldrb	r3, [r3, #2]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d07f      	beq.n	80018a4 <FilterToggle+0x2ac>
		       	    HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);  // Turn on Peak LED
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017aa:	4831      	ldr	r0, [pc, #196]	@ (8001870 <FilterToggle+0x278>)
 80017ac:	f002 fa52 	bl	8003c54 <HAL_GPIO_WritePin>
		       	    h3[2] = h3[1];
 80017b0:	4b36      	ldr	r3, [pc, #216]	@ (800188c <FilterToggle+0x294>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a35      	ldr	r2, [pc, #212]	@ (800188c <FilterToggle+0x294>)
 80017b6:	6093      	str	r3, [r2, #8]
		       	    h3[1] = h3[0];
 80017b8:	4b34      	ldr	r3, [pc, #208]	@ (800188c <FilterToggle+0x294>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a33      	ldr	r2, [pc, #204]	@ (800188c <FilterToggle+0x294>)
 80017be:	6053      	str	r3, [r2, #4]
		       	    h3[0] = PKG_norm_b0 * h2[0] + PKG_norm_b1 * h2[1] + PKG_norm_b2 * h2[2] - PKG_norm_a1 * h3[1] - PKG_norm_a2 * h3[2];
 80017c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001874 <FilterToggle+0x27c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017cc:	4b30      	ldr	r3, [pc, #192]	@ (8001890 <FilterToggle+0x298>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d6:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <FilterToggle+0x27c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <FilterToggle+0x29c>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f0:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <FilterToggle+0x27c>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fc:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <FilterToggle+0x2a0>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001806:	ee37 7a27 	vadd.f32	s14, s14, s15
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <FilterToggle+0x294>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001816:	4b21      	ldr	r3, [pc, #132]	@ (800189c <FilterToggle+0x2a4>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001820:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001824:	4b19      	ldr	r3, [pc, #100]	@ (800188c <FilterToggle+0x294>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <FilterToggle+0x2a8>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001842:	ee17 2a90 	vmov	r2, s15
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <FilterToggle+0x294>)
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e03d      	b.n	80018c8 <FilterToggle+0x2d0>
 800184c:	20000000 	.word	0x20000000
 8001850:	40021400 	.word	0x40021400
 8001854:	200003c8 	.word	0x200003c8
 8001858:	200003bc 	.word	0x200003bc
 800185c:	20007260 	.word	0x20007260
 8001860:	20007264 	.word	0x20007264
 8001864:	20007268 	.word	0x20007268
 8001868:	2000726c 	.word	0x2000726c
 800186c:	20007270 	.word	0x20007270
 8001870:	40020400 	.word	0x40020400
 8001874:	200003d4 	.word	0x200003d4
 8001878:	200072d8 	.word	0x200072d8
 800187c:	200072dc 	.word	0x200072dc
 8001880:	200072e0 	.word	0x200072e0
 8001884:	200072e4 	.word	0x200072e4
 8001888:	200072e8 	.word	0x200072e8
 800188c:	200003e0 	.word	0x200003e0
 8001890:	20007318 	.word	0x20007318
 8001894:	2000731c 	.word	0x2000731c
 8001898:	20007320 	.word	0x20007320
 800189c:	20007324 	.word	0x20007324
 80018a0:	20007328 	.word	0x20007328

		       	} else {
		       	    HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);  // Turn off Peak LED
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018aa:	483c      	ldr	r0, [pc, #240]	@ (800199c <FilterToggle+0x3a4>)
 80018ac:	f002 f9d2 	bl	8003c54 <HAL_GPIO_WritePin>
		       	    h3[2] = h2[2];  // Bypass filter
 80018b0:	4b3b      	ldr	r3, [pc, #236]	@ (80019a0 <FilterToggle+0x3a8>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a3b      	ldr	r2, [pc, #236]	@ (80019a4 <FilterToggle+0x3ac>)
 80018b6:	6093      	str	r3, [r2, #8]
		       	    h3[1] = h2[1];
 80018b8:	4b39      	ldr	r3, [pc, #228]	@ (80019a0 <FilterToggle+0x3a8>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a39      	ldr	r2, [pc, #228]	@ (80019a4 <FilterToggle+0x3ac>)
 80018be:	6053      	str	r3, [r2, #4]
		       	    h3[0] = h2[0];
 80018c0:	4b37      	ldr	r3, [pc, #220]	@ (80019a0 <FilterToggle+0x3a8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a37      	ldr	r2, [pc, #220]	@ (80019a4 <FilterToggle+0x3ac>)
 80018c6:	6013      	str	r3, [r2, #0]
		       	}

		       	// Biquad High Pass Filter
		       	if (filter_toggles[3]) {
 80018c8:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <FilterToggle+0x3b0>)
 80018ca:	78db      	ldrb	r3, [r3, #3]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d052      	beq.n	8001976 <FilterToggle+0x37e>
		       	    HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);  // Turn on High-Pass LED
 80018d0:	2201      	movs	r2, #1
 80018d2:	2101      	movs	r1, #1
 80018d4:	4835      	ldr	r0, [pc, #212]	@ (80019ac <FilterToggle+0x3b4>)
 80018d6:	f002 f9bd 	bl	8003c54 <HAL_GPIO_WritePin>

		       	    z[2] = z[1];
 80018da:	4b35      	ldr	r3, [pc, #212]	@ (80019b0 <FilterToggle+0x3b8>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a34      	ldr	r2, [pc, #208]	@ (80019b0 <FilterToggle+0x3b8>)
 80018e0:	6093      	str	r3, [r2, #8]
		       	    z[1] = z[0];
 80018e2:	4b33      	ldr	r3, [pc, #204]	@ (80019b0 <FilterToggle+0x3b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a32      	ldr	r2, [pc, #200]	@ (80019b0 <FilterToggle+0x3b8>)
 80018e8:	6053      	str	r3, [r2, #4]
		       	    z[0] = HPF_norm_b0 * h3[0] + HPF_norm_b1 * h3[1] + HPF_norm_b2 * h3[2] - HPF_norm_a1 * z[1] - HPF_norm_a2 * z[2];
 80018ea:	4b2e      	ldr	r3, [pc, #184]	@ (80019a4 <FilterToggle+0x3ac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f6:	4b2f      	ldr	r3, [pc, #188]	@ (80019b4 <FilterToggle+0x3bc>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001900:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <FilterToggle+0x3ac>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800190c:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <FilterToggle+0x3c0>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001916:	ee37 7a27 	vadd.f32	s14, s14, s15
 800191a:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <FilterToggle+0x3ac>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001926:	4b25      	ldr	r3, [pc, #148]	@ (80019bc <FilterToggle+0x3c4>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001934:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <FilterToggle+0x3b8>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001940:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <FilterToggle+0x3c8>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800194e:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <FilterToggle+0x3b8>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <FilterToggle+0x3cc>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196c:	ee17 2a90 	vmov	r2, s15
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <FilterToggle+0x3b8>)
 8001972:	601a      	str	r2, [r3, #0]
		       	    z[2] = h3[2];  // Bypass filter
		       	    z[1] = h3[1];
		       	    z[0] = h3[0];
		       	}

}
 8001974:	e010      	b.n	8001998 <FilterToggle+0x3a0>
		       	    HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);  // Turn off High-Pass LED
 8001976:	2200      	movs	r2, #0
 8001978:	2101      	movs	r1, #1
 800197a:	480c      	ldr	r0, [pc, #48]	@ (80019ac <FilterToggle+0x3b4>)
 800197c:	f002 f96a 	bl	8003c54 <HAL_GPIO_WritePin>
		       	    z[2] = h3[2];  // Bypass filter
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <FilterToggle+0x3ac>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <FilterToggle+0x3b8>)
 8001986:	6093      	str	r3, [r2, #8]
		       	    z[1] = h3[1];
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <FilterToggle+0x3ac>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a08      	ldr	r2, [pc, #32]	@ (80019b0 <FilterToggle+0x3b8>)
 800198e:	6053      	str	r3, [r2, #4]
		       	    z[0] = h3[0];
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <FilterToggle+0x3ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a06      	ldr	r2, [pc, #24]	@ (80019b0 <FilterToggle+0x3b8>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40020400 	.word	0x40020400
 80019a0:	200003d4 	.word	0x200003d4
 80019a4:	200003e0 	.word	0x200003e0
 80019a8:	20000000 	.word	0x20000000
 80019ac:	40021800 	.word	0x40021800
 80019b0:	200003ec 	.word	0x200003ec
 80019b4:	2000729c 	.word	0x2000729c
 80019b8:	200072a0 	.word	0x200072a0
 80019bc:	200072a4 	.word	0x200072a4
 80019c0:	200072a8 	.word	0x200072a8
 80019c4:	200072ac 	.word	0x200072ac

080019c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b09c      	sub	sp, #112	@ 0x70
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a10      	ldr	r2, [pc, #64]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d11a      	bne.n	8001a10 <HAL_TIM_PeriodElapsedCallback+0x48>
    {
        char message[100]={'\0'};//Null character '\0'
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	2260      	movs	r2, #96	@ 0x60
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 ff56 	bl	8006898 <memset>
        int cnt_value = __HAL_TIM_GET_COUNTER(&htim1);
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        sprintf(message, "%d", cnt_value);  // Convert integer to string
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80019fa:	4909      	ldr	r1, [pc, #36]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 ff2b 	bl	8006858 <siprintf>
        //HAL_UART_Transmit(&huart3,(uint8_t)message, sizeof(message), 100);
        HAL_UART_Transmit_IT(&huart3, (uint8_t *)message, 100);
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	2264      	movs	r2, #100	@ 0x64
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4806      	ldr	r0, [pc, #24]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001a0c:	f004 f98c 	bl	8005d28 <HAL_UART_Transmit_IT>

    }
}
 8001a10:	bf00      	nop
 8001a12:	3770      	adds	r7, #112	@ 0x70
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40001000 	.word	0x40001000
 8001a1c:	20000160 	.word	0x20000160
 8001a20:	08007de0 	.word	0x08007de0
 8001a24:	20000328 	.word	0x20000328

08001a28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	   if (hadc->Instance == ADC1) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a32      	ldr	r2, [pc, #200]	@ (8001b00 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d15d      	bne.n	8001af6 <HAL_ADC_ConvCpltCallback+0xce>

		    buttonDebouncer();
 8001a3a:	f7ff fa15 	bl	8000e68 <buttonDebouncer>
		    ProcessFilters();
 8001a3e:	f7ff fa67 	bl	8000f10 <ProcessFilters>
		    reverb();
 8001a42:	f7ff fbd3 	bl	80011ec <reverb>
		    FilterToggle();
 8001a46:	f7ff fdd7 	bl	80015f8 <FilterToggle>
		    //LED used to check duty cycle and ADC utilization
		    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	482d      	ldr	r0, [pc, #180]	@ (8001b04 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001a50:	f002 f900 	bl	8003c54 <HAL_GPIO_WritePin>
	        // Get ADC result
	        adc_result = HAL_ADC_GetValue(hadc);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f001 fa45 	bl	8002ee4 <HAL_ADC_GetValue>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001b08 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001a5e:	6013      	str	r3, [r2, #0]
	        // Shift previous input and output samples

	        // Combined LED control and filter logic
	        // Biquad Low Pass Filter

	    	      x[2] = x[1];
 8001a60:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a29      	ldr	r2, [pc, #164]	@ (8001b0c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001a66:	6093      	str	r3, [r2, #8]
	    		  x[1] = x[0];
 8001a68:	4b28      	ldr	r3, [pc, #160]	@ (8001b0c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a27      	ldr	r2, [pc, #156]	@ (8001b0c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001a6e:	6053      	str	r3, [r2, #4]
	    		  x[0] = adc_result - 2048;
 8001a70:	4b25      	ldr	r3, [pc, #148]	@ (8001b08 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001a7c:	601a      	str	r2, [r3, #0]
	     	      // Mix the dry filtered signal with the reverb effect:
	     	      y[2] = y[1];
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4a23      	ldr	r2, [pc, #140]	@ (8001b10 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001a84:	6093      	str	r3, [r2, #8]
	     	      y[1] = y[0];
 8001a86:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a21      	ldr	r2, [pc, #132]	@ (8001b10 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001a8c:	6053      	str	r3, [r2, #4]
	     	      y[0] = z[0] * (1.0 - wet) + Aout_3 * wet;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <HAL_ADC_ConvCpltCallback+0xec>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aa4:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001aa8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001aac:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001abc:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ace:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ad2:	ee17 2a90 	vmov	r2, s15
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001ad8:	601a      	str	r2, [r3, #0]


	     	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2101      	movs	r1, #1
 8001ade:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001ae0:	f002 f8b8 	bl	8003c54 <HAL_GPIO_WritePin>

	     	//send the value to the dac
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (y[0] + 2048));
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	480b      	ldr	r0, [pc, #44]	@ (8001b20 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001af2:	f001 fe53 	bl	800379c <HAL_DAC_SetValue>



	    }
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40012000 	.word	0x40012000
 8001b04:	40020400 	.word	0x40020400
 8001b08:	20000438 	.word	0x20000438
 8001b0c:	200003bc 	.word	0x200003bc
 8001b10:	200003b0 	.word	0x200003b0
 8001b14:	200003ec 	.word	0x200003ec
 8001b18:	20000028 	.word	0x20000028
 8001b1c:	20000408 	.word	0x20000408
 8001b20:	2000014c 	.word	0x2000014c

08001b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b28:	f000 ff53 	bl	80029d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f84a 	bl	8001bc4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LPF();
 8001b30:	f7fe fd4e 	bl	80005d0 <LPF>
  HPF();
 8001b34:	f7ff f810 	bl	8000b58 <HPF>
  Notch();
 8001b38:	f7fe fe36 	bl	80007a8 <Notch>
  PEAK();
 8001b3c:	f7fe ff0c 	bl	8000958 <PEAK>
  Delay();
 8001b40:	f7ff f8f6 	bl	8000d30 <Delay>

 	   //delay();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b44:	f000 fb42 	bl	80021cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001b48:	f000 f8ac 	bl	8001ca4 <MX_ADC1_Init>
  MX_DAC_Init();
 8001b4c:	f000 f8fc 	bl	8001d48 <MX_DAC_Init>
  MX_TIM8_Init();
 8001b50:	f000 faba 	bl	80020c8 <MX_TIM8_Init>
  MX_TIM1_Init();
 8001b54:	f000 f922 	bl	8001d9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b58:	f000 f97c 	bl	8001e54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b5c:	f000 f9d0 	bl	8001f00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b60:	f000 fa24 	bl	8001fac <MX_TIM4_Init>
  MX_TIM6_Init();
 8001b64:	f000 fa78 	bl	8002058 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001b68:	f000 fb00 	bl	800216c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001b6c:	480f      	ldr	r0, [pc, #60]	@ (8001bac <main+0x88>)
 8001b6e:	f000 ffd1 	bl	8002b14 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 8001b72:	480f      	ldr	r0, [pc, #60]	@ (8001bb0 <main+0x8c>)
 8001b74:	f003 fa5c 	bl	8005030 <HAL_TIM_Base_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b78:	213c      	movs	r1, #60	@ 0x3c
 8001b7a:	480e      	ldr	r0, [pc, #56]	@ (8001bb4 <main+0x90>)
 8001b7c:	f003 fbe6 	bl	800534c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001b80:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <main+0x94>)
 8001b82:	f003 fac5 	bl	8005110 <HAL_TIM_Base_Start_IT>

  GPIOB->MODER &= ~(0x3 << (0 * 2)); // Clear mode for PB0
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <main+0x98>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <main+0x98>)
 8001b8c:	f023 0303 	bic.w	r3, r3, #3
 8001b90:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (0x1 << (0 * 2));  // Set PB0 to output mode (01)
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <main+0x98>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <main+0x98>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6013      	str	r3, [r2, #0]



  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4807      	ldr	r0, [pc, #28]	@ (8001bc0 <main+0x9c>)
 8001ba2:	f001 fd4e 	bl	8003642 <HAL_DAC_Start>
  //dac_voltage = dac_result /convert;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ba6:	bf00      	nop
 8001ba8:	e7fd      	b.n	8001ba6 <main+0x82>
 8001baa:	bf00      	nop
 8001bac:	20000104 	.word	0x20000104
 8001bb0:	200002dc 	.word	0x200002dc
 8001bb4:	20000160 	.word	0x20000160
 8001bb8:	20000290 	.word	0x20000290
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	2000014c 	.word	0x2000014c

08001bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b094      	sub	sp, #80	@ 0x50
 8001bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	2234      	movs	r2, #52	@ 0x34
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 fe60 	bl	8006898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001be8:	f002 f86e 	bl	8003cc8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bec:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <SystemClock_Config+0xd8>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c9c <SystemClock_Config+0xd8>)
 8001bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf8:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <SystemClock_Config+0xd8>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c04:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <SystemClock_Config+0xdc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a25      	ldr	r2, [pc, #148]	@ (8001ca0 <SystemClock_Config+0xdc>)
 8001c0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <SystemClock_Config+0xdc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c20:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001c24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c26:	2302      	movs	r3, #2
 8001c28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c30:	2304      	movs	r3, #4
 8001c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c34:	23d8      	movs	r3, #216	@ 0xd8
 8001c36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001c3c:	2309      	movs	r3, #9
 8001c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 f89d 	bl	8003d88 <HAL_RCC_OscConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c54:	f000 fbcc 	bl	80023f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c58:	f002 f846 	bl	8003ce8 <HAL_PWREx_EnableOverDrive>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c62:	f000 fbc5 	bl	80023f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c66:	230f      	movs	r3, #15
 8001c68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c72:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c7c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c7e:	f107 0308 	add.w	r3, r7, #8
 8001c82:	2107      	movs	r1, #7
 8001c84:	4618      	mov	r0, r3
 8001c86:	f002 fb2d 	bl	80042e4 <HAL_RCC_ClockConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001c90:	f000 fbae 	bl	80023f0 <Error_Handler>
  }
}
 8001c94:	bf00      	nop
 8001c96:	3750      	adds	r7, #80	@ 0x50
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000

08001ca4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001caa:	463b      	mov	r3, r7
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cb6:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001cb8:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <MX_ADC1_Init+0xa0>)
 8001cba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cbc:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001cbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001ce0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001ce6:	4b16      	ldr	r3, [pc, #88]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001ce8:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001cec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d08:	480d      	ldr	r0, [pc, #52]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001d0a:	f000 febf 	bl	8002a8c <HAL_ADC_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001d14:	f000 fb6c 	bl	80023f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d24:	463b      	mov	r3, r7
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_ADC1_Init+0x9c>)
 8001d2a:	f001 f8fd 	bl	8002f28 <HAL_ADC_ConfigChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001d34:	f000 fb5c 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000104 	.word	0x20000104
 8001d44:	40012000 	.word	0x40012000

08001d48 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <MX_DAC_Init+0x4c>)
 8001d58:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <MX_DAC_Init+0x50>)
 8001d5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001d5c:	480d      	ldr	r0, [pc, #52]	@ (8001d94 <MX_DAC_Init+0x4c>)
 8001d5e:	f001 fc4e 	bl	80035fe <HAL_DAC_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001d68:	f000 fb42 	bl	80023f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d74:	463b      	mov	r3, r7
 8001d76:	2200      	movs	r2, #0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4806      	ldr	r0, [pc, #24]	@ (8001d94 <MX_DAC_Init+0x4c>)
 8001d7c:	f001 fd42 	bl	8003804 <HAL_DAC_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001d86:	f000 fb33 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000014c 	.word	0x2000014c
 8001d98:	40007400 	.word	0x40007400

08001d9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	@ 0x30
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	2224      	movs	r2, #36	@ 0x24
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 fd74 	bl	8006898 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	463b      	mov	r3, r7
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <MX_TIM1_Init+0xb0>)
 8001dbc:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <MX_TIM1_Init+0xb4>)
 8001dbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600 - 1;
 8001dc0:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <MX_TIM1_Init+0xb0>)
 8001dc2:	f245 425f 	movw	r2, #21599	@ 0x545f
 8001dc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <MX_TIM1_Init+0xb0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <MX_TIM1_Init+0xb0>)
 8001dd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <MX_TIM1_Init+0xb0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <MX_TIM1_Init+0xb0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <MX_TIM1_Init+0xb0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001df0:	2301      	movs	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e00:	2301      	movs	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	4619      	mov	r1, r3
 8001e12:	480e      	ldr	r0, [pc, #56]	@ (8001e4c <MX_TIM1_Init+0xb0>)
 8001e14:	f003 f9f4 	bl	8005200 <HAL_TIM_Encoder_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8001e1e:	f000 fae7 	bl	80023f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e2e:	463b      	mov	r3, r7
 8001e30:	4619      	mov	r1, r3
 8001e32:	4806      	ldr	r0, [pc, #24]	@ (8001e4c <MX_TIM1_Init+0xb0>)
 8001e34:	f003 fe7e 	bl	8005b34 <HAL_TIMEx_MasterConfigSynchronization>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e3e:	f000 fad7 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	3730      	adds	r7, #48	@ 0x30
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000160 	.word	0x20000160
 8001e50:	40010000 	.word	0x40010000

08001e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	@ 0x30
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 fd18 	bl	8006898 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e72:	4b22      	ldr	r3, [pc, #136]	@ (8001efc <MX_TIM2_Init+0xa8>)
 8001e74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <MX_TIM2_Init+0xa8>)
 8001e7c:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8001e80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e82:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <MX_TIM2_Init+0xa8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001e88:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <MX_TIM2_Init+0xa8>)
 8001e8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <MX_TIM2_Init+0xa8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <MX_TIM2_Init+0xa8>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480d      	ldr	r0, [pc, #52]	@ (8001efc <MX_TIM2_Init+0xa8>)
 8001ec8:	f003 f99a 	bl	8005200 <HAL_TIM_Encoder_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001ed2:	f000 fa8d 	bl	80023f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ede:	463b      	mov	r3, r7
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4806      	ldr	r0, [pc, #24]	@ (8001efc <MX_TIM2_Init+0xa8>)
 8001ee4:	f003 fe26 	bl	8005b34 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001eee:	f000 fa7f 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	3730      	adds	r7, #48	@ 0x30
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200001ac 	.word	0x200001ac

08001f00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	@ 0x30
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	2224      	movs	r2, #36	@ 0x24
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fcc2 	bl	8006898 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	463b      	mov	r3, r7
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f20:	4a21      	ldr	r2, [pc, #132]	@ (8001fa8 <MX_TIM3_Init+0xa8>)
 8001f22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800 - 1;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f26:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8001f2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f40:	4b18      	ldr	r3, [pc, #96]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f72:	f003 f945 	bl	8005200 <HAL_TIM_Encoder_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001f7c:	f000 fa38 	bl	80023f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	@ (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f8e:	f003 fdd1 	bl	8005b34 <HAL_TIMEx_MasterConfigSynchronization>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001f98:	f000 fa2a 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	3730      	adds	r7, #48	@ 0x30
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200001f8 	.word	0x200001f8
 8001fa8:	40000400 	.word	0x40000400

08001fac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08c      	sub	sp, #48	@ 0x30
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	2224      	movs	r2, #36	@ 0x24
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 fc6c 	bl	8006898 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fca:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <MX_TIM4_Init+0xa4>)
 8001fcc:	4a21      	ldr	r2, [pc, #132]	@ (8002054 <MX_TIM4_Init+0xa8>)
 8001fce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002050 <MX_TIM4_Init+0xa4>)
 8001fd2:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8001fd6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002050 <MX_TIM4_Init+0xa4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <MX_TIM4_Init+0xa4>)
 8001fe0:	2209      	movs	r2, #9
 8001fe2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8002050 <MX_TIM4_Init+0xa4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fea:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <MX_TIM4_Init+0xa4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002008:	2301      	movs	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	4619      	mov	r1, r3
 800201a:	480d      	ldr	r0, [pc, #52]	@ (8002050 <MX_TIM4_Init+0xa4>)
 800201c:	f003 f8f0 	bl	8005200 <HAL_TIM_Encoder_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002026:	f000 f9e3 	bl	80023f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002032:	463b      	mov	r3, r7
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	@ (8002050 <MX_TIM4_Init+0xa4>)
 8002038:	f003 fd7c 	bl	8005b34 <HAL_TIMEx_MasterConfigSynchronization>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002042:	f000 f9d5 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	3730      	adds	r7, #48	@ 0x30
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000244 	.word	0x20000244
 8002054:	40000800 	.word	0x40000800

08002058 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002068:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <MX_TIM6_Init+0x68>)
 800206a:	4a16      	ldr	r2, [pc, #88]	@ (80020c4 <MX_TIM6_Init+0x6c>)
 800206c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800 - 1;
 800206e:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <MX_TIM6_Init+0x68>)
 8002070:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8002074:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <MX_TIM6_Init+0x68>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800207c:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <MX_TIM6_Init+0x68>)
 800207e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002082:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002084:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <MX_TIM6_Init+0x68>)
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800208a:	480d      	ldr	r0, [pc, #52]	@ (80020c0 <MX_TIM6_Init+0x68>)
 800208c:	f002 ff78 	bl	8004f80 <HAL_TIM_Base_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002096:	f000 f9ab 	bl	80023f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4806      	ldr	r0, [pc, #24]	@ (80020c0 <MX_TIM6_Init+0x68>)
 80020a8:	f003 fd44 	bl	8005b34 <HAL_TIMEx_MasterConfigSynchronization>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80020b2:	f000 f99d 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000290 	.word	0x20000290
 80020c4:	40001000 	.word	0x40001000

080020c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ce:	f107 0310 	add.w	r3, r7, #16
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <MX_TIM8_Init+0x9c>)
 80020e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <MX_TIM8_Init+0xa0>)
 80020ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 100-1;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <MX_TIM8_Init+0x9c>)
 80020ee:	2263      	movs	r2, #99	@ 0x63
 80020f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002164 <MX_TIM8_Init+0x9c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 45-1;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <MX_TIM8_Init+0x9c>)
 80020fa:	222c      	movs	r2, #44	@ 0x2c
 80020fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <MX_TIM8_Init+0x9c>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002104:	4b17      	ldr	r3, [pc, #92]	@ (8002164 <MX_TIM8_Init+0x9c>)
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <MX_TIM8_Init+0x9c>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002110:	4814      	ldr	r0, [pc, #80]	@ (8002164 <MX_TIM8_Init+0x9c>)
 8002112:	f002 ff35 	bl	8004f80 <HAL_TIM_Base_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800211c:	f000 f968 	bl	80023f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002124:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002126:	f107 0310 	add.w	r3, r7, #16
 800212a:	4619      	mov	r1, r3
 800212c:	480d      	ldr	r0, [pc, #52]	@ (8002164 <MX_TIM8_Init+0x9c>)
 800212e:	f003 faa3 	bl	8005678 <HAL_TIM_ConfigClockSource>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002138:	f000 f95a 	bl	80023f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800213c:	2320      	movs	r3, #32
 800213e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	@ (8002164 <MX_TIM8_Init+0x9c>)
 800214e:	f003 fcf1 	bl	8005b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002158:	f000 f94a 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200002dc 	.word	0x200002dc
 8002168:	40010400 	.word	0x40010400

0800216c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002170:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 8002172:	4a15      	ldr	r2, [pc, #84]	@ (80021c8 <MX_USART3_UART_Init+0x5c>)
 8002174:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002176:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800218a:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021ae:	4805      	ldr	r0, [pc, #20]	@ (80021c4 <MX_USART3_UART_Init+0x58>)
 80021b0:	f003 fd6c 	bl	8005c8c <HAL_UART_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80021ba:	f000 f919 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000328 	.word	0x20000328
 80021c8:	40004800 	.word	0x40004800

080021cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08e      	sub	sp, #56	@ 0x38
 80021d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b7c      	ldr	r3, [pc, #496]	@ (80023d4 <MX_GPIO_Init+0x208>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	4a7b      	ldr	r2, [pc, #492]	@ (80023d4 <MX_GPIO_Init+0x208>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ee:	4b79      	ldr	r3, [pc, #484]	@ (80023d4 <MX_GPIO_Init+0x208>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	623b      	str	r3, [r7, #32]
 80021f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021fa:	4b76      	ldr	r3, [pc, #472]	@ (80023d4 <MX_GPIO_Init+0x208>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a75      	ldr	r2, [pc, #468]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002200:	f043 0320 	orr.w	r3, r3, #32
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b73      	ldr	r3, [pc, #460]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	61fb      	str	r3, [r7, #28]
 8002210:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002212:	4b70      	ldr	r3, [pc, #448]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	4a6f      	ldr	r2, [pc, #444]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800221c:	6313      	str	r3, [r2, #48]	@ 0x30
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	4b6a      	ldr	r3, [pc, #424]	@ (80023d4 <MX_GPIO_Init+0x208>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a69      	ldr	r2, [pc, #420]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b67      	ldr	r3, [pc, #412]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	4b64      	ldr	r3, [pc, #400]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a63      	ldr	r2, [pc, #396]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b61      	ldr	r3, [pc, #388]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800225a:	4b5e      	ldr	r3, [pc, #376]	@ (80023d4 <MX_GPIO_Init+0x208>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a5d      	ldr	r2, [pc, #372]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b5b      	ldr	r3, [pc, #364]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002272:	4b58      	ldr	r3, [pc, #352]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4a57      	ldr	r2, [pc, #348]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002278:	f043 0310 	orr.w	r3, r3, #16
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4b55      	ldr	r3, [pc, #340]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800228a:	4b52      	ldr	r3, [pc, #328]	@ (80023d4 <MX_GPIO_Init+0x208>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4a51      	ldr	r2, [pc, #324]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	6313      	str	r3, [r2, #48]	@ 0x30
 8002296:	4b4f      	ldr	r3, [pc, #316]	@ (80023d4 <MX_GPIO_Init+0x208>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2101      	movs	r1, #1
 80022a6:	484c      	ldr	r0, [pc, #304]	@ (80023d8 <MX_GPIO_Init+0x20c>)
 80022a8:	f001 fcd4 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2120      	movs	r1, #32
 80022b0:	484a      	ldr	r0, [pc, #296]	@ (80023dc <MX_GPIO_Init+0x210>)
 80022b2:	f001 fccf 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80022bc:	4848      	ldr	r0, [pc, #288]	@ (80023e0 <MX_GPIO_Init+0x214>)
 80022be:	f001 fcc9 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD4_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2141      	movs	r1, #65	@ 0x41
 80022c6:	4847      	ldr	r0, [pc, #284]	@ (80023e4 <MX_GPIO_Init+0x218>)
 80022c8:	f001 fcc4 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022de:	4619      	mov	r1, r3
 80022e0:	4841      	ldr	r0, [pc, #260]	@ (80023e8 <MX_GPIO_Init+0x21c>)
 80022e2:	f001 faf3 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD5_Pin */
  GPIO_InitStruct.Pin = LD5_Pin;
 80022e6:	2301      	movs	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ea:	2301      	movs	r3, #1
 80022ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 80022f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022fa:	4619      	mov	r1, r3
 80022fc:	4836      	ldr	r0, [pc, #216]	@ (80023d8 <MX_GPIO_Init+0x20c>)
 80022fe:	f001 fae5 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002302:	2320      	movs	r3, #32
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002306:	2301      	movs	r3, #1
 8002308:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	4830      	ldr	r0, [pc, #192]	@ (80023dc <MX_GPIO_Init+0x210>)
 800231a:	f001 fad7 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800231e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	2301      	movs	r3, #1
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002334:	4619      	mov	r1, r3
 8002336:	482a      	ldr	r0, [pc, #168]	@ (80023e0 <MX_GPIO_Init+0x214>)
 8002338:	f001 fac8 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|USB_PowerSwitchOn_Pin;
 800233c:	2341      	movs	r3, #65	@ 0x41
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	2301      	movs	r3, #1
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800234c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002350:	4619      	mov	r1, r3
 8002352:	4824      	ldr	r0, [pc, #144]	@ (80023e4 <MX_GPIO_Init+0x218>)
 8002354:	f001 faba 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002358:	2380      	movs	r3, #128	@ 0x80
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002368:	4619      	mov	r1, r3
 800236a:	481e      	ldr	r0, [pc, #120]	@ (80023e4 <MX_GPIO_Init+0x218>)
 800236c:	f001 faae 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8002370:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002382:	230a      	movs	r3, #10
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800238a:	4619      	mov	r1, r3
 800238c:	4813      	ldr	r0, [pc, #76]	@ (80023dc <MX_GPIO_Init+0x210>)
 800238e:	f001 fa9d 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002392:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023a4:	4619      	mov	r1, r3
 80023a6:	480d      	ldr	r0, [pc, #52]	@ (80023dc <MX_GPIO_Init+0x210>)
 80023a8:	f001 fa90 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023ac:	2303      	movs	r3, #3
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023bc:	4619      	mov	r1, r3
 80023be:	480b      	ldr	r0, [pc, #44]	@ (80023ec <MX_GPIO_Init+0x220>)
 80023c0:	f001 fa84 	bl	80038cc <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMC_I2C_PB7_FMP);
 80023c4:	2020      	movs	r0, #32
 80023c6:	f001 fc5f 	bl	8003c88 <HAL_I2CEx_EnableFastModePlus>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023ca:	bf00      	nop
 80023cc:	3738      	adds	r7, #56	@ 0x38
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40021400 	.word	0x40021400
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40021800 	.word	0x40021800
 80023e8:	40020800 	.word	0x40020800
 80023ec:	40020c00 	.word	0x40020c00

080023f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f4:	b672      	cpsid	i
}
 80023f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <Error_Handler+0x8>

080023fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b12      	ldr	r3, [pc, #72]	@ (800244c <HAL_MspInit+0x50>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	4a11      	ldr	r2, [pc, #68]	@ (800244c <HAL_MspInit+0x50>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	@ 0x40
 800240e:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_MspInit+0x50>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <HAL_MspInit+0x50>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	4a0b      	ldr	r2, [pc, #44]	@ (800244c <HAL_MspInit+0x50>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002424:	6453      	str	r3, [r2, #68]	@ 0x44
 8002426:	4b09      	ldr	r3, [pc, #36]	@ (800244c <HAL_MspInit+0x50>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	2005      	movs	r0, #5
 8002438:	f001 f8ab 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800243c:	2005      	movs	r0, #5
 800243e:	f001 f8c4 	bl	80035ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	@ 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a19      	ldr	r2, [pc, #100]	@ (80024d4 <HAL_ADC_MspInit+0x84>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12b      	bne.n	80024ca <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002472:	4b19      	ldr	r3, [pc, #100]	@ (80024d8 <HAL_ADC_MspInit+0x88>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	4a18      	ldr	r2, [pc, #96]	@ (80024d8 <HAL_ADC_MspInit+0x88>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800247c:	6453      	str	r3, [r2, #68]	@ 0x44
 800247e:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <HAL_ADC_MspInit+0x88>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248a:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <HAL_ADC_MspInit+0x88>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <HAL_ADC_MspInit+0x88>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6313      	str	r3, [r2, #48]	@ 0x30
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <HAL_ADC_MspInit+0x88>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024a2:	2301      	movs	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a6:	2303      	movs	r3, #3
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4809      	ldr	r0, [pc, #36]	@ (80024dc <HAL_ADC_MspInit+0x8c>)
 80024b6:	f001 fa09 	bl	80038cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2012      	movs	r0, #18
 80024c0:	f001 f867 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80024c4:	2012      	movs	r0, #18
 80024c6:	f001 f880 	bl	80035ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024ca:	bf00      	nop
 80024cc:	3728      	adds	r7, #40	@ 0x28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40012000 	.word	0x40012000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020000 	.word	0x40020000

080024e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a19      	ldr	r2, [pc, #100]	@ (8002564 <HAL_DAC_MspInit+0x84>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d12b      	bne.n	800255a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002502:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <HAL_DAC_MspInit+0x88>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	4a18      	ldr	r2, [pc, #96]	@ (8002568 <HAL_DAC_MspInit+0x88>)
 8002508:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800250c:	6413      	str	r3, [r2, #64]	@ 0x40
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <HAL_DAC_MspInit+0x88>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <HAL_DAC_MspInit+0x88>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <HAL_DAC_MspInit+0x88>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_DAC_MspInit+0x88>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002532:	2310      	movs	r3, #16
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002536:	2303      	movs	r3, #3
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	4619      	mov	r1, r3
 8002544:	4809      	ldr	r0, [pc, #36]	@ (800256c <HAL_DAC_MspInit+0x8c>)
 8002546:	f001 f9c1 	bl	80038cc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	2036      	movs	r0, #54	@ 0x36
 8002550:	f001 f81f 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002554:	2036      	movs	r0, #54	@ 0x36
 8002556:	f001 f838 	bl	80035ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 800255a:	bf00      	nop
 800255c:	3728      	adds	r7, #40	@ 0x28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40007400 	.word	0x40007400
 8002568:	40023800 	.word	0x40023800
 800256c:	40020000 	.word	0x40020000

08002570 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b090      	sub	sp, #64	@ 0x40
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a5d      	ldr	r2, [pc, #372]	@ (8002704 <HAL_TIM_Encoder_MspInit+0x194>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d129      	bne.n	80025e6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002592:	4b5d      	ldr	r3, [pc, #372]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	4a5c      	ldr	r2, [pc, #368]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6453      	str	r3, [r2, #68]	@ 0x44
 800259e:	4b5a      	ldr	r3, [pc, #360]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025aa:	4b57      	ldr	r3, [pc, #348]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a56      	ldr	r2, [pc, #344]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80025b0:	f043 0310 	orr.w	r3, r3, #16
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b54      	ldr	r3, [pc, #336]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80025c2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80025c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025dc:	4619      	mov	r1, r3
 80025de:	484b      	ldr	r0, [pc, #300]	@ (800270c <HAL_TIM_Encoder_MspInit+0x19c>)
 80025e0:	f001 f974 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025e4:	e08a      	b.n	80026fc <HAL_TIM_Encoder_MspInit+0x18c>
  else if(htim_encoder->Instance==TIM2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ee:	d129      	bne.n	8002644 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025f0:	4b45      	ldr	r3, [pc, #276]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	4a44      	ldr	r2, [pc, #272]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80025fc:	4b42      	ldr	r3, [pc, #264]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002608:	4b3f      	ldr	r3, [pc, #252]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	4a3e      	ldr	r2, [pc, #248]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6313      	str	r3, [r2, #48]	@ 0x30
 8002614:	4b3c      	ldr	r3, [pc, #240]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002620:	f248 0302 	movw	r3, #32770	@ 0x8002
 8002624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002632:	2301      	movs	r3, #1
 8002634:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800263a:	4619      	mov	r1, r3
 800263c:	4834      	ldr	r0, [pc, #208]	@ (8002710 <HAL_TIM_Encoder_MspInit+0x1a0>)
 800263e:	f001 f945 	bl	80038cc <HAL_GPIO_Init>
}
 8002642:	e05b      	b.n	80026fc <HAL_TIM_Encoder_MspInit+0x18c>
  else if(htim_encoder->Instance==TIM3)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a32      	ldr	r2, [pc, #200]	@ (8002714 <HAL_TIM_Encoder_MspInit+0x1a4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d128      	bne.n	80026a0 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800264e:	4b2e      	ldr	r3, [pc, #184]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	4a2d      	ldr	r2, [pc, #180]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	6413      	str	r3, [r2, #64]	@ 0x40
 800265a:	4b2b      	ldr	r3, [pc, #172]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a27      	ldr	r2, [pc, #156]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b25      	ldr	r3, [pc, #148]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800267e:	23c0      	movs	r3, #192	@ 0xc0
 8002680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800268e:	2302      	movs	r3, #2
 8002690:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002696:	4619      	mov	r1, r3
 8002698:	481d      	ldr	r0, [pc, #116]	@ (8002710 <HAL_TIM_Encoder_MspInit+0x1a0>)
 800269a:	f001 f917 	bl	80038cc <HAL_GPIO_Init>
}
 800269e:	e02d      	b.n	80026fc <HAL_TIM_Encoder_MspInit+0x18c>
  else if(htim_encoder->Instance==TIM4)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002718 <HAL_TIM_Encoder_MspInit+0x1a8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d128      	bne.n	80026fc <HAL_TIM_Encoder_MspInit+0x18c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026aa:	4b17      	ldr	r3, [pc, #92]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	4a16      	ldr	r2, [pc, #88]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b6:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c2:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	4a10      	ldr	r2, [pc, #64]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <HAL_TIM_Encoder_MspInit+0x198>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80026da:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80026de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	2300      	movs	r3, #0
 80026ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026ec:	2302      	movs	r3, #2
 80026ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026f4:	4619      	mov	r1, r3
 80026f6:	4809      	ldr	r0, [pc, #36]	@ (800271c <HAL_TIM_Encoder_MspInit+0x1ac>)
 80026f8:	f001 f8e8 	bl	80038cc <HAL_GPIO_Init>
}
 80026fc:	bf00      	nop
 80026fe:	3740      	adds	r7, #64	@ 0x40
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40010000 	.word	0x40010000
 8002708:	40023800 	.word	0x40023800
 800270c:	40021000 	.word	0x40021000
 8002710:	40020000 	.word	0x40020000
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800
 800271c:	40020c00 	.word	0x40020c00

08002720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a16      	ldr	r2, [pc, #88]	@ (8002788 <HAL_TIM_Base_MspInit+0x68>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d114      	bne.n	800275c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002732:	4b16      	ldr	r3, [pc, #88]	@ (800278c <HAL_TIM_Base_MspInit+0x6c>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	4a15      	ldr	r2, [pc, #84]	@ (800278c <HAL_TIM_Base_MspInit+0x6c>)
 8002738:	f043 0310 	orr.w	r3, r3, #16
 800273c:	6413      	str	r3, [r2, #64]	@ 0x40
 800273e:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_TIM_Base_MspInit+0x6c>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	2036      	movs	r0, #54	@ 0x36
 8002750:	f000 ff1f 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002754:	2036      	movs	r0, #54	@ 0x36
 8002756:	f000 ff38 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800275a:	e010      	b.n	800277e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM8)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0b      	ldr	r2, [pc, #44]	@ (8002790 <HAL_TIM_Base_MspInit+0x70>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10b      	bne.n	800277e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_TIM_Base_MspInit+0x6c>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	4a08      	ldr	r2, [pc, #32]	@ (800278c <HAL_TIM_Base_MspInit+0x6c>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6453      	str	r3, [r2, #68]	@ 0x44
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_TIM_Base_MspInit+0x6c>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40001000 	.word	0x40001000
 800278c:	40023800 	.word	0x40023800
 8002790:	40010400 	.word	0x40010400

08002794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0ae      	sub	sp, #184	@ 0xb8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2290      	movs	r2, #144	@ 0x90
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f004 f86f 	bl	8006898 <memset>
  if(huart->Instance==USART3)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <HAL_UART_MspInit+0xb4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d13c      	bne.n	800283e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 ffac 	bl	8004730 <HAL_RCCEx_PeriphCLKConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027de:	f7ff fe07 	bl	80023f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027e2:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <HAL_UART_MspInit+0xb8>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a19      	ldr	r2, [pc, #100]	@ (800284c <HAL_UART_MspInit+0xb8>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b17      	ldr	r3, [pc, #92]	@ (800284c <HAL_UART_MspInit+0xb8>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027fa:	4b14      	ldr	r3, [pc, #80]	@ (800284c <HAL_UART_MspInit+0xb8>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	4a13      	ldr	r2, [pc, #76]	@ (800284c <HAL_UART_MspInit+0xb8>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6313      	str	r3, [r2, #48]	@ 0x30
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_UART_MspInit+0xb8>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002812:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800282c:	2307      	movs	r3, #7
 800282e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002832:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002836:	4619      	mov	r1, r3
 8002838:	4805      	ldr	r0, [pc, #20]	@ (8002850 <HAL_UART_MspInit+0xbc>)
 800283a:	f001 f847 	bl	80038cc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800283e:	bf00      	nop
 8002840:	37b8      	adds	r7, #184	@ 0xb8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40004800 	.word	0x40004800
 800284c:	40023800 	.word	0x40023800
 8002850:	40020c00 	.word	0x40020c00

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <NMI_Handler+0x4>

0800285c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <HardFault_Handler+0x4>

08002864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <MemManage_Handler+0x4>

0800286c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <BusFault_Handler+0x4>

08002874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <UsageFault_Handler+0x4>

0800287c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028aa:	f000 f8cf 	bl	8002a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028c4:	4802      	ldr	r0, [pc, #8]	@ (80028d0 <ADC_IRQHandler+0x10>)
 80028c6:	f000 f9fd 	bl	8002cc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000104 	.word	0x20000104

080028d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80028d8:	4803      	ldr	r0, [pc, #12]	@ (80028e8 <TIM6_DAC_IRQHandler+0x14>)
 80028da:	f000 ff09 	bl	80036f0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80028de:	4803      	ldr	r0, [pc, #12]	@ (80028ec <TIM6_DAC_IRQHandler+0x18>)
 80028e0:	f002 fdc2 	bl	8005468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	2000014c 	.word	0x2000014c
 80028ec:	20000290 	.word	0x20000290

080028f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f8:	4a14      	ldr	r2, [pc, #80]	@ (800294c <_sbrk+0x5c>)
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <_sbrk+0x60>)
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002904:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <_sbrk+0x64>)
 800290e:	4a12      	ldr	r2, [pc, #72]	@ (8002958 <_sbrk+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002912:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002920:	f003 ffc2 	bl	80068a8 <__errno>
 8002924:	4603      	mov	r3, r0
 8002926:	220c      	movs	r2, #12
 8002928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	e009      	b.n	8002944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002936:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	4a05      	ldr	r2, [pc, #20]	@ (8002954 <_sbrk+0x64>)
 8002940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20080000 	.word	0x20080000
 8002950:	00000400 	.word	0x00000400
 8002954:	2000732c 	.word	0x2000732c
 8002958:	20007480 	.word	0x20007480

0800295c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <SystemInit+0x20>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002966:	4a05      	ldr	r2, [pc, #20]	@ (800297c <SystemInit+0x20>)
 8002968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800296c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002984:	f7ff ffea 	bl	800295c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002988:	480c      	ldr	r0, [pc, #48]	@ (80029bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800298a:	490d      	ldr	r1, [pc, #52]	@ (80029c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800298c:	4a0d      	ldr	r2, [pc, #52]	@ (80029c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002990:	e002      	b.n	8002998 <LoopCopyDataInit>

08002992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002996:	3304      	adds	r3, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800299c:	d3f9      	bcc.n	8002992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029a0:	4c0a      	ldr	r4, [pc, #40]	@ (80029cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a4:	e001      	b.n	80029aa <LoopFillZerobss>

080029a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a8:	3204      	adds	r2, #4

080029aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ac:	d3fb      	bcc.n	80029a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80029ae:	f003 ff81 	bl	80068b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029b2:	f7ff f8b7 	bl	8001b24 <main>
  bx  lr    
 80029b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80029bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c0:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 80029c4:	08008018 	.word	0x08008018
  ldr r2, =_sbss
 80029c8:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 80029cc:	2000747c 	.word	0x2000747c

080029d0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d0:	e7fe      	b.n	80029d0 <CAN1_RX0_IRQHandler>

080029d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d6:	2003      	movs	r0, #3
 80029d8:	f000 fdd0 	bl	800357c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029dc:	2000      	movs	r0, #0
 80029de:	f000 f805 	bl	80029ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e2:	f7ff fd0b 	bl	80023fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f4:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <HAL_InitTick+0x54>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <HAL_InitTick+0x58>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	4619      	mov	r1, r3
 80029fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fdeb 	bl	80035e6 <HAL_SYSTICK_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00e      	b.n	8002a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b0f      	cmp	r3, #15
 8002a1e:	d80a      	bhi.n	8002a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a20:	2200      	movs	r2, #0
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	f000 fdb3 	bl	8003592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a2c:	4a06      	ldr	r2, [pc, #24]	@ (8002a48 <HAL_InitTick+0x5c>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	2000008c 	.word	0x2000008c
 8002a44:	20000094 	.word	0x20000094
 8002a48:	20000090 	.word	0x20000090

08002a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_IncTick+0x20>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_IncTick+0x24>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <HAL_IncTick+0x24>)
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000094 	.word	0x20000094
 8002a70:	20007330 	.word	0x20007330

08002a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return uwTick;
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <HAL_GetTick+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20007330 	.word	0x20007330

08002a8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e031      	b.n	8002b06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fcd0 	bl	8002450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ace:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <HAL_ADC_Init+0x84>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	f043 0202 	orr.w	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fb7a 	bl	80031d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002af6:	e001      	b.n	8002afc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	ffffeefd 	.word	0xffffeefd

08002b14 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_Start_IT+0x1a>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e0b5      	b.n	8002c9a <HAL_ADC_Start_IT+0x186>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d018      	beq.n	8002b76 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b54:	4b54      	ldr	r3, [pc, #336]	@ (8002ca8 <HAL_ADC_Start_IT+0x194>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a54      	ldr	r2, [pc, #336]	@ (8002cac <HAL_ADC_Start_IT+0x198>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0c9a      	lsrs	r2, r3, #18
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b68:	e002      	b.n	8002b70 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f9      	bne.n	8002b6a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d17d      	bne.n	8002c80 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b88:	4b49      	ldr	r3, [pc, #292]	@ (8002cb0 <HAL_ADC_Start_IT+0x19c>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002baa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bbe:	d106      	bne.n	8002bce <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc4:	f023 0206 	bic.w	r2, r3, #6
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bcc:	e002      	b.n	8002bd4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002be4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <HAL_ADC_Start_IT+0x1a0>)
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002bf6:	4b30      	ldr	r3, [pc, #192]	@ (8002cb8 <HAL_ADC_Start_IT+0x1a4>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d143      	bne.n	8002c98 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	e03a      	b.n	8002c98 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a25      	ldr	r2, [pc, #148]	@ (8002cbc <HAL_ADC_Start_IT+0x1a8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10e      	bne.n	8002c4a <HAL_ADC_Start_IT+0x136>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d107      	bne.n	8002c4a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c48:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_ADC_Start_IT+0x1a4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d120      	bne.n	8002c98 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a19      	ldr	r2, [pc, #100]	@ (8002cc0 <HAL_ADC_Start_IT+0x1ac>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d11b      	bne.n	8002c98 <HAL_ADC_Start_IT+0x184>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d114      	bne.n	8002c98 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	e00b      	b.n	8002c98 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	f043 0210 	orr.w	r2, r3, #16
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c90:	f043 0201 	orr.w	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	2000008c 	.word	0x2000008c
 8002cac:	431bde83 	.word	0x431bde83
 8002cb0:	fffff8fe 	.word	0xfffff8fe
 8002cb4:	04000020 	.word	0x04000020
 8002cb8:	40012300 	.word	0x40012300
 8002cbc:	40012000 	.word	0x40012000
 8002cc0:	40012200 	.word	0x40012200

08002cc4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d049      	beq.n	8002d8e <HAL_ADC_IRQHandler+0xca>
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d046      	beq.n	8002d8e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d12b      	bne.n	8002d7e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d127      	bne.n	8002d7e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d119      	bne.n	8002d7e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0220 	bic.w	r2, r2, #32
 8002d58:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	f043 0201 	orr.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe fe52 	bl	8001a28 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0212 	mvn.w	r2, #18
 8002d8c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d057      	beq.n	8002e54 <HAL_ADC_IRQHandler+0x190>
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d054      	beq.n	8002e54 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d139      	bne.n	8002e44 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d12b      	bne.n	8002e44 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d124      	bne.n	8002e44 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d11d      	bne.n	8002e44 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d119      	bne.n	8002e44 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fabf 	bl	80033c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f06f 020c 	mvn.w	r2, #12
 8002e52:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e62:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d017      	beq.n	8002e9a <HAL_ADC_IRQHandler+0x1d6>
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d014      	beq.n	8002e9a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d10d      	bne.n	8002e9a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f837 	bl	8002efe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0201 	mvn.w	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ea8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <HAL_ADC_IRQHandler+0x218>
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d012      	beq.n	8002edc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f06f 0220 	mvn.w	r2, #32
 8002eca:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f820 	bl	8002f12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f06f 0220 	mvn.w	r2, #32
 8002eda:	601a      	str	r2, [r3, #0]
  }
}
 8002edc:	bf00      	nop
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x1c>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e136      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x28a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	d93a      	bls.n	8002fca <HAL_ADC_ConfigChannel+0xa2>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f5c:	d035      	beq.n	8002fca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68d9      	ldr	r1, [r3, #12]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	3b1e      	subs	r3, #30
 8002f74:	2207      	movs	r2, #7
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	400a      	ands	r2, r1
 8002f82:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a8d      	ldr	r2, [pc, #564]	@ (80031c0 <HAL_ADC_ConfigChannel+0x298>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68d9      	ldr	r1, [r3, #12]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	061a      	lsls	r2, r3, #24
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa2:	e035      	b.n	8003010 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68d9      	ldr	r1, [r3, #12]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4403      	add	r3, r0
 8002fbc:	3b1e      	subs	r3, #30
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fc8:	e022      	b.n	8003010 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6919      	ldr	r1, [r3, #16]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	2207      	movs	r2, #7
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	400a      	ands	r2, r1
 8002fec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6919      	ldr	r1, [r3, #16]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	4603      	mov	r3, r0
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4403      	add	r3, r0
 8003006:	409a      	lsls	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b06      	cmp	r3, #6
 8003016:	d824      	bhi.n	8003062 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	3b05      	subs	r3, #5
 800302a:	221f      	movs	r2, #31
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43da      	mvns	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	400a      	ands	r2, r1
 8003038:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	b29b      	uxth	r3, r3
 8003046:	4618      	mov	r0, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	3b05      	subs	r3, #5
 8003054:	fa00 f203 	lsl.w	r2, r0, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003060:	e04c      	b.n	80030fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d824      	bhi.n	80030b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	3b23      	subs	r3, #35	@ 0x23
 800307c:	221f      	movs	r2, #31
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	400a      	ands	r2, r1
 800308a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	4618      	mov	r0, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	3b23      	subs	r3, #35	@ 0x23
 80030a6:	fa00 f203 	lsl.w	r2, r0, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80030b2:	e023      	b.n	80030fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	3b41      	subs	r3, #65	@ 0x41
 80030c6:	221f      	movs	r2, #31
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43da      	mvns	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	400a      	ands	r2, r1
 80030d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	3b41      	subs	r3, #65	@ 0x41
 80030f0:	fa00 f203 	lsl.w	r2, r0, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a30      	ldr	r2, [pc, #192]	@ (80031c4 <HAL_ADC_ConfigChannel+0x29c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d10a      	bne.n	800311c <HAL_ADC_ConfigChannel+0x1f4>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800310e:	d105      	bne.n	800311c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003110:	4b2d      	ldr	r3, [pc, #180]	@ (80031c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a2c      	ldr	r2, [pc, #176]	@ (80031c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003116:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800311a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a28      	ldr	r2, [pc, #160]	@ (80031c4 <HAL_ADC_ConfigChannel+0x29c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10f      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x21e>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b12      	cmp	r3, #18
 800312c:	d10b      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800312e:	4b26      	ldr	r3, [pc, #152]	@ (80031c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a25      	ldr	r2, [pc, #148]	@ (80031c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003134:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003138:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800313a:	4b23      	ldr	r3, [pc, #140]	@ (80031c8 <HAL_ADC_ConfigChannel+0x2a0>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a22      	ldr	r2, [pc, #136]	@ (80031c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003140:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003144:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1e      	ldr	r2, [pc, #120]	@ (80031c4 <HAL_ADC_ConfigChannel+0x29c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d12b      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x280>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1a      	ldr	r2, [pc, #104]	@ (80031c0 <HAL_ADC_ConfigChannel+0x298>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x23a>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b11      	cmp	r3, #17
 8003160:	d122      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003162:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a18      	ldr	r2, [pc, #96]	@ (80031c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003168:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800316c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800316e:	4b16      	ldr	r3, [pc, #88]	@ (80031c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003174:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003178:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a10      	ldr	r2, [pc, #64]	@ (80031c0 <HAL_ADC_ConfigChannel+0x298>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d111      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003184:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <HAL_ADC_ConfigChannel+0x2a4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a11      	ldr	r2, [pc, #68]	@ (80031d0 <HAL_ADC_ConfigChannel+0x2a8>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0c9a      	lsrs	r2, r3, #18
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800319a:	e002      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3b01      	subs	r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f9      	bne.n	800319c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	10000012 	.word	0x10000012
 80031c4:	40012000 	.word	0x40012000
 80031c8:	40012300 	.word	0x40012300
 80031cc:	2000008c 	.word	0x2000008c
 80031d0:	431bde83 	.word	0x431bde83

080031d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80031dc:	4b78      	ldr	r3, [pc, #480]	@ (80033c0 <ADC_Init+0x1ec>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a77      	ldr	r2, [pc, #476]	@ (80033c0 <ADC_Init+0x1ec>)
 80031e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80031e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80031e8:	4b75      	ldr	r3, [pc, #468]	@ (80033c0 <ADC_Init+0x1ec>)
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4973      	ldr	r1, [pc, #460]	@ (80033c0 <ADC_Init+0x1ec>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	021a      	lsls	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800324a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003262:	4a58      	ldr	r2, [pc, #352]	@ (80033c4 <ADC_Init+0x1f0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d022      	beq.n	80032ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6899      	ldr	r1, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	e00f      	b.n	80032ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0202 	bic.w	r2, r2, #2
 80032dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	005a      	lsls	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01b      	beq.n	8003334 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800330a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800331a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6859      	ldr	r1, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	3b01      	subs	r3, #1
 8003328:	035a      	lsls	r2, r3, #13
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	e007      	b.n	8003344 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003342:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003352:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	3b01      	subs	r3, #1
 8003360:	051a      	lsls	r2, r3, #20
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6899      	ldr	r1, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003386:	025a      	lsls	r2, r3, #9
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800339e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6899      	ldr	r1, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	029a      	lsls	r2, r3, #10
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012300 	.word	0x40012300
 80033c4:	0f000001 	.word	0x0f000001

080033c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <__NVIC_SetPriorityGrouping+0x40>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033f8:	4013      	ands	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003404:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 8003406:	4313      	orrs	r3, r2
 8003408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340a:	4a04      	ldr	r2, [pc, #16]	@ (800341c <__NVIC_SetPriorityGrouping+0x40>)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	60d3      	str	r3, [r2, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00
 8003420:	05fa0000 	.word	0x05fa0000

08003424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003428:	4b04      	ldr	r3, [pc, #16]	@ (800343c <__NVIC_GetPriorityGrouping+0x18>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	f003 0307 	and.w	r3, r3, #7
}
 8003432:	4618      	mov	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	db0b      	blt.n	800346a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4907      	ldr	r1, [pc, #28]	@ (8003478 <__NVIC_EnableIRQ+0x38>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2001      	movs	r0, #1
 8003462:	fa00 f202 	lsl.w	r2, r0, r2
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db0a      	blt.n	80034a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	490c      	ldr	r1, [pc, #48]	@ (80034c8 <__NVIC_SetPriority+0x4c>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	440b      	add	r3, r1
 80034a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a4:	e00a      	b.n	80034bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4908      	ldr	r1, [pc, #32]	@ (80034cc <__NVIC_SetPriority+0x50>)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	3b04      	subs	r3, #4
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	440b      	add	r3, r1
 80034ba:	761a      	strb	r2, [r3, #24]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000e100 	.word	0xe000e100
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	@ 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f1c3 0307 	rsb	r3, r3, #7
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf28      	it	cs
 80034ee:	2304      	movcs	r3, #4
 80034f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d902      	bls.n	8003500 <NVIC_EncodePriority+0x30>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3b03      	subs	r3, #3
 80034fe:	e000      	b.n	8003502 <NVIC_EncodePriority+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	f04f 32ff 	mov.w	r2, #4294967295
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003518:	f04f 31ff 	mov.w	r1, #4294967295
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43d9      	mvns	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	4313      	orrs	r3, r2
         );
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	@ 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003548:	d301      	bcc.n	800354e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800354a:	2301      	movs	r3, #1
 800354c:	e00f      	b.n	800356e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354e:	4a0a      	ldr	r2, [pc, #40]	@ (8003578 <SysTick_Config+0x40>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003556:	210f      	movs	r1, #15
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	f7ff ff8e 	bl	800347c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <SysTick_Config+0x40>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003566:	4b04      	ldr	r3, [pc, #16]	@ (8003578 <SysTick_Config+0x40>)
 8003568:	2207      	movs	r2, #7
 800356a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000e010 	.word	0xe000e010

0800357c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ff29 	bl	80033dc <__NVIC_SetPriorityGrouping>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035a4:	f7ff ff3e 	bl	8003424 <__NVIC_GetPriorityGrouping>
 80035a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	6978      	ldr	r0, [r7, #20]
 80035b0:	f7ff ff8e 	bl	80034d0 <NVIC_EncodePriority>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff5d 	bl	800347c <__NVIC_SetPriority>
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff31 	bl	8003440 <__NVIC_EnableIRQ>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ffa2 	bl	8003538 <SysTick_Config>
 80035f4:	4603      	mov	r3, r0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e014      	b.n	800363a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	791b      	ldrb	r3, [r3, #4]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fe ff5d 	bl	80024e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e046      	b.n	80036e4 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	795b      	ldrb	r3, [r3, #5]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_DAC_Start+0x20>
 800365e:	2302      	movs	r3, #2
 8003660:	e040      	b.n	80036e4 <HAL_DAC_Start+0xa2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2201      	movs	r2, #1
 800367c:	409a      	lsls	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10f      	bne.n	80036ac <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003696:	2b3c      	cmp	r3, #60	@ 0x3c
 8003698:	d11d      	bne.n	80036d6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	e014      	b.n	80036d6 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	213c      	movs	r1, #60	@ 0x3c
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d107      	bne.n	80036d6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0202 	orr.w	r2, r2, #2
 80036d4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01d      	beq.n	800374e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d018      	beq.n	800374e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2204      	movs	r2, #4
 8003720:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003736:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003746:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f851 	bl	80037f0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01d      	beq.n	8003794 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2204      	movs	r2, #4
 8003766:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f043 0202 	orr.w	r2, r3, #2
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800377c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800378c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f891 	bl	80038b6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e015      	b.n	80037e4 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	3308      	adds	r3, #8
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	e004      	b.n	80037da <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	3314      	adds	r3, #20
 80037d8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	461a      	mov	r2, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	@ 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_DAC_ConfigChannel+0x1c>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e042      	b.n	80038aa <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	795b      	ldrb	r3, [r3, #5]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_DAC_ConfigChannel+0x2c>
 800382c:	2302      	movs	r3, #2
 800382e:	e03c      	b.n	80038aa <HAL_DAC_ConfigChannel+0xa6>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2202      	movs	r2, #2
 800383a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	22c0      	movs	r2, #192	@ 0xc0
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43da      	mvns	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	400a      	ands	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80038a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	@ 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	@ 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	e175      	b.n	8003bd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038ec:	2201      	movs	r2, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4013      	ands	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	429a      	cmp	r2, r3
 8003906:	f040 8164 	bne.w	8003bd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d005      	beq.n	8003922 <HAL_GPIO_Init+0x56>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d130      	bne.n	8003984 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	2203      	movs	r2, #3
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003958:	2201      	movs	r2, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 0201 	and.w	r2, r3, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	2b03      	cmp	r3, #3
 800398e:	d017      	beq.n	80039c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d123      	bne.n	8003a14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	08da      	lsrs	r2, r3, #3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3208      	adds	r2, #8
 80039d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	220f      	movs	r2, #15
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	08da      	lsrs	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3208      	adds	r2, #8
 8003a0e:	69b9      	ldr	r1, [r7, #24]
 8003a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	2203      	movs	r2, #3
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0203 	and.w	r2, r3, #3
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80be 	beq.w	8003bd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a56:	4b66      	ldr	r3, [pc, #408]	@ (8003bf0 <HAL_GPIO_Init+0x324>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	4a65      	ldr	r2, [pc, #404]	@ (8003bf0 <HAL_GPIO_Init+0x324>)
 8003a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a62:	4b63      	ldr	r3, [pc, #396]	@ (8003bf0 <HAL_GPIO_Init+0x324>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a6e:	4a61      	ldr	r2, [pc, #388]	@ (8003bf4 <HAL_GPIO_Init+0x328>)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	3302      	adds	r3, #2
 8003a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	220f      	movs	r2, #15
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a58      	ldr	r2, [pc, #352]	@ (8003bf8 <HAL_GPIO_Init+0x32c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d037      	beq.n	8003b0a <HAL_GPIO_Init+0x23e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a57      	ldr	r2, [pc, #348]	@ (8003bfc <HAL_GPIO_Init+0x330>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d031      	beq.n	8003b06 <HAL_GPIO_Init+0x23a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a56      	ldr	r2, [pc, #344]	@ (8003c00 <HAL_GPIO_Init+0x334>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02b      	beq.n	8003b02 <HAL_GPIO_Init+0x236>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a55      	ldr	r2, [pc, #340]	@ (8003c04 <HAL_GPIO_Init+0x338>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d025      	beq.n	8003afe <HAL_GPIO_Init+0x232>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a54      	ldr	r2, [pc, #336]	@ (8003c08 <HAL_GPIO_Init+0x33c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01f      	beq.n	8003afa <HAL_GPIO_Init+0x22e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a53      	ldr	r2, [pc, #332]	@ (8003c0c <HAL_GPIO_Init+0x340>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d019      	beq.n	8003af6 <HAL_GPIO_Init+0x22a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	@ (8003c10 <HAL_GPIO_Init+0x344>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_GPIO_Init+0x226>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a51      	ldr	r2, [pc, #324]	@ (8003c14 <HAL_GPIO_Init+0x348>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00d      	beq.n	8003aee <HAL_GPIO_Init+0x222>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a50      	ldr	r2, [pc, #320]	@ (8003c18 <HAL_GPIO_Init+0x34c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <HAL_GPIO_Init+0x21e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4f      	ldr	r2, [pc, #316]	@ (8003c1c <HAL_GPIO_Init+0x350>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_GPIO_Init+0x21a>
 8003ae2:	2309      	movs	r3, #9
 8003ae4:	e012      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003ae6:	230a      	movs	r3, #10
 8003ae8:	e010      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003aea:	2308      	movs	r3, #8
 8003aec:	e00e      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003aee:	2307      	movs	r3, #7
 8003af0:	e00c      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003af2:	2306      	movs	r3, #6
 8003af4:	e00a      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003af6:	2305      	movs	r3, #5
 8003af8:	e008      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003afa:	2304      	movs	r3, #4
 8003afc:	e006      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003afe:	2303      	movs	r3, #3
 8003b00:	e004      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e002      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	f002 0203 	and.w	r2, r2, #3
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	4093      	lsls	r3, r2
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b1c:	4935      	ldr	r1, [pc, #212]	@ (8003bf4 <HAL_GPIO_Init+0x328>)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	3302      	adds	r3, #2
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c20 <HAL_GPIO_Init+0x354>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b4e:	4a34      	ldr	r2, [pc, #208]	@ (8003c20 <HAL_GPIO_Init+0x354>)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b54:	4b32      	ldr	r3, [pc, #200]	@ (8003c20 <HAL_GPIO_Init+0x354>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b78:	4a29      	ldr	r2, [pc, #164]	@ (8003c20 <HAL_GPIO_Init+0x354>)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b7e:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <HAL_GPIO_Init+0x354>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c20 <HAL_GPIO_Init+0x354>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <HAL_GPIO_Init+0x354>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bcc:	4a14      	ldr	r2, [pc, #80]	@ (8003c20 <HAL_GPIO_Init+0x354>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	f67f ae86 	bls.w	80038ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3724      	adds	r7, #36	@ 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40013800 	.word	0x40013800
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	40020400 	.word	0x40020400
 8003c00:	40020800 	.word	0x40020800
 8003c04:	40020c00 	.word	0x40020c00
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40021400 	.word	0x40021400
 8003c10:	40021800 	.word	0x40021800
 8003c14:	40021c00 	.word	0x40021c00
 8003c18:	40022000 	.word	0x40022000
 8003c1c:	40022400 	.word	0x40022400
 8003c20:	40013c00 	.word	0x40013c00

08003c24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	887b      	ldrh	r3, [r7, #2]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e001      	b.n	8003c46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	807b      	strh	r3, [r7, #2]
 8003c60:	4613      	mov	r3, r2
 8003c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c64:	787b      	ldrb	r3, [r7, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c6a:	887a      	ldrh	r2, [r7, #2]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c70:	e003      	b.n	8003c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c72:	887b      	ldrh	r3, [r7, #2]
 8003c74:	041a      	lsls	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	619a      	str	r2, [r3, #24]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c90:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c94:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c9c:	4b08      	ldr	r3, [pc, #32]	@ (8003cc0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8003ca8:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	4905      	ldr	r1, [pc, #20]	@ (8003cc4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40013800 	.word	0x40013800

08003cc8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a04      	ldr	r2, [pc, #16]	@ (8003ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd6:	6013      	str	r3, [r2, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40007000 	.word	0x40007000

08003ce8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	4b23      	ldr	r3, [pc, #140]	@ (8003d80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	4a22      	ldr	r2, [pc, #136]	@ (8003d80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cfe:	4b20      	ldr	r3, [pc, #128]	@ (8003d80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d16:	f7fe fead 	bl	8002a74 <HAL_GetTick>
 8003d1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d1c:	e009      	b.n	8003d32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d1e:	f7fe fea9 	bl	8002a74 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d2c:	d901      	bls.n	8003d32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e022      	b.n	8003d78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d32:	4b14      	ldr	r3, [pc, #80]	@ (8003d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d3e:	d1ee      	bne.n	8003d1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d40:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0f      	ldr	r2, [pc, #60]	@ (8003d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d4c:	f7fe fe92 	bl	8002a74 <HAL_GetTick>
 8003d50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d52:	e009      	b.n	8003d68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d54:	f7fe fe8e 	bl	8002a74 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d62:	d901      	bls.n	8003d68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e007      	b.n	8003d78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d68:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d74:	d1ee      	bne.n	8003d54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40007000 	.word	0x40007000

08003d88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d90:	2300      	movs	r3, #0
 8003d92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e29b      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8087 	beq.w	8003eba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dac:	4b96      	ldr	r3, [pc, #600]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d00c      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db8:	4b93      	ldr	r3, [pc, #588]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d112      	bne.n	8003dea <HAL_RCC_OscConfig+0x62>
 8003dc4:	4b90      	ldr	r3, [pc, #576]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd0:	d10b      	bne.n	8003dea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d06c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x130>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d168      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e275      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_OscConfig+0x7a>
 8003df4:	4b84      	ldr	r3, [pc, #528]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a83      	ldr	r2, [pc, #524]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e02e      	b.n	8003e60 <HAL_RCC_OscConfig+0xd8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x9c>
 8003e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b7c      	ldr	r3, [pc, #496]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a7b      	ldr	r2, [pc, #492]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e01d      	b.n	8003e60 <HAL_RCC_OscConfig+0xd8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0xc0>
 8003e2e:	4b76      	ldr	r3, [pc, #472]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a75      	ldr	r2, [pc, #468]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b73      	ldr	r3, [pc, #460]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a72      	ldr	r2, [pc, #456]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0xd8>
 8003e48:	4b6f      	ldr	r3, [pc, #444]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b6c      	ldr	r3, [pc, #432]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a6b      	ldr	r2, [pc, #428]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fe fe04 	bl	8002a74 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fe fe00 	bl	8002a74 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	@ 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e229      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b61      	ldr	r3, [pc, #388]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xe8>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fe fdf0 	bl	8002a74 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fe fdec 	bl	8002a74 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e215      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	4b57      	ldr	r3, [pc, #348]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x110>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d069      	beq.n	8003f9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec6:	4b50      	ldr	r3, [pc, #320]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x190>
 8003ede:	4b4a      	ldr	r3, [pc, #296]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b47      	ldr	r3, [pc, #284]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x17a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1e9      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	493d      	ldr	r1, [pc, #244]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e040      	b.n	8003f9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d023      	beq.n	8003f68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b39      	ldr	r3, [pc, #228]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a38      	ldr	r2, [pc, #224]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fda2 	bl	8002a74 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f34:	f7fe fd9e 	bl	8002a74 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e1c7      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f46:	4b30      	ldr	r3, [pc, #192]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f52:	4b2d      	ldr	r3, [pc, #180]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4929      	ldr	r1, [pc, #164]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
 8003f66:	e018      	b.n	8003f9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f68:	4b27      	ldr	r3, [pc, #156]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a26      	ldr	r2, [pc, #152]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe fd7e 	bl	8002a74 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7c:	f7fe fd7a 	bl	8002a74 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e1a3      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d038      	beq.n	8004018 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d019      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fae:	4b16      	ldr	r3, [pc, #88]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb2:	4a15      	ldr	r2, [pc, #84]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fba:	f7fe fd5b 	bl	8002a74 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc2:	f7fe fd57 	bl	8002a74 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e180      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x23a>
 8003fe0:	e01a      	b.n	8004018 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe2:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe6:	4a08      	ldr	r2, [pc, #32]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fee:	f7fe fd41 	bl	8002a74 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff4:	e00a      	b.n	800400c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff6:	f7fe fd3d 	bl	8002a74 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d903      	bls.n	800400c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e166      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
 8004008:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	4b92      	ldr	r3, [pc, #584]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800400e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ee      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a4 	beq.w	800416e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004026:	4b8c      	ldr	r3, [pc, #560]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	4b89      	ldr	r3, [pc, #548]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	4a88      	ldr	r2, [pc, #544]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403c:	6413      	str	r3, [r2, #64]	@ 0x40
 800403e:	4b86      	ldr	r3, [pc, #536]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800404e:	4b83      	ldr	r3, [pc, #524]	@ (800425c <HAL_RCC_OscConfig+0x4d4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d118      	bne.n	800408c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800405a:	4b80      	ldr	r3, [pc, #512]	@ (800425c <HAL_RCC_OscConfig+0x4d4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7f      	ldr	r2, [pc, #508]	@ (800425c <HAL_RCC_OscConfig+0x4d4>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004066:	f7fe fd05 	bl	8002a74 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406e:	f7fe fd01 	bl	8002a74 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b64      	cmp	r3, #100	@ 0x64
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e12a      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004080:	4b76      	ldr	r3, [pc, #472]	@ (800425c <HAL_RCC_OscConfig+0x4d4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d106      	bne.n	80040a2 <HAL_RCC_OscConfig+0x31a>
 8004094:	4b70      	ldr	r3, [pc, #448]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	4a6f      	ldr	r2, [pc, #444]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a0:	e02d      	b.n	80040fe <HAL_RCC_OscConfig+0x376>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x33c>
 80040aa:	4b6b      	ldr	r3, [pc, #428]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ae:	4a6a      	ldr	r2, [pc, #424]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b6:	4b68      	ldr	r3, [pc, #416]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ba:	4a67      	ldr	r2, [pc, #412]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c2:	e01c      	b.n	80040fe <HAL_RCC_OscConfig+0x376>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d10c      	bne.n	80040e6 <HAL_RCC_OscConfig+0x35e>
 80040cc:	4b62      	ldr	r3, [pc, #392]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	4a61      	ldr	r2, [pc, #388]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040d2:	f043 0304 	orr.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e4:	e00b      	b.n	80040fe <HAL_RCC_OscConfig+0x376>
 80040e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f2:	4b59      	ldr	r3, [pc, #356]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f6:	4a58      	ldr	r2, [pc, #352]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d015      	beq.n	8004132 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fe fcb5 	bl	8002a74 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fe fcb1 	bl	8002a74 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0d8      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004124:	4b4c      	ldr	r3, [pc, #304]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ee      	beq.n	800410e <HAL_RCC_OscConfig+0x386>
 8004130:	e014      	b.n	800415c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004132:	f7fe fc9f 	bl	8002a74 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fe fc9b 	bl	8002a74 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0c2      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004150:	4b41      	ldr	r3, [pc, #260]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ee      	bne.n	800413a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d105      	bne.n	800416e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004162:	4b3d      	ldr	r3, [pc, #244]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	4a3c      	ldr	r2, [pc, #240]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800416c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80ae 	beq.w	80042d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004178:	4b37      	ldr	r3, [pc, #220]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d06d      	beq.n	8004260 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d14b      	bne.n	8004224 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418c:	4b32      	ldr	r3, [pc, #200]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a31      	ldr	r2, [pc, #196]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fe fc6c 	bl	8002a74 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fe fc68 	bl	8002a74 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e091      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	4b29      	ldr	r3, [pc, #164]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	3b01      	subs	r3, #1
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	071b      	lsls	r3, r3, #28
 80041ea:	491b      	ldr	r1, [pc, #108]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f0:	4b19      	ldr	r3, [pc, #100]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80041f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fe fc3a 	bl	8002a74 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004204:	f7fe fc36 	bl	8002a74 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e05f      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x47c>
 8004222:	e057      	b.n	80042d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004224:	4b0c      	ldr	r3, [pc, #48]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0b      	ldr	r2, [pc, #44]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800422a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800422e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fe fc20 	bl	8002a74 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004238:	f7fe fc1c 	bl	8002a74 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e045      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x4b0>
 8004256:	e03d      	b.n	80042d4 <HAL_RCC_OscConfig+0x54c>
 8004258:	40023800 	.word	0x40023800
 800425c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004260:	4b1f      	ldr	r3, [pc, #124]	@ (80042e0 <HAL_RCC_OscConfig+0x558>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d030      	beq.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d129      	bne.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d122      	bne.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004296:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004298:	4293      	cmp	r3, r2
 800429a:	d119      	bne.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d10f      	bne.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800

080042e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0d0      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042fc:	4b6a      	ldr	r3, [pc, #424]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d910      	bls.n	800432c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b67      	ldr	r3, [pc, #412]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 020f 	bic.w	r2, r3, #15
 8004312:	4965      	ldr	r1, [pc, #404]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b63      	ldr	r3, [pc, #396]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0b8      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004344:	4b59      	ldr	r3, [pc, #356]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a58      	ldr	r2, [pc, #352]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 800434a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800434e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800435c:	4b53      	ldr	r3, [pc, #332]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a52      	ldr	r2, [pc, #328]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004362:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004366:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004368:	4b50      	ldr	r3, [pc, #320]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	494d      	ldr	r1, [pc, #308]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d040      	beq.n	8004408 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b47      	ldr	r3, [pc, #284]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d115      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e07f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d107      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a6:	4b41      	ldr	r3, [pc, #260]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e073      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b6:	4b3d      	ldr	r3, [pc, #244]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e06b      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043c6:	4b39      	ldr	r3, [pc, #228]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 0203 	bic.w	r2, r3, #3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4936      	ldr	r1, [pc, #216]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d8:	f7fe fb4c 	bl	8002a74 <HAL_GetTick>
 80043dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e0:	f7fe fb48 	bl	8002a74 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e053      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f6:	4b2d      	ldr	r3, [pc, #180]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 020c 	and.w	r2, r3, #12
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	429a      	cmp	r2, r3
 8004406:	d1eb      	bne.n	80043e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004408:	4b27      	ldr	r3, [pc, #156]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d210      	bcs.n	8004438 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b24      	ldr	r3, [pc, #144]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 020f 	bic.w	r2, r3, #15
 800441e:	4922      	ldr	r1, [pc, #136]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e032      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004444:	4b19      	ldr	r3, [pc, #100]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4916      	ldr	r1, [pc, #88]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	490e      	ldr	r1, [pc, #56]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004476:	f000 f821 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 800447a:	4602      	mov	r2, r0
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	490a      	ldr	r1, [pc, #40]	@ (80044b0 <HAL_RCC_ClockConfig+0x1cc>)
 8004488:	5ccb      	ldrb	r3, [r1, r3]
 800448a:	fa22 f303 	lsr.w	r3, r2, r3
 800448e:	4a09      	ldr	r2, [pc, #36]	@ (80044b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004492:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <HAL_RCC_ClockConfig+0x1d4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe faa8 	bl	80029ec <HAL_InitTick>

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023c00 	.word	0x40023c00
 80044ac:	40023800 	.word	0x40023800
 80044b0:	08007de4 	.word	0x08007de4
 80044b4:	2000008c 	.word	0x2000008c
 80044b8:	20000090 	.word	0x20000090

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b094      	sub	sp, #80	@ 0x50
 80044c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044c8:	2300      	movs	r3, #0
 80044ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044cc:	2300      	movs	r3, #0
 80044ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d4:	4b79      	ldr	r3, [pc, #484]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d00d      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x40>
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	f200 80e1 	bhi.w	80046a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d003      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ee:	e0db      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f0:	4b73      	ldr	r3, [pc, #460]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f4:	e0db      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f6:	4b73      	ldr	r3, [pc, #460]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80044f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044fa:	e0d8      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044fc:	4b6f      	ldr	r3, [pc, #444]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004504:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004506:	4b6d      	ldr	r3, [pc, #436]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004512:	4b6a      	ldr	r3, [pc, #424]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	2200      	movs	r2, #0
 800451a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800451c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004524:	633b      	str	r3, [r7, #48]	@ 0x30
 8004526:	2300      	movs	r3, #0
 8004528:	637b      	str	r3, [r7, #52]	@ 0x34
 800452a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800452e:	4622      	mov	r2, r4
 8004530:	462b      	mov	r3, r5
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	0159      	lsls	r1, r3, #5
 800453c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004540:	0150      	lsls	r0, r2, #5
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4621      	mov	r1, r4
 8004548:	1a51      	subs	r1, r2, r1
 800454a:	6139      	str	r1, [r7, #16]
 800454c:	4629      	mov	r1, r5
 800454e:	eb63 0301 	sbc.w	r3, r3, r1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004560:	4659      	mov	r1, fp
 8004562:	018b      	lsls	r3, r1, #6
 8004564:	4651      	mov	r1, sl
 8004566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800456a:	4651      	mov	r1, sl
 800456c:	018a      	lsls	r2, r1, #6
 800456e:	4651      	mov	r1, sl
 8004570:	ebb2 0801 	subs.w	r8, r2, r1
 8004574:	4659      	mov	r1, fp
 8004576:	eb63 0901 	sbc.w	r9, r3, r1
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458e:	4690      	mov	r8, r2
 8004590:	4699      	mov	r9, r3
 8004592:	4623      	mov	r3, r4
 8004594:	eb18 0303 	adds.w	r3, r8, r3
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	462b      	mov	r3, r5
 800459c:	eb49 0303 	adc.w	r3, r9, r3
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045ae:	4629      	mov	r1, r5
 80045b0:	024b      	lsls	r3, r1, #9
 80045b2:	4621      	mov	r1, r4
 80045b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045b8:	4621      	mov	r1, r4
 80045ba:	024a      	lsls	r2, r1, #9
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c2:	2200      	movs	r2, #0
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045cc:	f7fb fe88 	bl	80002e0 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d8:	e058      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045da:	4b38      	ldr	r3, [pc, #224]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	2200      	movs	r2, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	4611      	mov	r1, r2
 80045e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	0159      	lsls	r1, r3, #5
 8004602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004606:	0150      	lsls	r0, r2, #5
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4641      	mov	r1, r8
 800460e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004612:	4649      	mov	r1, r9
 8004614:	eb63 0b01 	sbc.w	fp, r3, r1
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004624:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004628:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800462c:	ebb2 040a 	subs.w	r4, r2, sl
 8004630:	eb63 050b 	sbc.w	r5, r3, fp
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	00eb      	lsls	r3, r5, #3
 800463e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004642:	00e2      	lsls	r2, r4, #3
 8004644:	4614      	mov	r4, r2
 8004646:	461d      	mov	r5, r3
 8004648:	4643      	mov	r3, r8
 800464a:	18e3      	adds	r3, r4, r3
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	464b      	mov	r3, r9
 8004650:	eb45 0303 	adc.w	r3, r5, r3
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004662:	4629      	mov	r1, r5
 8004664:	028b      	lsls	r3, r1, #10
 8004666:	4621      	mov	r1, r4
 8004668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800466c:	4621      	mov	r1, r4
 800466e:	028a      	lsls	r2, r1, #10
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004676:	2200      	movs	r2, #0
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	61fa      	str	r2, [r7, #28]
 800467c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004680:	f7fb fe2e 	bl	80002e0 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4613      	mov	r3, r2
 800468a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800468c:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800469c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800469e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a6:	e002      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80046aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3750      	adds	r7, #80	@ 0x50
 80046b4:	46bd      	mov	sp, r7
 80046b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ba:	bf00      	nop
 80046bc:	40023800 	.word	0x40023800
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	@ (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	2000008c 	.word	0x2000008c

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a9b      	lsrs	r3, r3, #10
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4903      	ldr	r1, [pc, #12]	@ (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40023800 	.word	0x40023800
 8004704:	08007df4 	.word	0x08007df4

08004708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800470c:	f7ff ffdc 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	0b5b      	lsrs	r3, r3, #13
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	4903      	ldr	r1, [pc, #12]	@ (800472c <HAL_RCC_GetPCLK2Freq+0x24>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40023800 	.word	0x40023800
 800472c:	08007df4 	.word	0x08007df4

08004730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d012      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004758:	4b69      	ldr	r3, [pc, #420]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a68      	ldr	r2, [pc, #416]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004762:	6093      	str	r3, [r2, #8]
 8004764:	4b66      	ldr	r3, [pc, #408]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476c:	4964      	ldr	r1, [pc, #400]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800477a:	2301      	movs	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d017      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800478a:	4b5d      	ldr	r3, [pc, #372]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004790:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004798:	4959      	ldr	r1, [pc, #356]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047a8:	d101      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80047b6:	2301      	movs	r3, #1
 80047b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d017      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	494a      	ldr	r1, [pc, #296]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047e4:	d101      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80047e6:	2301      	movs	r3, #1
 80047e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004802:	2301      	movs	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 808b 	beq.w	800492a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004814:	4b3a      	ldr	r3, [pc, #232]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	4a39      	ldr	r2, [pc, #228]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800481e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004820:	4b37      	ldr	r3, [pc, #220]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800482c:	4b35      	ldr	r3, [pc, #212]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a34      	ldr	r2, [pc, #208]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fe f91c 	bl	8002a74 <HAL_GetTick>
 800483c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004840:	f7fe f918 	bl	8002a74 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	@ 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e38f      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004852:	4b2c      	ldr	r3, [pc, #176]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800485e:	4b28      	ldr	r3, [pc, #160]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004866:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d035      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	429a      	cmp	r2, r3
 800487a:	d02e      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800487c:	4b20      	ldr	r3, [pc, #128]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004884:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004886:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488a:	4a1d      	ldr	r2, [pc, #116]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004890:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004892:	4b1b      	ldr	r3, [pc, #108]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004896:	4a1a      	ldr	r2, [pc, #104]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800489c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800489e:	4a18      	ldr	r2, [pc, #96]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048a4:	4b16      	ldr	r3, [pc, #88]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d114      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fe f8e0 	bl	8002a74 <HAL_GetTick>
 80048b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b6:	e00a      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fe f8dc 	bl	8002a74 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e351      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0ee      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048e6:	d111      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048f4:	4b04      	ldr	r3, [pc, #16]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048f6:	400b      	ands	r3, r1
 80048f8:	4901      	ldr	r1, [pc, #4]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
 80048fe:	e00b      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004900:	40023800 	.word	0x40023800
 8004904:	40007000 	.word	0x40007000
 8004908:	0ffffcff 	.word	0x0ffffcff
 800490c:	4bac      	ldr	r3, [pc, #688]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4aab      	ldr	r2, [pc, #684]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004912:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004916:	6093      	str	r3, [r2, #8]
 8004918:	4ba9      	ldr	r3, [pc, #676]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004924:	49a6      	ldr	r1, [pc, #664]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004926:	4313      	orrs	r3, r2
 8004928:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b00      	cmp	r3, #0
 8004934:	d010      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004936:	4ba2      	ldr	r3, [pc, #648]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800493c:	4aa0      	ldr	r2, [pc, #640]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004942:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004946:	4b9e      	ldr	r3, [pc, #632]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004948:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004950:	499b      	ldr	r1, [pc, #620]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004964:	4b96      	ldr	r3, [pc, #600]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004972:	4993      	ldr	r1, [pc, #588]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004986:	4b8e      	ldr	r3, [pc, #568]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004994:	498a      	ldr	r1, [pc, #552]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049a8:	4b85      	ldr	r3, [pc, #532]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b6:	4982      	ldr	r1, [pc, #520]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049ca:	4b7d      	ldr	r3, [pc, #500]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d8:	4979      	ldr	r1, [pc, #484]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ec:	4b74      	ldr	r3, [pc, #464]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	f023 0203 	bic.w	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fa:	4971      	ldr	r1, [pc, #452]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a14:	f023 020c 	bic.w	r2, r3, #12
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a1c:	4968      	ldr	r1, [pc, #416]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a30:	4b63      	ldr	r3, [pc, #396]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a36:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3e:	4960      	ldr	r1, [pc, #384]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a52:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a58:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a60:	4957      	ldr	r1, [pc, #348]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a74:	4b52      	ldr	r3, [pc, #328]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a82:	494f      	ldr	r1, [pc, #316]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a96:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	4946      	ldr	r1, [pc, #280]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ab8:	4b41      	ldr	r3, [pc, #260]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac6:	493e      	ldr	r1, [pc, #248]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ada:	4b39      	ldr	r3, [pc, #228]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae8:	4935      	ldr	r1, [pc, #212]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004afc:	4b30      	ldr	r3, [pc, #192]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b02:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b0a:	492d      	ldr	r1, [pc, #180]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d011      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b1e:	4b28      	ldr	r3, [pc, #160]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b24:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b2c:	4924      	ldr	r1, [pc, #144]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b5e:	4b18      	ldr	r3, [pc, #96]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b64:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b6c:	4914      	ldr	r1, [pc, #80]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00b      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b80:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b86:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b90:	490b      	ldr	r1, [pc, #44]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00f      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ba4:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004baa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bb4:	4902      	ldr	r1, [pc, #8]	@ (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004bbe:	bf00      	nop
 8004bc0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bd0:	4b8a      	ldr	r3, [pc, #552]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bd6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be0:	4986      	ldr	r1, [pc, #536]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004bf4:	4b81      	ldr	r3, [pc, #516]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bfa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c04:	497d      	ldr	r1, [pc, #500]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d006      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 80d6 	beq.w	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c20:	4b76      	ldr	r3, [pc, #472]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a75      	ldr	r2, [pc, #468]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2c:	f7fd ff22 	bl	8002a74 <HAL_GetTick>
 8004c30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c34:	f7fd ff1e 	bl	8002a74 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b64      	cmp	r3, #100	@ 0x64
 8004c40:	d901      	bls.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e195      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c46:	4b6d      	ldr	r3, [pc, #436]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d021      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d11d      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c66:	4b65      	ldr	r3, [pc, #404]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c74:	4b61      	ldr	r3, [pc, #388]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c7a:	0e1b      	lsrs	r3, r3, #24
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	019a      	lsls	r2, r3, #6
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	061b      	lsls	r3, r3, #24
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	071b      	lsls	r3, r3, #28
 8004c9a:	4958      	ldr	r1, [pc, #352]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02e      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ccc:	d129      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cce:	4b4b      	ldr	r3, [pc, #300]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cdc:	4b47      	ldr	r3, [pc, #284]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ce2:	0f1b      	lsrs	r3, r3, #28
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	019a      	lsls	r2, r3, #6
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	041b      	lsls	r3, r3, #16
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	061b      	lsls	r3, r3, #24
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	071b      	lsls	r3, r3, #28
 8004d02:	493e      	ldr	r1, [pc, #248]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d10:	f023 021f 	bic.w	r2, r3, #31
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	4938      	ldr	r1, [pc, #224]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01d      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d2e:	4b33      	ldr	r3, [pc, #204]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d34:	0e1b      	lsrs	r3, r3, #24
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d42:	0f1b      	lsrs	r3, r3, #28
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	019a      	lsls	r2, r3, #6
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	041b      	lsls	r3, r3, #16
 8004d56:	431a      	orrs	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	061b      	lsls	r3, r3, #24
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	071b      	lsls	r3, r3, #28
 8004d62:	4926      	ldr	r1, [pc, #152]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d011      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	019a      	lsls	r2, r3, #6
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	061b      	lsls	r3, r3, #24
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	071b      	lsls	r3, r3, #28
 8004d92:	491a      	ldr	r1, [pc, #104]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d9a:	4b18      	ldr	r3, [pc, #96]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a17      	ldr	r2, [pc, #92]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da6:	f7fd fe65 	bl	8002a74 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dae:	f7fd fe61 	bl	8002a74 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b64      	cmp	r3, #100	@ 0x64
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e0d8      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	f040 80ce 	bne.w	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004dd4:	4b09      	ldr	r3, [pc, #36]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a08      	ldr	r2, [pc, #32]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de0:	f7fd fe48 	bl	8002a74 <HAL_GetTick>
 8004de4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004de6:	e00b      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004de8:	f7fd fe44 	bl	8002a74 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b64      	cmp	r3, #100	@ 0x64
 8004df4:	d904      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e0bb      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e00:	4b5e      	ldr	r3, [pc, #376]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e0c:	d0ec      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d02e      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d12a      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e36:	4b51      	ldr	r3, [pc, #324]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e44:	4b4d      	ldr	r3, [pc, #308]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4a:	0f1b      	lsrs	r3, r3, #28
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	019a      	lsls	r2, r3, #6
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	061b      	lsls	r3, r3, #24
 8004e64:	431a      	orrs	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	071b      	lsls	r3, r3, #28
 8004e6a:	4944      	ldr	r1, [pc, #272]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e72:	4b42      	ldr	r3, [pc, #264]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e78:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e80:	3b01      	subs	r3, #1
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	493d      	ldr	r1, [pc, #244]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d022      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ea0:	d11d      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ea2:	4b36      	ldr	r3, [pc, #216]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea8:	0e1b      	lsrs	r3, r3, #24
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eb0:	4b32      	ldr	r3, [pc, #200]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb6:	0f1b      	lsrs	r3, r3, #28
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	019a      	lsls	r2, r3, #6
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	041b      	lsls	r3, r3, #16
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	061b      	lsls	r3, r3, #24
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	071b      	lsls	r3, r3, #28
 8004ed6:	4929      	ldr	r1, [pc, #164]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d028      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eea:	4b24      	ldr	r3, [pc, #144]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef0:	0e1b      	lsrs	r3, r3, #24
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ef8:	4b20      	ldr	r3, [pc, #128]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efe:	0c1b      	lsrs	r3, r3, #16
 8004f00:	f003 0303 	and.w	r3, r3, #3
 8004f04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	019a      	lsls	r2, r3, #6
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	041b      	lsls	r3, r3, #16
 8004f10:	431a      	orrs	r2, r3
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	061b      	lsls	r3, r3, #24
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	071b      	lsls	r3, r3, #28
 8004f1e:	4917      	ldr	r1, [pc, #92]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f26:	4b15      	ldr	r3, [pc, #84]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	4911      	ldr	r1, [pc, #68]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0e      	ldr	r2, [pc, #56]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f48:	f7fd fd94 	bl	8002a74 <HAL_GetTick>
 8004f4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f50:	f7fd fd90 	bl	8002a74 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	@ 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e007      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f62:	4b06      	ldr	r3, [pc, #24]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f6e:	d1ef      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800

08004f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e049      	b.n	8005026 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fd fbba 	bl	8002720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f000 fc4c 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d001      	beq.n	8005048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e04c      	b.n	80050e2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a26      	ldr	r2, [pc, #152]	@ (80050f0 <HAL_TIM_Base_Start+0xc0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d022      	beq.n	80050a0 <HAL_TIM_Base_Start+0x70>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005062:	d01d      	beq.n	80050a0 <HAL_TIM_Base_Start+0x70>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a22      	ldr	r2, [pc, #136]	@ (80050f4 <HAL_TIM_Base_Start+0xc4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <HAL_TIM_Base_Start+0x70>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a21      	ldr	r2, [pc, #132]	@ (80050f8 <HAL_TIM_Base_Start+0xc8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <HAL_TIM_Base_Start+0x70>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1f      	ldr	r2, [pc, #124]	@ (80050fc <HAL_TIM_Base_Start+0xcc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <HAL_TIM_Base_Start+0x70>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1e      	ldr	r2, [pc, #120]	@ (8005100 <HAL_TIM_Base_Start+0xd0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <HAL_TIM_Base_Start+0x70>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1c      	ldr	r2, [pc, #112]	@ (8005104 <HAL_TIM_Base_Start+0xd4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_TIM_Base_Start+0x70>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <HAL_TIM_Base_Start+0xd8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d115      	bne.n	80050cc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	4b19      	ldr	r3, [pc, #100]	@ (800510c <HAL_TIM_Base_Start+0xdc>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b06      	cmp	r3, #6
 80050b0:	d015      	beq.n	80050de <HAL_TIM_Base_Start+0xae>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b8:	d011      	beq.n	80050de <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	e008      	b.n	80050de <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e000      	b.n	80050e0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40010000 	.word	0x40010000
 80050f4:	40000400 	.word	0x40000400
 80050f8:	40000800 	.word	0x40000800
 80050fc:	40000c00 	.word	0x40000c00
 8005100:	40010400 	.word	0x40010400
 8005104:	40014000 	.word	0x40014000
 8005108:	40001800 	.word	0x40001800
 800510c:	00010007 	.word	0x00010007

08005110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	d001      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e054      	b.n	80051d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a26      	ldr	r2, [pc, #152]	@ (80051e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d022      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x80>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005152:	d01d      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x80>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a22      	ldr	r2, [pc, #136]	@ (80051e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d018      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x80>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a21      	ldr	r2, [pc, #132]	@ (80051e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d013      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x80>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1f      	ldr	r2, [pc, #124]	@ (80051ec <HAL_TIM_Base_Start_IT+0xdc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00e      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x80>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1e      	ldr	r2, [pc, #120]	@ (80051f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d009      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x80>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1c      	ldr	r2, [pc, #112]	@ (80051f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d004      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x80>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1b      	ldr	r2, [pc, #108]	@ (80051f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d115      	bne.n	80051bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	4b19      	ldr	r3, [pc, #100]	@ (80051fc <HAL_TIM_Base_Start_IT+0xec>)
 8005198:	4013      	ands	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b06      	cmp	r3, #6
 80051a0:	d015      	beq.n	80051ce <HAL_TIM_Base_Start_IT+0xbe>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a8:	d011      	beq.n	80051ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ba:	e008      	b.n	80051ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e000      	b.n	80051d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	40010400 	.word	0x40010400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40001800 	.word	0x40001800
 80051fc:	00010007 	.word	0x00010007

08005200 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e08f      	b.n	8005334 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7fd f9a1 	bl	8002570 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6899      	ldr	r1, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	4b3e      	ldr	r3, [pc, #248]	@ (800533c <HAL_TIM_Encoder_Init+0x13c>)
 8005242:	400b      	ands	r3, r1
 8005244:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f000 fb03 	bl	800585c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4b31      	ldr	r3, [pc, #196]	@ (8005340 <HAL_TIM_Encoder_Init+0x140>)
 800527c:	4013      	ands	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	4313      	orrs	r3, r2
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4b2b      	ldr	r3, [pc, #172]	@ (8005344 <HAL_TIM_Encoder_Init+0x144>)
 8005296:	4013      	ands	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4b2a      	ldr	r3, [pc, #168]	@ (8005348 <HAL_TIM_Encoder_Init+0x148>)
 800529e:	4013      	ands	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	4313      	orrs	r3, r2
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	011a      	lsls	r2, r3, #4
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	031b      	lsls	r3, r3, #12
 80052c0:	4313      	orrs	r3, r2
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	4313      	orrs	r3, r2
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	fffebff8 	.word	0xfffebff8
 8005340:	fffffcfc 	.word	0xfffffcfc
 8005344:	fffff3f3 	.word	0xfffff3f3
 8005348:	ffff0f0f 	.word	0xffff0f0f

0800534c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800535c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005364:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800536c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005374:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d110      	bne.n	800539e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d102      	bne.n	8005388 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005382:	7b7b      	ldrb	r3, [r7, #13]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d001      	beq.n	800538c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e069      	b.n	8005460 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800539c:	e031      	b.n	8005402 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d110      	bne.n	80053c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d102      	bne.n	80053b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053aa:	7b3b      	ldrb	r3, [r7, #12]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d001      	beq.n	80053b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e055      	b.n	8005460 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053c4:	e01d      	b.n	8005402 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d108      	bne.n	80053de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053cc:	7bbb      	ldrb	r3, [r7, #14]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d105      	bne.n	80053de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053d2:	7b7b      	ldrb	r3, [r7, #13]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d102      	bne.n	80053de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053d8:	7b3b      	ldrb	r3, [r7, #12]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d001      	beq.n	80053e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e03e      	b.n	8005460 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_TIM_Encoder_Start+0xc4>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d008      	beq.n	8005420 <HAL_TIM_Encoder_Start+0xd4>
 800540e:	e00f      	b.n	8005430 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2201      	movs	r2, #1
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fb65 	bl	8005ae8 <TIM_CCxChannelCmd>
      break;
 800541e:	e016      	b.n	800544e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2201      	movs	r2, #1
 8005426:	2104      	movs	r1, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fb5d 	bl	8005ae8 <TIM_CCxChannelCmd>
      break;
 800542e:	e00e      	b.n	800544e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2201      	movs	r2, #1
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fb55 	bl	8005ae8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2201      	movs	r2, #1
 8005444:	2104      	movs	r1, #4
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fb4e 	bl	8005ae8 <TIM_CCxChannelCmd>
      break;
 800544c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d020      	beq.n	80054cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01b      	beq.n	80054cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0202 	mvn.w	r2, #2
 800549c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f9b4 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 80054b8:	e005      	b.n	80054c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f9a6 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f9b7 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d020      	beq.n	8005518 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01b      	beq.n	8005518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0204 	mvn.w	r2, #4
 80054e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f98e 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 8005504:	e005      	b.n	8005512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f980 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f991 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d020      	beq.n	8005564 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01b      	beq.n	8005564 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0208 	mvn.w	r2, #8
 8005534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2204      	movs	r2, #4
 800553a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f968 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 8005550:	e005      	b.n	800555e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f95a 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f96b 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	d020      	beq.n	80055b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01b      	beq.n	80055b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0210 	mvn.w	r2, #16
 8005580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2208      	movs	r2, #8
 8005586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f942 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 800559c:	e005      	b.n	80055aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f934 	bl	800580c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f945 	bl	8005834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0201 	mvn.w	r2, #1
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fc f9fa 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d104      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00c      	beq.n	8005602 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fb31 	bl	8005c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00c      	beq.n	8005626 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800561e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fb29 	bl	8005c78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00c      	beq.n	800564a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f8ff 	bl	8005848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f06f 0220 	mvn.w	r2, #32
 8005666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 faf1 	bl	8005c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_TIM_ConfigClockSource+0x1c>
 8005690:	2302      	movs	r3, #2
 8005692:	e0b4      	b.n	80057fe <HAL_TIM_ConfigClockSource+0x186>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	4b56      	ldr	r3, [pc, #344]	@ (8005808 <HAL_TIM_ConfigClockSource+0x190>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056cc:	d03e      	beq.n	800574c <HAL_TIM_ConfigClockSource+0xd4>
 80056ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d2:	f200 8087 	bhi.w	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056da:	f000 8086 	beq.w	80057ea <HAL_TIM_ConfigClockSource+0x172>
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e2:	d87f      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b70      	cmp	r3, #112	@ 0x70
 80056e6:	d01a      	beq.n	800571e <HAL_TIM_ConfigClockSource+0xa6>
 80056e8:	2b70      	cmp	r3, #112	@ 0x70
 80056ea:	d87b      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b60      	cmp	r3, #96	@ 0x60
 80056ee:	d050      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x11a>
 80056f0:	2b60      	cmp	r3, #96	@ 0x60
 80056f2:	d877      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b50      	cmp	r3, #80	@ 0x50
 80056f6:	d03c      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0xfa>
 80056f8:	2b50      	cmp	r3, #80	@ 0x50
 80056fa:	d873      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b40      	cmp	r3, #64	@ 0x40
 80056fe:	d058      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005700:	2b40      	cmp	r3, #64	@ 0x40
 8005702:	d86f      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b30      	cmp	r3, #48	@ 0x30
 8005706:	d064      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005708:	2b30      	cmp	r3, #48	@ 0x30
 800570a:	d86b      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b20      	cmp	r3, #32
 800570e:	d060      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005710:	2b20      	cmp	r3, #32
 8005712:	d867      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d05c      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005718:	2b10      	cmp	r3, #16
 800571a:	d05a      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 800571c:	e062      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800572e:	f000 f9bb 	bl	8005aa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	609a      	str	r2, [r3, #8]
      break;
 800574a:	e04f      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800575c:	f000 f9a4 	bl	8005aa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800576e:	609a      	str	r2, [r3, #8]
      break;
 8005770:	e03c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577e:	461a      	mov	r2, r3
 8005780:	f000 f918 	bl	80059b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2150      	movs	r1, #80	@ 0x50
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f971 	bl	8005a72 <TIM_ITRx_SetConfig>
      break;
 8005790:	e02c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800579e:	461a      	mov	r2, r3
 80057a0:	f000 f937 	bl	8005a12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2160      	movs	r1, #96	@ 0x60
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 f961 	bl	8005a72 <TIM_ITRx_SetConfig>
      break;
 80057b0:	e01c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057be:	461a      	mov	r2, r3
 80057c0:	f000 f8f8 	bl	80059b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2140      	movs	r1, #64	@ 0x40
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 f951 	bl	8005a72 <TIM_ITRx_SetConfig>
      break;
 80057d0:	e00c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f000 f948 	bl	8005a72 <TIM_ITRx_SetConfig>
      break;
 80057e2:	e003      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
      break;
 80057e8:	e000      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	fffeff88 	.word	0xfffeff88

0800580c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a46      	ldr	r2, [pc, #280]	@ (8005988 <TIM_Base_SetConfig+0x12c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d013      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587a:	d00f      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a43      	ldr	r2, [pc, #268]	@ (800598c <TIM_Base_SetConfig+0x130>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a42      	ldr	r2, [pc, #264]	@ (8005990 <TIM_Base_SetConfig+0x134>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a41      	ldr	r2, [pc, #260]	@ (8005994 <TIM_Base_SetConfig+0x138>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a40      	ldr	r2, [pc, #256]	@ (8005998 <TIM_Base_SetConfig+0x13c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d108      	bne.n	80058ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a35      	ldr	r2, [pc, #212]	@ (8005988 <TIM_Base_SetConfig+0x12c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d02b      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058bc:	d027      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a32      	ldr	r2, [pc, #200]	@ (800598c <TIM_Base_SetConfig+0x130>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d023      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a31      	ldr	r2, [pc, #196]	@ (8005990 <TIM_Base_SetConfig+0x134>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01f      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a30      	ldr	r2, [pc, #192]	@ (8005994 <TIM_Base_SetConfig+0x138>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01b      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005998 <TIM_Base_SetConfig+0x13c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d017      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2e      	ldr	r2, [pc, #184]	@ (800599c <TIM_Base_SetConfig+0x140>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2d      	ldr	r2, [pc, #180]	@ (80059a0 <TIM_Base_SetConfig+0x144>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00f      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <TIM_Base_SetConfig+0x148>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00b      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2b      	ldr	r2, [pc, #172]	@ (80059a8 <TIM_Base_SetConfig+0x14c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2a      	ldr	r2, [pc, #168]	@ (80059ac <TIM_Base_SetConfig+0x150>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a29      	ldr	r2, [pc, #164]	@ (80059b0 <TIM_Base_SetConfig+0x154>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d108      	bne.n	8005920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a10      	ldr	r2, [pc, #64]	@ (8005988 <TIM_Base_SetConfig+0x12c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_Base_SetConfig+0xf8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <TIM_Base_SetConfig+0x13c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d103      	bne.n	800595c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	d105      	bne.n	800597a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f023 0201 	bic.w	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	611a      	str	r2, [r3, #16]
  }
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40010000 	.word	0x40010000
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40010400 	.word	0x40010400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800
 80059a8:	40001800 	.word	0x40001800
 80059ac:	40001c00 	.word	0x40001c00
 80059b0:	40002000 	.word	0x40002000

080059b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f023 0201 	bic.w	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f023 030a 	bic.w	r3, r3, #10
 80059f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b087      	sub	sp, #28
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f023 0210 	bic.w	r2, r3, #16
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	031b      	lsls	r3, r3, #12
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f043 0307 	orr.w	r3, r3, #7
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	609a      	str	r2, [r3, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	609a      	str	r2, [r3, #8]
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2201      	movs	r2, #1
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1a      	ldr	r2, [r3, #32]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1a      	ldr	r2, [r3, #32]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e06d      	b.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a30      	ldr	r2, [pc, #192]	@ (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d108      	bne.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a20      	ldr	r2, [pc, #128]	@ (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d022      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bbe:	d01d      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d018      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1c      	ldr	r2, [pc, #112]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d013      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00e      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d009      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a16      	ldr	r2, [pc, #88]	@ (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a15      	ldr	r2, [pc, #84]	@ (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d10c      	bne.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40010000 	.word	0x40010000
 8005c38:	40010400 	.word	0x40010400
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40000c00 	.word	0x40000c00
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40001800 	.word	0x40001800

08005c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e040      	b.n	8005d20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fc fd70 	bl	8002794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2224      	movs	r2, #36	@ 0x24
 8005cb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0201 	bic.w	r2, r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 faea 	bl	80062ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f883 	bl	8005de4 <UART_SetConfig>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e01b      	b.n	8005d20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fb69 	bl	80063f0 <UART_CheckIdleState>
 8005d1e:	4603      	mov	r3, r0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b08b      	sub	sp, #44	@ 0x2c
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d147      	bne.n	8005dce <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <HAL_UART_Transmit_IT+0x22>
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e040      	b.n	8005dd0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	88fa      	ldrh	r2, [r7, #6]
 8005d58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2221      	movs	r2, #33	@ 0x21
 8005d76:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d80:	d107      	bne.n	8005d92 <HAL_UART_Transmit_IT+0x6a>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4a13      	ldr	r2, [pc, #76]	@ (8005ddc <HAL_UART_Transmit_IT+0xb4>)
 8005d8e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005d90:	e002      	b.n	8005d98 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4a12      	ldr	r2, [pc, #72]	@ (8005de0 <HAL_UART_Transmit_IT+0xb8>)
 8005d96:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	613b      	str	r3, [r7, #16]
   return(result);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	623b      	str	r3, [r7, #32]
 8005db8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	69f9      	ldr	r1, [r7, #28]
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e6      	bne.n	8005d98 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e000      	b.n	8005dd0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005dce:	2302      	movs	r3, #2
  }
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	372c      	adds	r7, #44	@ 0x2c
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	08006799 	.word	0x08006799
 8005de0:	080066e3 	.word	0x080066e3

08005de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4ba6      	ldr	r3, [pc, #664]	@ (80060a8 <UART_SetConfig+0x2c4>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	6979      	ldr	r1, [r7, #20]
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a94      	ldr	r2, [pc, #592]	@ (80060ac <UART_SetConfig+0x2c8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d120      	bne.n	8005ea2 <UART_SetConfig+0xbe>
 8005e60:	4b93      	ldr	r3, [pc, #588]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d816      	bhi.n	8005e9c <UART_SetConfig+0xb8>
 8005e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <UART_SetConfig+0x90>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e85 	.word	0x08005e85
 8005e78:	08005e91 	.word	0x08005e91
 8005e7c:	08005e8b 	.word	0x08005e8b
 8005e80:	08005e97 	.word	0x08005e97
 8005e84:	2301      	movs	r3, #1
 8005e86:	77fb      	strb	r3, [r7, #31]
 8005e88:	e150      	b.n	800612c <UART_SetConfig+0x348>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	77fb      	strb	r3, [r7, #31]
 8005e8e:	e14d      	b.n	800612c <UART_SetConfig+0x348>
 8005e90:	2304      	movs	r3, #4
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e14a      	b.n	800612c <UART_SetConfig+0x348>
 8005e96:	2308      	movs	r3, #8
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e147      	b.n	800612c <UART_SetConfig+0x348>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e144      	b.n	800612c <UART_SetConfig+0x348>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a83      	ldr	r2, [pc, #524]	@ (80060b4 <UART_SetConfig+0x2d0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d132      	bne.n	8005f12 <UART_SetConfig+0x12e>
 8005eac:	4b80      	ldr	r3, [pc, #512]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb2:	f003 030c 	and.w	r3, r3, #12
 8005eb6:	2b0c      	cmp	r3, #12
 8005eb8:	d828      	bhi.n	8005f0c <UART_SetConfig+0x128>
 8005eba:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec0 <UART_SetConfig+0xdc>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005ef5 	.word	0x08005ef5
 8005ec4:	08005f0d 	.word	0x08005f0d
 8005ec8:	08005f0d 	.word	0x08005f0d
 8005ecc:	08005f0d 	.word	0x08005f0d
 8005ed0:	08005f01 	.word	0x08005f01
 8005ed4:	08005f0d 	.word	0x08005f0d
 8005ed8:	08005f0d 	.word	0x08005f0d
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005efb 	.word	0x08005efb
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f0d 	.word	0x08005f0d
 8005ef0:	08005f07 	.word	0x08005f07
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e118      	b.n	800612c <UART_SetConfig+0x348>
 8005efa:	2302      	movs	r3, #2
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e115      	b.n	800612c <UART_SetConfig+0x348>
 8005f00:	2304      	movs	r3, #4
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e112      	b.n	800612c <UART_SetConfig+0x348>
 8005f06:	2308      	movs	r3, #8
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e10f      	b.n	800612c <UART_SetConfig+0x348>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e10c      	b.n	800612c <UART_SetConfig+0x348>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a68      	ldr	r2, [pc, #416]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d120      	bne.n	8005f5e <UART_SetConfig+0x17a>
 8005f1c:	4b64      	ldr	r3, [pc, #400]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f26:	2b30      	cmp	r3, #48	@ 0x30
 8005f28:	d013      	beq.n	8005f52 <UART_SetConfig+0x16e>
 8005f2a:	2b30      	cmp	r3, #48	@ 0x30
 8005f2c:	d814      	bhi.n	8005f58 <UART_SetConfig+0x174>
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d009      	beq.n	8005f46 <UART_SetConfig+0x162>
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d810      	bhi.n	8005f58 <UART_SetConfig+0x174>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <UART_SetConfig+0x15c>
 8005f3a:	2b10      	cmp	r3, #16
 8005f3c:	d006      	beq.n	8005f4c <UART_SetConfig+0x168>
 8005f3e:	e00b      	b.n	8005f58 <UART_SetConfig+0x174>
 8005f40:	2300      	movs	r3, #0
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e0f2      	b.n	800612c <UART_SetConfig+0x348>
 8005f46:	2302      	movs	r3, #2
 8005f48:	77fb      	strb	r3, [r7, #31]
 8005f4a:	e0ef      	b.n	800612c <UART_SetConfig+0x348>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e0ec      	b.n	800612c <UART_SetConfig+0x348>
 8005f52:	2308      	movs	r3, #8
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e0e9      	b.n	800612c <UART_SetConfig+0x348>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e0e6      	b.n	800612c <UART_SetConfig+0x348>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a56      	ldr	r2, [pc, #344]	@ (80060bc <UART_SetConfig+0x2d8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d120      	bne.n	8005faa <UART_SetConfig+0x1c6>
 8005f68:	4b51      	ldr	r3, [pc, #324]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f72:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f74:	d013      	beq.n	8005f9e <UART_SetConfig+0x1ba>
 8005f76:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f78:	d814      	bhi.n	8005fa4 <UART_SetConfig+0x1c0>
 8005f7a:	2b80      	cmp	r3, #128	@ 0x80
 8005f7c:	d009      	beq.n	8005f92 <UART_SetConfig+0x1ae>
 8005f7e:	2b80      	cmp	r3, #128	@ 0x80
 8005f80:	d810      	bhi.n	8005fa4 <UART_SetConfig+0x1c0>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <UART_SetConfig+0x1a8>
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	d006      	beq.n	8005f98 <UART_SetConfig+0x1b4>
 8005f8a:	e00b      	b.n	8005fa4 <UART_SetConfig+0x1c0>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	e0cc      	b.n	800612c <UART_SetConfig+0x348>
 8005f92:	2302      	movs	r3, #2
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e0c9      	b.n	800612c <UART_SetConfig+0x348>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e0c6      	b.n	800612c <UART_SetConfig+0x348>
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	e0c3      	b.n	800612c <UART_SetConfig+0x348>
 8005fa4:	2310      	movs	r3, #16
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e0c0      	b.n	800612c <UART_SetConfig+0x348>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a44      	ldr	r2, [pc, #272]	@ (80060c0 <UART_SetConfig+0x2dc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d125      	bne.n	8006000 <UART_SetConfig+0x21c>
 8005fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fc2:	d017      	beq.n	8005ff4 <UART_SetConfig+0x210>
 8005fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fc8:	d817      	bhi.n	8005ffa <UART_SetConfig+0x216>
 8005fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fce:	d00b      	beq.n	8005fe8 <UART_SetConfig+0x204>
 8005fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fd4:	d811      	bhi.n	8005ffa <UART_SetConfig+0x216>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <UART_SetConfig+0x1fe>
 8005fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fde:	d006      	beq.n	8005fee <UART_SetConfig+0x20a>
 8005fe0:	e00b      	b.n	8005ffa <UART_SetConfig+0x216>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	77fb      	strb	r3, [r7, #31]
 8005fe6:	e0a1      	b.n	800612c <UART_SetConfig+0x348>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	77fb      	strb	r3, [r7, #31]
 8005fec:	e09e      	b.n	800612c <UART_SetConfig+0x348>
 8005fee:	2304      	movs	r3, #4
 8005ff0:	77fb      	strb	r3, [r7, #31]
 8005ff2:	e09b      	b.n	800612c <UART_SetConfig+0x348>
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e098      	b.n	800612c <UART_SetConfig+0x348>
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	77fb      	strb	r3, [r7, #31]
 8005ffe:	e095      	b.n	800612c <UART_SetConfig+0x348>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2f      	ldr	r2, [pc, #188]	@ (80060c4 <UART_SetConfig+0x2e0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d125      	bne.n	8006056 <UART_SetConfig+0x272>
 800600a:	4b29      	ldr	r3, [pc, #164]	@ (80060b0 <UART_SetConfig+0x2cc>)
 800600c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006010:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006014:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006018:	d017      	beq.n	800604a <UART_SetConfig+0x266>
 800601a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800601e:	d817      	bhi.n	8006050 <UART_SetConfig+0x26c>
 8006020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006024:	d00b      	beq.n	800603e <UART_SetConfig+0x25a>
 8006026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800602a:	d811      	bhi.n	8006050 <UART_SetConfig+0x26c>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <UART_SetConfig+0x254>
 8006030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006034:	d006      	beq.n	8006044 <UART_SetConfig+0x260>
 8006036:	e00b      	b.n	8006050 <UART_SetConfig+0x26c>
 8006038:	2301      	movs	r3, #1
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e076      	b.n	800612c <UART_SetConfig+0x348>
 800603e:	2302      	movs	r3, #2
 8006040:	77fb      	strb	r3, [r7, #31]
 8006042:	e073      	b.n	800612c <UART_SetConfig+0x348>
 8006044:	2304      	movs	r3, #4
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e070      	b.n	800612c <UART_SetConfig+0x348>
 800604a:	2308      	movs	r3, #8
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e06d      	b.n	800612c <UART_SetConfig+0x348>
 8006050:	2310      	movs	r3, #16
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e06a      	b.n	800612c <UART_SetConfig+0x348>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1b      	ldr	r2, [pc, #108]	@ (80060c8 <UART_SetConfig+0x2e4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d138      	bne.n	80060d2 <UART_SetConfig+0x2ee>
 8006060:	4b13      	ldr	r3, [pc, #76]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006066:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800606a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800606e:	d017      	beq.n	80060a0 <UART_SetConfig+0x2bc>
 8006070:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006074:	d82a      	bhi.n	80060cc <UART_SetConfig+0x2e8>
 8006076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800607a:	d00b      	beq.n	8006094 <UART_SetConfig+0x2b0>
 800607c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006080:	d824      	bhi.n	80060cc <UART_SetConfig+0x2e8>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <UART_SetConfig+0x2aa>
 8006086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800608a:	d006      	beq.n	800609a <UART_SetConfig+0x2b6>
 800608c:	e01e      	b.n	80060cc <UART_SetConfig+0x2e8>
 800608e:	2300      	movs	r3, #0
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e04b      	b.n	800612c <UART_SetConfig+0x348>
 8006094:	2302      	movs	r3, #2
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e048      	b.n	800612c <UART_SetConfig+0x348>
 800609a:	2304      	movs	r3, #4
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e045      	b.n	800612c <UART_SetConfig+0x348>
 80060a0:	2308      	movs	r3, #8
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e042      	b.n	800612c <UART_SetConfig+0x348>
 80060a6:	bf00      	nop
 80060a8:	efff69f3 	.word	0xefff69f3
 80060ac:	40011000 	.word	0x40011000
 80060b0:	40023800 	.word	0x40023800
 80060b4:	40004400 	.word	0x40004400
 80060b8:	40004800 	.word	0x40004800
 80060bc:	40004c00 	.word	0x40004c00
 80060c0:	40005000 	.word	0x40005000
 80060c4:	40011400 	.word	0x40011400
 80060c8:	40007800 	.word	0x40007800
 80060cc:	2310      	movs	r3, #16
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e02c      	b.n	800612c <UART_SetConfig+0x348>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a72      	ldr	r2, [pc, #456]	@ (80062a0 <UART_SetConfig+0x4bc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d125      	bne.n	8006128 <UART_SetConfig+0x344>
 80060dc:	4b71      	ldr	r3, [pc, #452]	@ (80062a4 <UART_SetConfig+0x4c0>)
 80060de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80060e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80060ea:	d017      	beq.n	800611c <UART_SetConfig+0x338>
 80060ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80060f0:	d817      	bhi.n	8006122 <UART_SetConfig+0x33e>
 80060f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f6:	d00b      	beq.n	8006110 <UART_SetConfig+0x32c>
 80060f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060fc:	d811      	bhi.n	8006122 <UART_SetConfig+0x33e>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <UART_SetConfig+0x326>
 8006102:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006106:	d006      	beq.n	8006116 <UART_SetConfig+0x332>
 8006108:	e00b      	b.n	8006122 <UART_SetConfig+0x33e>
 800610a:	2300      	movs	r3, #0
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e00d      	b.n	800612c <UART_SetConfig+0x348>
 8006110:	2302      	movs	r3, #2
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e00a      	b.n	800612c <UART_SetConfig+0x348>
 8006116:	2304      	movs	r3, #4
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e007      	b.n	800612c <UART_SetConfig+0x348>
 800611c:	2308      	movs	r3, #8
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e004      	b.n	800612c <UART_SetConfig+0x348>
 8006122:	2310      	movs	r3, #16
 8006124:	77fb      	strb	r3, [r7, #31]
 8006126:	e001      	b.n	800612c <UART_SetConfig+0x348>
 8006128:	2310      	movs	r3, #16
 800612a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006134:	d15b      	bne.n	80061ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006136:	7ffb      	ldrb	r3, [r7, #31]
 8006138:	2b08      	cmp	r3, #8
 800613a:	d828      	bhi.n	800618e <UART_SetConfig+0x3aa>
 800613c:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <UART_SetConfig+0x360>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006169 	.word	0x08006169
 8006148:	08006171 	.word	0x08006171
 800614c:	08006179 	.word	0x08006179
 8006150:	0800618f 	.word	0x0800618f
 8006154:	0800617f 	.word	0x0800617f
 8006158:	0800618f 	.word	0x0800618f
 800615c:	0800618f 	.word	0x0800618f
 8006160:	0800618f 	.word	0x0800618f
 8006164:	08006187 	.word	0x08006187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006168:	f7fe faba 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 800616c:	61b8      	str	r0, [r7, #24]
        break;
 800616e:	e013      	b.n	8006198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006170:	f7fe faca 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8006174:	61b8      	str	r0, [r7, #24]
        break;
 8006176:	e00f      	b.n	8006198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006178:	4b4b      	ldr	r3, [pc, #300]	@ (80062a8 <UART_SetConfig+0x4c4>)
 800617a:	61bb      	str	r3, [r7, #24]
        break;
 800617c:	e00c      	b.n	8006198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800617e:	f7fe f99d 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 8006182:	61b8      	str	r0, [r7, #24]
        break;
 8006184:	e008      	b.n	8006198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800618a:	61bb      	str	r3, [r7, #24]
        break;
 800618c:	e004      	b.n	8006198 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	77bb      	strb	r3, [r7, #30]
        break;
 8006196:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d074      	beq.n	8006288 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	005a      	lsls	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	085b      	lsrs	r3, r3, #1
 80061a8:	441a      	add	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b0f      	cmp	r3, #15
 80061b8:	d916      	bls.n	80061e8 <UART_SetConfig+0x404>
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c0:	d212      	bcs.n	80061e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f023 030f 	bic.w	r3, r3, #15
 80061ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	89fb      	ldrh	r3, [r7, #14]
 80061da:	4313      	orrs	r3, r2
 80061dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	89fa      	ldrh	r2, [r7, #14]
 80061e4:	60da      	str	r2, [r3, #12]
 80061e6:	e04f      	b.n	8006288 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	77bb      	strb	r3, [r7, #30]
 80061ec:	e04c      	b.n	8006288 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061ee:	7ffb      	ldrb	r3, [r7, #31]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d828      	bhi.n	8006246 <UART_SetConfig+0x462>
 80061f4:	a201      	add	r2, pc, #4	@ (adr r2, 80061fc <UART_SetConfig+0x418>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	08006221 	.word	0x08006221
 8006200:	08006229 	.word	0x08006229
 8006204:	08006231 	.word	0x08006231
 8006208:	08006247 	.word	0x08006247
 800620c:	08006237 	.word	0x08006237
 8006210:	08006247 	.word	0x08006247
 8006214:	08006247 	.word	0x08006247
 8006218:	08006247 	.word	0x08006247
 800621c:	0800623f 	.word	0x0800623f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006220:	f7fe fa5e 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8006224:	61b8      	str	r0, [r7, #24]
        break;
 8006226:	e013      	b.n	8006250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006228:	f7fe fa6e 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 800622c:	61b8      	str	r0, [r7, #24]
        break;
 800622e:	e00f      	b.n	8006250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006230:	4b1d      	ldr	r3, [pc, #116]	@ (80062a8 <UART_SetConfig+0x4c4>)
 8006232:	61bb      	str	r3, [r7, #24]
        break;
 8006234:	e00c      	b.n	8006250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006236:	f7fe f941 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 800623a:	61b8      	str	r0, [r7, #24]
        break;
 800623c:	e008      	b.n	8006250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800623e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006242:	61bb      	str	r3, [r7, #24]
        break;
 8006244:	e004      	b.n	8006250 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	77bb      	strb	r3, [r7, #30]
        break;
 800624e:	bf00      	nop
    }

    if (pclk != 0U)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d018      	beq.n	8006288 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	085a      	lsrs	r2, r3, #1
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	441a      	add	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b0f      	cmp	r3, #15
 800626e:	d909      	bls.n	8006284 <UART_SetConfig+0x4a0>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006276:	d205      	bcs.n	8006284 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	b29a      	uxth	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60da      	str	r2, [r3, #12]
 8006282:	e001      	b.n	8006288 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006294:	7fbb      	ldrb	r3, [r7, #30]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	40007c00 	.word	0x40007c00
 80062a4:	40023800 	.word	0x40023800
 80062a8:	00f42400 	.word	0x00f42400

080062ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006340:	f003 0310 	and.w	r3, r3, #16
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01a      	beq.n	80063c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063aa:	d10a      	bne.n	80063c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	605a      	str	r2, [r3, #4]
  }
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b098      	sub	sp, #96	@ 0x60
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006400:	f7fc fb38 	bl	8002a74 <HAL_GetTick>
 8006404:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0308 	and.w	r3, r3, #8
 8006410:	2b08      	cmp	r3, #8
 8006412:	d12e      	bne.n	8006472 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006414:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641c:	2200      	movs	r2, #0
 800641e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f88c 	bl	8006540 <UART_WaitOnFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d021      	beq.n	8006472 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800643c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006442:	653b      	str	r3, [r7, #80]	@ 0x50
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800644c:	647b      	str	r3, [r7, #68]	@ 0x44
 800644e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800645a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e6      	bne.n	800642e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e062      	b.n	8006538 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b04      	cmp	r3, #4
 800647e:	d149      	bne.n	8006514 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006480:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006488:	2200      	movs	r2, #0
 800648a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f856 	bl	8006540 <UART_WaitOnFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d03c      	beq.n	8006514 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	623b      	str	r3, [r7, #32]
   return(result);
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e6      	bne.n	800649a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	60fb      	str	r3, [r7, #12]
   return(result);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0301 	bic.w	r3, r3, #1
 80064e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3308      	adds	r3, #8
 80064ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ec:	61fa      	str	r2, [r7, #28]
 80064ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	69b9      	ldr	r1, [r7, #24]
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	617b      	str	r3, [r7, #20]
   return(result);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e5      	bne.n	80064cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2220      	movs	r2, #32
 8006504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e011      	b.n	8006538 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3758      	adds	r7, #88	@ 0x58
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	4613      	mov	r3, r2
 800654e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006550:	e04f      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d04b      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655a:	f7fc fa8b 	bl	8002a74 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <UART_WaitOnFlagUntilTimeout+0x30>
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e04e      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b00      	cmp	r3, #0
 8006580:	d037      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b80      	cmp	r3, #128	@ 0x80
 8006586:	d034      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b40      	cmp	r3, #64	@ 0x40
 800658c:	d031      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b08      	cmp	r3, #8
 800659a:	d110      	bne.n	80065be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2208      	movs	r2, #8
 80065a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f838 	bl	800661a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2208      	movs	r2, #8
 80065ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e029      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065cc:	d111      	bne.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f81e 	bl	800661a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e00f      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4013      	ands	r3, r2
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	429a      	cmp	r2, r3
 8006600:	bf0c      	ite	eq
 8006602:	2301      	moveq	r3, #1
 8006604:	2300      	movne	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	429a      	cmp	r2, r3
 800660e:	d0a0      	beq.n	8006552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800661a:	b480      	push	{r7}
 800661c:	b095      	sub	sp, #84	@ 0x54
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006640:	643b      	str	r3, [r7, #64]	@ 0x40
 8006642:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006646:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e6      	bne.n	8006622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	61fb      	str	r3, [r7, #28]
   return(result);
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006674:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006676:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800667a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e5      	bne.n	8006654 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800668c:	2b01      	cmp	r3, #1
 800668e:	d118      	bne.n	80066c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	60bb      	str	r3, [r7, #8]
   return(result);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f023 0310 	bic.w	r3, r3, #16
 80066a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6979      	ldr	r1, [r7, #20]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	613b      	str	r3, [r7, #16]
   return(result);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e6      	bne.n	8006690 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066d6:	bf00      	nop
 80066d8:	3754      	adds	r7, #84	@ 0x54
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b08f      	sub	sp, #60	@ 0x3c
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066ee:	2b21      	cmp	r3, #33	@ 0x21
 80066f0:	d14c      	bne.n	800678c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d132      	bne.n	8006764 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	61fb      	str	r3, [r7, #28]
   return(result);
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800671c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800671e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e6      	bne.n	80066fe <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	60bb      	str	r3, [r7, #8]
   return(result);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006744:	633b      	str	r3, [r7, #48]	@ 0x30
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6979      	ldr	r1, [r7, #20]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	613b      	str	r3, [r7, #16]
   return(result);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e6      	bne.n	8006730 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006762:	e013      	b.n	800678c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800678c:	bf00      	nop
 800678e:	373c      	adds	r7, #60	@ 0x3c
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006798:	b480      	push	{r7}
 800679a:	b091      	sub	sp, #68	@ 0x44
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067a4:	2b21      	cmp	r3, #33	@ 0x21
 80067a6:	d151      	bne.n	800684c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d132      	bne.n	800681a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	623b      	str	r3, [r7, #32]
   return(result);
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80067d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e6      	bne.n	80067b4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006808:	69b9      	ldr	r1, [r7, #24]
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	617b      	str	r3, [r7, #20]
   return(result);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e6      	bne.n	80067e6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006818:	e018      	b.n	800684c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800682e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006834:	1c9a      	adds	r2, r3, #2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800684c:	bf00      	nop
 800684e:	3744      	adds	r7, #68	@ 0x44
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <siprintf>:
 8006858:	b40e      	push	{r1, r2, r3}
 800685a:	b500      	push	{lr}
 800685c:	b09c      	sub	sp, #112	@ 0x70
 800685e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006860:	9002      	str	r0, [sp, #8]
 8006862:	9006      	str	r0, [sp, #24]
 8006864:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006868:	4809      	ldr	r0, [pc, #36]	@ (8006890 <siprintf+0x38>)
 800686a:	9107      	str	r1, [sp, #28]
 800686c:	9104      	str	r1, [sp, #16]
 800686e:	4909      	ldr	r1, [pc, #36]	@ (8006894 <siprintf+0x3c>)
 8006870:	f853 2b04 	ldr.w	r2, [r3], #4
 8006874:	9105      	str	r1, [sp, #20]
 8006876:	6800      	ldr	r0, [r0, #0]
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	a902      	add	r1, sp, #8
 800687c:	f000 f994 	bl	8006ba8 <_svfiprintf_r>
 8006880:	9b02      	ldr	r3, [sp, #8]
 8006882:	2200      	movs	r2, #0
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	b01c      	add	sp, #112	@ 0x70
 8006888:	f85d eb04 	ldr.w	lr, [sp], #4
 800688c:	b003      	add	sp, #12
 800688e:	4770      	bx	lr
 8006890:	20000098 	.word	0x20000098
 8006894:	ffff0208 	.word	0xffff0208

08006898 <memset>:
 8006898:	4402      	add	r2, r0
 800689a:	4603      	mov	r3, r0
 800689c:	4293      	cmp	r3, r2
 800689e:	d100      	bne.n	80068a2 <memset+0xa>
 80068a0:	4770      	bx	lr
 80068a2:	f803 1b01 	strb.w	r1, [r3], #1
 80068a6:	e7f9      	b.n	800689c <memset+0x4>

080068a8 <__errno>:
 80068a8:	4b01      	ldr	r3, [pc, #4]	@ (80068b0 <__errno+0x8>)
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	20000098 	.word	0x20000098

080068b4 <__libc_init_array>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4d0d      	ldr	r5, [pc, #52]	@ (80068ec <__libc_init_array+0x38>)
 80068b8:	4c0d      	ldr	r4, [pc, #52]	@ (80068f0 <__libc_init_array+0x3c>)
 80068ba:	1b64      	subs	r4, r4, r5
 80068bc:	10a4      	asrs	r4, r4, #2
 80068be:	2600      	movs	r6, #0
 80068c0:	42a6      	cmp	r6, r4
 80068c2:	d109      	bne.n	80068d8 <__libc_init_array+0x24>
 80068c4:	4d0b      	ldr	r5, [pc, #44]	@ (80068f4 <__libc_init_array+0x40>)
 80068c6:	4c0c      	ldr	r4, [pc, #48]	@ (80068f8 <__libc_init_array+0x44>)
 80068c8:	f001 fa7e 	bl	8007dc8 <_init>
 80068cc:	1b64      	subs	r4, r4, r5
 80068ce:	10a4      	asrs	r4, r4, #2
 80068d0:	2600      	movs	r6, #0
 80068d2:	42a6      	cmp	r6, r4
 80068d4:	d105      	bne.n	80068e2 <__libc_init_array+0x2e>
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068dc:	4798      	blx	r3
 80068de:	3601      	adds	r6, #1
 80068e0:	e7ee      	b.n	80068c0 <__libc_init_array+0xc>
 80068e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e6:	4798      	blx	r3
 80068e8:	3601      	adds	r6, #1
 80068ea:	e7f2      	b.n	80068d2 <__libc_init_array+0x1e>
 80068ec:	08008010 	.word	0x08008010
 80068f0:	08008010 	.word	0x08008010
 80068f4:	08008010 	.word	0x08008010
 80068f8:	08008014 	.word	0x08008014

080068fc <__retarget_lock_acquire_recursive>:
 80068fc:	4770      	bx	lr

080068fe <__retarget_lock_release_recursive>:
 80068fe:	4770      	bx	lr

08006900 <_free_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4605      	mov	r5, r0
 8006904:	2900      	cmp	r1, #0
 8006906:	d041      	beq.n	800698c <_free_r+0x8c>
 8006908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800690c:	1f0c      	subs	r4, r1, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	bfb8      	it	lt
 8006912:	18e4      	addlt	r4, r4, r3
 8006914:	f000 f8e0 	bl	8006ad8 <__malloc_lock>
 8006918:	4a1d      	ldr	r2, [pc, #116]	@ (8006990 <_free_r+0x90>)
 800691a:	6813      	ldr	r3, [r2, #0]
 800691c:	b933      	cbnz	r3, 800692c <_free_r+0x2c>
 800691e:	6063      	str	r3, [r4, #4]
 8006920:	6014      	str	r4, [r2, #0]
 8006922:	4628      	mov	r0, r5
 8006924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006928:	f000 b8dc 	b.w	8006ae4 <__malloc_unlock>
 800692c:	42a3      	cmp	r3, r4
 800692e:	d908      	bls.n	8006942 <_free_r+0x42>
 8006930:	6820      	ldr	r0, [r4, #0]
 8006932:	1821      	adds	r1, r4, r0
 8006934:	428b      	cmp	r3, r1
 8006936:	bf01      	itttt	eq
 8006938:	6819      	ldreq	r1, [r3, #0]
 800693a:	685b      	ldreq	r3, [r3, #4]
 800693c:	1809      	addeq	r1, r1, r0
 800693e:	6021      	streq	r1, [r4, #0]
 8006940:	e7ed      	b.n	800691e <_free_r+0x1e>
 8006942:	461a      	mov	r2, r3
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	b10b      	cbz	r3, 800694c <_free_r+0x4c>
 8006948:	42a3      	cmp	r3, r4
 800694a:	d9fa      	bls.n	8006942 <_free_r+0x42>
 800694c:	6811      	ldr	r1, [r2, #0]
 800694e:	1850      	adds	r0, r2, r1
 8006950:	42a0      	cmp	r0, r4
 8006952:	d10b      	bne.n	800696c <_free_r+0x6c>
 8006954:	6820      	ldr	r0, [r4, #0]
 8006956:	4401      	add	r1, r0
 8006958:	1850      	adds	r0, r2, r1
 800695a:	4283      	cmp	r3, r0
 800695c:	6011      	str	r1, [r2, #0]
 800695e:	d1e0      	bne.n	8006922 <_free_r+0x22>
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	6053      	str	r3, [r2, #4]
 8006966:	4408      	add	r0, r1
 8006968:	6010      	str	r0, [r2, #0]
 800696a:	e7da      	b.n	8006922 <_free_r+0x22>
 800696c:	d902      	bls.n	8006974 <_free_r+0x74>
 800696e:	230c      	movs	r3, #12
 8006970:	602b      	str	r3, [r5, #0]
 8006972:	e7d6      	b.n	8006922 <_free_r+0x22>
 8006974:	6820      	ldr	r0, [r4, #0]
 8006976:	1821      	adds	r1, r4, r0
 8006978:	428b      	cmp	r3, r1
 800697a:	bf04      	itt	eq
 800697c:	6819      	ldreq	r1, [r3, #0]
 800697e:	685b      	ldreq	r3, [r3, #4]
 8006980:	6063      	str	r3, [r4, #4]
 8006982:	bf04      	itt	eq
 8006984:	1809      	addeq	r1, r1, r0
 8006986:	6021      	streq	r1, [r4, #0]
 8006988:	6054      	str	r4, [r2, #4]
 800698a:	e7ca      	b.n	8006922 <_free_r+0x22>
 800698c:	bd38      	pop	{r3, r4, r5, pc}
 800698e:	bf00      	nop
 8006990:	20007478 	.word	0x20007478

08006994 <sbrk_aligned>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4e0f      	ldr	r6, [pc, #60]	@ (80069d4 <sbrk_aligned+0x40>)
 8006998:	460c      	mov	r4, r1
 800699a:	6831      	ldr	r1, [r6, #0]
 800699c:	4605      	mov	r5, r0
 800699e:	b911      	cbnz	r1, 80069a6 <sbrk_aligned+0x12>
 80069a0:	f000 fba6 	bl	80070f0 <_sbrk_r>
 80069a4:	6030      	str	r0, [r6, #0]
 80069a6:	4621      	mov	r1, r4
 80069a8:	4628      	mov	r0, r5
 80069aa:	f000 fba1 	bl	80070f0 <_sbrk_r>
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	d103      	bne.n	80069ba <sbrk_aligned+0x26>
 80069b2:	f04f 34ff 	mov.w	r4, #4294967295
 80069b6:	4620      	mov	r0, r4
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	1cc4      	adds	r4, r0, #3
 80069bc:	f024 0403 	bic.w	r4, r4, #3
 80069c0:	42a0      	cmp	r0, r4
 80069c2:	d0f8      	beq.n	80069b6 <sbrk_aligned+0x22>
 80069c4:	1a21      	subs	r1, r4, r0
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 fb92 	bl	80070f0 <_sbrk_r>
 80069cc:	3001      	adds	r0, #1
 80069ce:	d1f2      	bne.n	80069b6 <sbrk_aligned+0x22>
 80069d0:	e7ef      	b.n	80069b2 <sbrk_aligned+0x1e>
 80069d2:	bf00      	nop
 80069d4:	20007474 	.word	0x20007474

080069d8 <_malloc_r>:
 80069d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069dc:	1ccd      	adds	r5, r1, #3
 80069de:	f025 0503 	bic.w	r5, r5, #3
 80069e2:	3508      	adds	r5, #8
 80069e4:	2d0c      	cmp	r5, #12
 80069e6:	bf38      	it	cc
 80069e8:	250c      	movcc	r5, #12
 80069ea:	2d00      	cmp	r5, #0
 80069ec:	4606      	mov	r6, r0
 80069ee:	db01      	blt.n	80069f4 <_malloc_r+0x1c>
 80069f0:	42a9      	cmp	r1, r5
 80069f2:	d904      	bls.n	80069fe <_malloc_r+0x26>
 80069f4:	230c      	movs	r3, #12
 80069f6:	6033      	str	r3, [r6, #0]
 80069f8:	2000      	movs	r0, #0
 80069fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ad4 <_malloc_r+0xfc>
 8006a02:	f000 f869 	bl	8006ad8 <__malloc_lock>
 8006a06:	f8d8 3000 	ldr.w	r3, [r8]
 8006a0a:	461c      	mov	r4, r3
 8006a0c:	bb44      	cbnz	r4, 8006a60 <_malloc_r+0x88>
 8006a0e:	4629      	mov	r1, r5
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7ff ffbf 	bl	8006994 <sbrk_aligned>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	4604      	mov	r4, r0
 8006a1a:	d158      	bne.n	8006ace <_malloc_r+0xf6>
 8006a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8006a20:	4627      	mov	r7, r4
 8006a22:	2f00      	cmp	r7, #0
 8006a24:	d143      	bne.n	8006aae <_malloc_r+0xd6>
 8006a26:	2c00      	cmp	r4, #0
 8006a28:	d04b      	beq.n	8006ac2 <_malloc_r+0xea>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	4630      	mov	r0, r6
 8006a30:	eb04 0903 	add.w	r9, r4, r3
 8006a34:	f000 fb5c 	bl	80070f0 <_sbrk_r>
 8006a38:	4581      	cmp	r9, r0
 8006a3a:	d142      	bne.n	8006ac2 <_malloc_r+0xea>
 8006a3c:	6821      	ldr	r1, [r4, #0]
 8006a3e:	1a6d      	subs	r5, r5, r1
 8006a40:	4629      	mov	r1, r5
 8006a42:	4630      	mov	r0, r6
 8006a44:	f7ff ffa6 	bl	8006994 <sbrk_aligned>
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d03a      	beq.n	8006ac2 <_malloc_r+0xea>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	442b      	add	r3, r5
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	f8d8 3000 	ldr.w	r3, [r8]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	bb62      	cbnz	r2, 8006ab4 <_malloc_r+0xdc>
 8006a5a:	f8c8 7000 	str.w	r7, [r8]
 8006a5e:	e00f      	b.n	8006a80 <_malloc_r+0xa8>
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	1b52      	subs	r2, r2, r5
 8006a64:	d420      	bmi.n	8006aa8 <_malloc_r+0xd0>
 8006a66:	2a0b      	cmp	r2, #11
 8006a68:	d917      	bls.n	8006a9a <_malloc_r+0xc2>
 8006a6a:	1961      	adds	r1, r4, r5
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	6025      	str	r5, [r4, #0]
 8006a70:	bf18      	it	ne
 8006a72:	6059      	strne	r1, [r3, #4]
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	bf08      	it	eq
 8006a78:	f8c8 1000 	streq.w	r1, [r8]
 8006a7c:	5162      	str	r2, [r4, r5]
 8006a7e:	604b      	str	r3, [r1, #4]
 8006a80:	4630      	mov	r0, r6
 8006a82:	f000 f82f 	bl	8006ae4 <__malloc_unlock>
 8006a86:	f104 000b 	add.w	r0, r4, #11
 8006a8a:	1d23      	adds	r3, r4, #4
 8006a8c:	f020 0007 	bic.w	r0, r0, #7
 8006a90:	1ac2      	subs	r2, r0, r3
 8006a92:	bf1c      	itt	ne
 8006a94:	1a1b      	subne	r3, r3, r0
 8006a96:	50a3      	strne	r3, [r4, r2]
 8006a98:	e7af      	b.n	80069fa <_malloc_r+0x22>
 8006a9a:	6862      	ldr	r2, [r4, #4]
 8006a9c:	42a3      	cmp	r3, r4
 8006a9e:	bf0c      	ite	eq
 8006aa0:	f8c8 2000 	streq.w	r2, [r8]
 8006aa4:	605a      	strne	r2, [r3, #4]
 8006aa6:	e7eb      	b.n	8006a80 <_malloc_r+0xa8>
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	6864      	ldr	r4, [r4, #4]
 8006aac:	e7ae      	b.n	8006a0c <_malloc_r+0x34>
 8006aae:	463c      	mov	r4, r7
 8006ab0:	687f      	ldr	r7, [r7, #4]
 8006ab2:	e7b6      	b.n	8006a22 <_malloc_r+0x4a>
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	d1fb      	bne.n	8006ab4 <_malloc_r+0xdc>
 8006abc:	2300      	movs	r3, #0
 8006abe:	6053      	str	r3, [r2, #4]
 8006ac0:	e7de      	b.n	8006a80 <_malloc_r+0xa8>
 8006ac2:	230c      	movs	r3, #12
 8006ac4:	6033      	str	r3, [r6, #0]
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f000 f80c 	bl	8006ae4 <__malloc_unlock>
 8006acc:	e794      	b.n	80069f8 <_malloc_r+0x20>
 8006ace:	6005      	str	r5, [r0, #0]
 8006ad0:	e7d6      	b.n	8006a80 <_malloc_r+0xa8>
 8006ad2:	bf00      	nop
 8006ad4:	20007478 	.word	0x20007478

08006ad8 <__malloc_lock>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	@ (8006ae0 <__malloc_lock+0x8>)
 8006ada:	f7ff bf0f 	b.w	80068fc <__retarget_lock_acquire_recursive>
 8006ade:	bf00      	nop
 8006ae0:	20007470 	.word	0x20007470

08006ae4 <__malloc_unlock>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	@ (8006aec <__malloc_unlock+0x8>)
 8006ae6:	f7ff bf0a 	b.w	80068fe <__retarget_lock_release_recursive>
 8006aea:	bf00      	nop
 8006aec:	20007470 	.word	0x20007470

08006af0 <__ssputs_r>:
 8006af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	688e      	ldr	r6, [r1, #8]
 8006af6:	461f      	mov	r7, r3
 8006af8:	42be      	cmp	r6, r7
 8006afa:	680b      	ldr	r3, [r1, #0]
 8006afc:	4682      	mov	sl, r0
 8006afe:	460c      	mov	r4, r1
 8006b00:	4690      	mov	r8, r2
 8006b02:	d82d      	bhi.n	8006b60 <__ssputs_r+0x70>
 8006b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b0c:	d026      	beq.n	8006b5c <__ssputs_r+0x6c>
 8006b0e:	6965      	ldr	r5, [r4, #20]
 8006b10:	6909      	ldr	r1, [r1, #16]
 8006b12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b16:	eba3 0901 	sub.w	r9, r3, r1
 8006b1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b1e:	1c7b      	adds	r3, r7, #1
 8006b20:	444b      	add	r3, r9
 8006b22:	106d      	asrs	r5, r5, #1
 8006b24:	429d      	cmp	r5, r3
 8006b26:	bf38      	it	cc
 8006b28:	461d      	movcc	r5, r3
 8006b2a:	0553      	lsls	r3, r2, #21
 8006b2c:	d527      	bpl.n	8006b7e <__ssputs_r+0x8e>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	f7ff ff52 	bl	80069d8 <_malloc_r>
 8006b34:	4606      	mov	r6, r0
 8006b36:	b360      	cbz	r0, 8006b92 <__ssputs_r+0xa2>
 8006b38:	6921      	ldr	r1, [r4, #16]
 8006b3a:	464a      	mov	r2, r9
 8006b3c:	f000 fae8 	bl	8007110 <memcpy>
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	6126      	str	r6, [r4, #16]
 8006b4e:	6165      	str	r5, [r4, #20]
 8006b50:	444e      	add	r6, r9
 8006b52:	eba5 0509 	sub.w	r5, r5, r9
 8006b56:	6026      	str	r6, [r4, #0]
 8006b58:	60a5      	str	r5, [r4, #8]
 8006b5a:	463e      	mov	r6, r7
 8006b5c:	42be      	cmp	r6, r7
 8006b5e:	d900      	bls.n	8006b62 <__ssputs_r+0x72>
 8006b60:	463e      	mov	r6, r7
 8006b62:	6820      	ldr	r0, [r4, #0]
 8006b64:	4632      	mov	r2, r6
 8006b66:	4641      	mov	r1, r8
 8006b68:	f000 faa8 	bl	80070bc <memmove>
 8006b6c:	68a3      	ldr	r3, [r4, #8]
 8006b6e:	1b9b      	subs	r3, r3, r6
 8006b70:	60a3      	str	r3, [r4, #8]
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	4433      	add	r3, r6
 8006b76:	6023      	str	r3, [r4, #0]
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7e:	462a      	mov	r2, r5
 8006b80:	f000 fad4 	bl	800712c <_realloc_r>
 8006b84:	4606      	mov	r6, r0
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d1e0      	bne.n	8006b4c <__ssputs_r+0x5c>
 8006b8a:	6921      	ldr	r1, [r4, #16]
 8006b8c:	4650      	mov	r0, sl
 8006b8e:	f7ff feb7 	bl	8006900 <_free_r>
 8006b92:	230c      	movs	r3, #12
 8006b94:	f8ca 3000 	str.w	r3, [sl]
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	e7e9      	b.n	8006b7a <__ssputs_r+0x8a>
	...

08006ba8 <_svfiprintf_r>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	4698      	mov	r8, r3
 8006bae:	898b      	ldrh	r3, [r1, #12]
 8006bb0:	061b      	lsls	r3, r3, #24
 8006bb2:	b09d      	sub	sp, #116	@ 0x74
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	4614      	mov	r4, r2
 8006bba:	d510      	bpl.n	8006bde <_svfiprintf_r+0x36>
 8006bbc:	690b      	ldr	r3, [r1, #16]
 8006bbe:	b973      	cbnz	r3, 8006bde <_svfiprintf_r+0x36>
 8006bc0:	2140      	movs	r1, #64	@ 0x40
 8006bc2:	f7ff ff09 	bl	80069d8 <_malloc_r>
 8006bc6:	6028      	str	r0, [r5, #0]
 8006bc8:	6128      	str	r0, [r5, #16]
 8006bca:	b930      	cbnz	r0, 8006bda <_svfiprintf_r+0x32>
 8006bcc:	230c      	movs	r3, #12
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd4:	b01d      	add	sp, #116	@ 0x74
 8006bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bda:	2340      	movs	r3, #64	@ 0x40
 8006bdc:	616b      	str	r3, [r5, #20]
 8006bde:	2300      	movs	r3, #0
 8006be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be2:	2320      	movs	r3, #32
 8006be4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bec:	2330      	movs	r3, #48	@ 0x30
 8006bee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d8c <_svfiprintf_r+0x1e4>
 8006bf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bf6:	f04f 0901 	mov.w	r9, #1
 8006bfa:	4623      	mov	r3, r4
 8006bfc:	469a      	mov	sl, r3
 8006bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c02:	b10a      	cbz	r2, 8006c08 <_svfiprintf_r+0x60>
 8006c04:	2a25      	cmp	r2, #37	@ 0x25
 8006c06:	d1f9      	bne.n	8006bfc <_svfiprintf_r+0x54>
 8006c08:	ebba 0b04 	subs.w	fp, sl, r4
 8006c0c:	d00b      	beq.n	8006c26 <_svfiprintf_r+0x7e>
 8006c0e:	465b      	mov	r3, fp
 8006c10:	4622      	mov	r2, r4
 8006c12:	4629      	mov	r1, r5
 8006c14:	4638      	mov	r0, r7
 8006c16:	f7ff ff6b 	bl	8006af0 <__ssputs_r>
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f000 80a7 	beq.w	8006d6e <_svfiprintf_r+0x1c6>
 8006c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c22:	445a      	add	r2, fp
 8006c24:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c26:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 809f 	beq.w	8006d6e <_svfiprintf_r+0x1c6>
 8006c30:	2300      	movs	r3, #0
 8006c32:	f04f 32ff 	mov.w	r2, #4294967295
 8006c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c3a:	f10a 0a01 	add.w	sl, sl, #1
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	9307      	str	r3, [sp, #28]
 8006c42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c46:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c48:	4654      	mov	r4, sl
 8006c4a:	2205      	movs	r2, #5
 8006c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c50:	484e      	ldr	r0, [pc, #312]	@ (8006d8c <_svfiprintf_r+0x1e4>)
 8006c52:	f7f9 faf5 	bl	8000240 <memchr>
 8006c56:	9a04      	ldr	r2, [sp, #16]
 8006c58:	b9d8      	cbnz	r0, 8006c92 <_svfiprintf_r+0xea>
 8006c5a:	06d0      	lsls	r0, r2, #27
 8006c5c:	bf44      	itt	mi
 8006c5e:	2320      	movmi	r3, #32
 8006c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c64:	0711      	lsls	r1, r2, #28
 8006c66:	bf44      	itt	mi
 8006c68:	232b      	movmi	r3, #43	@ 0x2b
 8006c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c74:	d015      	beq.n	8006ca2 <_svfiprintf_r+0xfa>
 8006c76:	9a07      	ldr	r2, [sp, #28]
 8006c78:	4654      	mov	r4, sl
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	f04f 0c0a 	mov.w	ip, #10
 8006c80:	4621      	mov	r1, r4
 8006c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c86:	3b30      	subs	r3, #48	@ 0x30
 8006c88:	2b09      	cmp	r3, #9
 8006c8a:	d94b      	bls.n	8006d24 <_svfiprintf_r+0x17c>
 8006c8c:	b1b0      	cbz	r0, 8006cbc <_svfiprintf_r+0x114>
 8006c8e:	9207      	str	r2, [sp, #28]
 8006c90:	e014      	b.n	8006cbc <_svfiprintf_r+0x114>
 8006c92:	eba0 0308 	sub.w	r3, r0, r8
 8006c96:	fa09 f303 	lsl.w	r3, r9, r3
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	46a2      	mov	sl, r4
 8006ca0:	e7d2      	b.n	8006c48 <_svfiprintf_r+0xa0>
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	1d19      	adds	r1, r3, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	9103      	str	r1, [sp, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfbb      	ittet	lt
 8006cae:	425b      	neglt	r3, r3
 8006cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8006cb4:	9307      	strge	r3, [sp, #28]
 8006cb6:	9307      	strlt	r3, [sp, #28]
 8006cb8:	bfb8      	it	lt
 8006cba:	9204      	strlt	r2, [sp, #16]
 8006cbc:	7823      	ldrb	r3, [r4, #0]
 8006cbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cc0:	d10a      	bne.n	8006cd8 <_svfiprintf_r+0x130>
 8006cc2:	7863      	ldrb	r3, [r4, #1]
 8006cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cc6:	d132      	bne.n	8006d2e <_svfiprintf_r+0x186>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	1d1a      	adds	r2, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	9203      	str	r2, [sp, #12]
 8006cd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cd4:	3402      	adds	r4, #2
 8006cd6:	9305      	str	r3, [sp, #20]
 8006cd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d9c <_svfiprintf_r+0x1f4>
 8006cdc:	7821      	ldrb	r1, [r4, #0]
 8006cde:	2203      	movs	r2, #3
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	f7f9 faad 	bl	8000240 <memchr>
 8006ce6:	b138      	cbz	r0, 8006cf8 <_svfiprintf_r+0x150>
 8006ce8:	9b04      	ldr	r3, [sp, #16]
 8006cea:	eba0 000a 	sub.w	r0, r0, sl
 8006cee:	2240      	movs	r2, #64	@ 0x40
 8006cf0:	4082      	lsls	r2, r0
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	3401      	adds	r4, #1
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfc:	4824      	ldr	r0, [pc, #144]	@ (8006d90 <_svfiprintf_r+0x1e8>)
 8006cfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d02:	2206      	movs	r2, #6
 8006d04:	f7f9 fa9c 	bl	8000240 <memchr>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d036      	beq.n	8006d7a <_svfiprintf_r+0x1d2>
 8006d0c:	4b21      	ldr	r3, [pc, #132]	@ (8006d94 <_svfiprintf_r+0x1ec>)
 8006d0e:	bb1b      	cbnz	r3, 8006d58 <_svfiprintf_r+0x1b0>
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	3307      	adds	r3, #7
 8006d14:	f023 0307 	bic.w	r3, r3, #7
 8006d18:	3308      	adds	r3, #8
 8006d1a:	9303      	str	r3, [sp, #12]
 8006d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d1e:	4433      	add	r3, r6
 8006d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d22:	e76a      	b.n	8006bfa <_svfiprintf_r+0x52>
 8006d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d28:	460c      	mov	r4, r1
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	e7a8      	b.n	8006c80 <_svfiprintf_r+0xd8>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	3401      	adds	r4, #1
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	4619      	mov	r1, r3
 8006d36:	f04f 0c0a 	mov.w	ip, #10
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d40:	3a30      	subs	r2, #48	@ 0x30
 8006d42:	2a09      	cmp	r2, #9
 8006d44:	d903      	bls.n	8006d4e <_svfiprintf_r+0x1a6>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0c6      	beq.n	8006cd8 <_svfiprintf_r+0x130>
 8006d4a:	9105      	str	r1, [sp, #20]
 8006d4c:	e7c4      	b.n	8006cd8 <_svfiprintf_r+0x130>
 8006d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d52:	4604      	mov	r4, r0
 8006d54:	2301      	movs	r3, #1
 8006d56:	e7f0      	b.n	8006d3a <_svfiprintf_r+0x192>
 8006d58:	ab03      	add	r3, sp, #12
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	462a      	mov	r2, r5
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d98 <_svfiprintf_r+0x1f0>)
 8006d60:	a904      	add	r1, sp, #16
 8006d62:	4638      	mov	r0, r7
 8006d64:	f3af 8000 	nop.w
 8006d68:	1c42      	adds	r2, r0, #1
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	d1d6      	bne.n	8006d1c <_svfiprintf_r+0x174>
 8006d6e:	89ab      	ldrh	r3, [r5, #12]
 8006d70:	065b      	lsls	r3, r3, #25
 8006d72:	f53f af2d 	bmi.w	8006bd0 <_svfiprintf_r+0x28>
 8006d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d78:	e72c      	b.n	8006bd4 <_svfiprintf_r+0x2c>
 8006d7a:	ab03      	add	r3, sp, #12
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	462a      	mov	r2, r5
 8006d80:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <_svfiprintf_r+0x1f0>)
 8006d82:	a904      	add	r1, sp, #16
 8006d84:	4638      	mov	r0, r7
 8006d86:	f000 f879 	bl	8006e7c <_printf_i>
 8006d8a:	e7ed      	b.n	8006d68 <_svfiprintf_r+0x1c0>
 8006d8c:	08007dfc 	.word	0x08007dfc
 8006d90:	08007e06 	.word	0x08007e06
 8006d94:	00000000 	.word	0x00000000
 8006d98:	08006af1 	.word	0x08006af1
 8006d9c:	08007e02 	.word	0x08007e02

08006da0 <_printf_common>:
 8006da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	4616      	mov	r6, r2
 8006da6:	4698      	mov	r8, r3
 8006da8:	688a      	ldr	r2, [r1, #8]
 8006daa:	690b      	ldr	r3, [r1, #16]
 8006dac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	bfb8      	it	lt
 8006db4:	4613      	movlt	r3, r2
 8006db6:	6033      	str	r3, [r6, #0]
 8006db8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006dbc:	4607      	mov	r7, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	b10a      	cbz	r2, 8006dc6 <_printf_common+0x26>
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	6033      	str	r3, [r6, #0]
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	0699      	lsls	r1, r3, #26
 8006dca:	bf42      	ittt	mi
 8006dcc:	6833      	ldrmi	r3, [r6, #0]
 8006dce:	3302      	addmi	r3, #2
 8006dd0:	6033      	strmi	r3, [r6, #0]
 8006dd2:	6825      	ldr	r5, [r4, #0]
 8006dd4:	f015 0506 	ands.w	r5, r5, #6
 8006dd8:	d106      	bne.n	8006de8 <_printf_common+0x48>
 8006dda:	f104 0a19 	add.w	sl, r4, #25
 8006dde:	68e3      	ldr	r3, [r4, #12]
 8006de0:	6832      	ldr	r2, [r6, #0]
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	42ab      	cmp	r3, r5
 8006de6:	dc26      	bgt.n	8006e36 <_printf_common+0x96>
 8006de8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	3b00      	subs	r3, #0
 8006df0:	bf18      	it	ne
 8006df2:	2301      	movne	r3, #1
 8006df4:	0692      	lsls	r2, r2, #26
 8006df6:	d42b      	bmi.n	8006e50 <_printf_common+0xb0>
 8006df8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	4638      	mov	r0, r7
 8006e00:	47c8      	blx	r9
 8006e02:	3001      	adds	r0, #1
 8006e04:	d01e      	beq.n	8006e44 <_printf_common+0xa4>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	6922      	ldr	r2, [r4, #16]
 8006e0a:	f003 0306 	and.w	r3, r3, #6
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	bf02      	ittt	eq
 8006e12:	68e5      	ldreq	r5, [r4, #12]
 8006e14:	6833      	ldreq	r3, [r6, #0]
 8006e16:	1aed      	subeq	r5, r5, r3
 8006e18:	68a3      	ldr	r3, [r4, #8]
 8006e1a:	bf0c      	ite	eq
 8006e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e20:	2500      	movne	r5, #0
 8006e22:	4293      	cmp	r3, r2
 8006e24:	bfc4      	itt	gt
 8006e26:	1a9b      	subgt	r3, r3, r2
 8006e28:	18ed      	addgt	r5, r5, r3
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	341a      	adds	r4, #26
 8006e2e:	42b5      	cmp	r5, r6
 8006e30:	d11a      	bne.n	8006e68 <_printf_common+0xc8>
 8006e32:	2000      	movs	r0, #0
 8006e34:	e008      	b.n	8006e48 <_printf_common+0xa8>
 8006e36:	2301      	movs	r3, #1
 8006e38:	4652      	mov	r2, sl
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	47c8      	blx	r9
 8006e40:	3001      	adds	r0, #1
 8006e42:	d103      	bne.n	8006e4c <_printf_common+0xac>
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	e7c6      	b.n	8006dde <_printf_common+0x3e>
 8006e50:	18e1      	adds	r1, r4, r3
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	2030      	movs	r0, #48	@ 0x30
 8006e56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e5a:	4422      	add	r2, r4
 8006e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e64:	3302      	adds	r3, #2
 8006e66:	e7c7      	b.n	8006df8 <_printf_common+0x58>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	4638      	mov	r0, r7
 8006e70:	47c8      	blx	r9
 8006e72:	3001      	adds	r0, #1
 8006e74:	d0e6      	beq.n	8006e44 <_printf_common+0xa4>
 8006e76:	3601      	adds	r6, #1
 8006e78:	e7d9      	b.n	8006e2e <_printf_common+0x8e>
	...

08006e7c <_printf_i>:
 8006e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e80:	7e0f      	ldrb	r7, [r1, #24]
 8006e82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e84:	2f78      	cmp	r7, #120	@ 0x78
 8006e86:	4691      	mov	r9, r2
 8006e88:	4680      	mov	r8, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	469a      	mov	sl, r3
 8006e8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e92:	d807      	bhi.n	8006ea4 <_printf_i+0x28>
 8006e94:	2f62      	cmp	r7, #98	@ 0x62
 8006e96:	d80a      	bhi.n	8006eae <_printf_i+0x32>
 8006e98:	2f00      	cmp	r7, #0
 8006e9a:	f000 80d2 	beq.w	8007042 <_printf_i+0x1c6>
 8006e9e:	2f58      	cmp	r7, #88	@ 0x58
 8006ea0:	f000 80b9 	beq.w	8007016 <_printf_i+0x19a>
 8006ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ea8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006eac:	e03a      	b.n	8006f24 <_printf_i+0xa8>
 8006eae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006eb2:	2b15      	cmp	r3, #21
 8006eb4:	d8f6      	bhi.n	8006ea4 <_printf_i+0x28>
 8006eb6:	a101      	add	r1, pc, #4	@ (adr r1, 8006ebc <_printf_i+0x40>)
 8006eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ebc:	08006f15 	.word	0x08006f15
 8006ec0:	08006f29 	.word	0x08006f29
 8006ec4:	08006ea5 	.word	0x08006ea5
 8006ec8:	08006ea5 	.word	0x08006ea5
 8006ecc:	08006ea5 	.word	0x08006ea5
 8006ed0:	08006ea5 	.word	0x08006ea5
 8006ed4:	08006f29 	.word	0x08006f29
 8006ed8:	08006ea5 	.word	0x08006ea5
 8006edc:	08006ea5 	.word	0x08006ea5
 8006ee0:	08006ea5 	.word	0x08006ea5
 8006ee4:	08006ea5 	.word	0x08006ea5
 8006ee8:	08007029 	.word	0x08007029
 8006eec:	08006f53 	.word	0x08006f53
 8006ef0:	08006fe3 	.word	0x08006fe3
 8006ef4:	08006ea5 	.word	0x08006ea5
 8006ef8:	08006ea5 	.word	0x08006ea5
 8006efc:	0800704b 	.word	0x0800704b
 8006f00:	08006ea5 	.word	0x08006ea5
 8006f04:	08006f53 	.word	0x08006f53
 8006f08:	08006ea5 	.word	0x08006ea5
 8006f0c:	08006ea5 	.word	0x08006ea5
 8006f10:	08006feb 	.word	0x08006feb
 8006f14:	6833      	ldr	r3, [r6, #0]
 8006f16:	1d1a      	adds	r2, r3, #4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6032      	str	r2, [r6, #0]
 8006f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f24:	2301      	movs	r3, #1
 8006f26:	e09d      	b.n	8007064 <_printf_i+0x1e8>
 8006f28:	6833      	ldr	r3, [r6, #0]
 8006f2a:	6820      	ldr	r0, [r4, #0]
 8006f2c:	1d19      	adds	r1, r3, #4
 8006f2e:	6031      	str	r1, [r6, #0]
 8006f30:	0606      	lsls	r6, r0, #24
 8006f32:	d501      	bpl.n	8006f38 <_printf_i+0xbc>
 8006f34:	681d      	ldr	r5, [r3, #0]
 8006f36:	e003      	b.n	8006f40 <_printf_i+0xc4>
 8006f38:	0645      	lsls	r5, r0, #25
 8006f3a:	d5fb      	bpl.n	8006f34 <_printf_i+0xb8>
 8006f3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f40:	2d00      	cmp	r5, #0
 8006f42:	da03      	bge.n	8006f4c <_printf_i+0xd0>
 8006f44:	232d      	movs	r3, #45	@ 0x2d
 8006f46:	426d      	negs	r5, r5
 8006f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f4c:	4859      	ldr	r0, [pc, #356]	@ (80070b4 <_printf_i+0x238>)
 8006f4e:	230a      	movs	r3, #10
 8006f50:	e011      	b.n	8006f76 <_printf_i+0xfa>
 8006f52:	6821      	ldr	r1, [r4, #0]
 8006f54:	6833      	ldr	r3, [r6, #0]
 8006f56:	0608      	lsls	r0, r1, #24
 8006f58:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f5c:	d402      	bmi.n	8006f64 <_printf_i+0xe8>
 8006f5e:	0649      	lsls	r1, r1, #25
 8006f60:	bf48      	it	mi
 8006f62:	b2ad      	uxthmi	r5, r5
 8006f64:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f66:	4853      	ldr	r0, [pc, #332]	@ (80070b4 <_printf_i+0x238>)
 8006f68:	6033      	str	r3, [r6, #0]
 8006f6a:	bf14      	ite	ne
 8006f6c:	230a      	movne	r3, #10
 8006f6e:	2308      	moveq	r3, #8
 8006f70:	2100      	movs	r1, #0
 8006f72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f76:	6866      	ldr	r6, [r4, #4]
 8006f78:	60a6      	str	r6, [r4, #8]
 8006f7a:	2e00      	cmp	r6, #0
 8006f7c:	bfa2      	ittt	ge
 8006f7e:	6821      	ldrge	r1, [r4, #0]
 8006f80:	f021 0104 	bicge.w	r1, r1, #4
 8006f84:	6021      	strge	r1, [r4, #0]
 8006f86:	b90d      	cbnz	r5, 8006f8c <_printf_i+0x110>
 8006f88:	2e00      	cmp	r6, #0
 8006f8a:	d04b      	beq.n	8007024 <_printf_i+0x1a8>
 8006f8c:	4616      	mov	r6, r2
 8006f8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f92:	fb03 5711 	mls	r7, r3, r1, r5
 8006f96:	5dc7      	ldrb	r7, [r0, r7]
 8006f98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f9c:	462f      	mov	r7, r5
 8006f9e:	42bb      	cmp	r3, r7
 8006fa0:	460d      	mov	r5, r1
 8006fa2:	d9f4      	bls.n	8006f8e <_printf_i+0x112>
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d10b      	bne.n	8006fc0 <_printf_i+0x144>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	07df      	lsls	r7, r3, #31
 8006fac:	d508      	bpl.n	8006fc0 <_printf_i+0x144>
 8006fae:	6923      	ldr	r3, [r4, #16]
 8006fb0:	6861      	ldr	r1, [r4, #4]
 8006fb2:	4299      	cmp	r1, r3
 8006fb4:	bfde      	ittt	le
 8006fb6:	2330      	movle	r3, #48	@ 0x30
 8006fb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fc0:	1b92      	subs	r2, r2, r6
 8006fc2:	6122      	str	r2, [r4, #16]
 8006fc4:	f8cd a000 	str.w	sl, [sp]
 8006fc8:	464b      	mov	r3, r9
 8006fca:	aa03      	add	r2, sp, #12
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4640      	mov	r0, r8
 8006fd0:	f7ff fee6 	bl	8006da0 <_printf_common>
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d14a      	bne.n	800706e <_printf_i+0x1f2>
 8006fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fdc:	b004      	add	sp, #16
 8006fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	f043 0320 	orr.w	r3, r3, #32
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	4833      	ldr	r0, [pc, #204]	@ (80070b8 <_printf_i+0x23c>)
 8006fec:	2778      	movs	r7, #120	@ 0x78
 8006fee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	6831      	ldr	r1, [r6, #0]
 8006ff6:	061f      	lsls	r7, r3, #24
 8006ff8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ffc:	d402      	bmi.n	8007004 <_printf_i+0x188>
 8006ffe:	065f      	lsls	r7, r3, #25
 8007000:	bf48      	it	mi
 8007002:	b2ad      	uxthmi	r5, r5
 8007004:	6031      	str	r1, [r6, #0]
 8007006:	07d9      	lsls	r1, r3, #31
 8007008:	bf44      	itt	mi
 800700a:	f043 0320 	orrmi.w	r3, r3, #32
 800700e:	6023      	strmi	r3, [r4, #0]
 8007010:	b11d      	cbz	r5, 800701a <_printf_i+0x19e>
 8007012:	2310      	movs	r3, #16
 8007014:	e7ac      	b.n	8006f70 <_printf_i+0xf4>
 8007016:	4827      	ldr	r0, [pc, #156]	@ (80070b4 <_printf_i+0x238>)
 8007018:	e7e9      	b.n	8006fee <_printf_i+0x172>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	f023 0320 	bic.w	r3, r3, #32
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	e7f6      	b.n	8007012 <_printf_i+0x196>
 8007024:	4616      	mov	r6, r2
 8007026:	e7bd      	b.n	8006fa4 <_printf_i+0x128>
 8007028:	6833      	ldr	r3, [r6, #0]
 800702a:	6825      	ldr	r5, [r4, #0]
 800702c:	6961      	ldr	r1, [r4, #20]
 800702e:	1d18      	adds	r0, r3, #4
 8007030:	6030      	str	r0, [r6, #0]
 8007032:	062e      	lsls	r6, r5, #24
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	d501      	bpl.n	800703c <_printf_i+0x1c0>
 8007038:	6019      	str	r1, [r3, #0]
 800703a:	e002      	b.n	8007042 <_printf_i+0x1c6>
 800703c:	0668      	lsls	r0, r5, #25
 800703e:	d5fb      	bpl.n	8007038 <_printf_i+0x1bc>
 8007040:	8019      	strh	r1, [r3, #0]
 8007042:	2300      	movs	r3, #0
 8007044:	6123      	str	r3, [r4, #16]
 8007046:	4616      	mov	r6, r2
 8007048:	e7bc      	b.n	8006fc4 <_printf_i+0x148>
 800704a:	6833      	ldr	r3, [r6, #0]
 800704c:	1d1a      	adds	r2, r3, #4
 800704e:	6032      	str	r2, [r6, #0]
 8007050:	681e      	ldr	r6, [r3, #0]
 8007052:	6862      	ldr	r2, [r4, #4]
 8007054:	2100      	movs	r1, #0
 8007056:	4630      	mov	r0, r6
 8007058:	f7f9 f8f2 	bl	8000240 <memchr>
 800705c:	b108      	cbz	r0, 8007062 <_printf_i+0x1e6>
 800705e:	1b80      	subs	r0, r0, r6
 8007060:	6060      	str	r0, [r4, #4]
 8007062:	6863      	ldr	r3, [r4, #4]
 8007064:	6123      	str	r3, [r4, #16]
 8007066:	2300      	movs	r3, #0
 8007068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800706c:	e7aa      	b.n	8006fc4 <_printf_i+0x148>
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	4632      	mov	r2, r6
 8007072:	4649      	mov	r1, r9
 8007074:	4640      	mov	r0, r8
 8007076:	47d0      	blx	sl
 8007078:	3001      	adds	r0, #1
 800707a:	d0ad      	beq.n	8006fd8 <_printf_i+0x15c>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	079b      	lsls	r3, r3, #30
 8007080:	d413      	bmi.n	80070aa <_printf_i+0x22e>
 8007082:	68e0      	ldr	r0, [r4, #12]
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	4298      	cmp	r0, r3
 8007088:	bfb8      	it	lt
 800708a:	4618      	movlt	r0, r3
 800708c:	e7a6      	b.n	8006fdc <_printf_i+0x160>
 800708e:	2301      	movs	r3, #1
 8007090:	4632      	mov	r2, r6
 8007092:	4649      	mov	r1, r9
 8007094:	4640      	mov	r0, r8
 8007096:	47d0      	blx	sl
 8007098:	3001      	adds	r0, #1
 800709a:	d09d      	beq.n	8006fd8 <_printf_i+0x15c>
 800709c:	3501      	adds	r5, #1
 800709e:	68e3      	ldr	r3, [r4, #12]
 80070a0:	9903      	ldr	r1, [sp, #12]
 80070a2:	1a5b      	subs	r3, r3, r1
 80070a4:	42ab      	cmp	r3, r5
 80070a6:	dcf2      	bgt.n	800708e <_printf_i+0x212>
 80070a8:	e7eb      	b.n	8007082 <_printf_i+0x206>
 80070aa:	2500      	movs	r5, #0
 80070ac:	f104 0619 	add.w	r6, r4, #25
 80070b0:	e7f5      	b.n	800709e <_printf_i+0x222>
 80070b2:	bf00      	nop
 80070b4:	08007e0d 	.word	0x08007e0d
 80070b8:	08007e1e 	.word	0x08007e1e

080070bc <memmove>:
 80070bc:	4288      	cmp	r0, r1
 80070be:	b510      	push	{r4, lr}
 80070c0:	eb01 0402 	add.w	r4, r1, r2
 80070c4:	d902      	bls.n	80070cc <memmove+0x10>
 80070c6:	4284      	cmp	r4, r0
 80070c8:	4623      	mov	r3, r4
 80070ca:	d807      	bhi.n	80070dc <memmove+0x20>
 80070cc:	1e43      	subs	r3, r0, #1
 80070ce:	42a1      	cmp	r1, r4
 80070d0:	d008      	beq.n	80070e4 <memmove+0x28>
 80070d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070da:	e7f8      	b.n	80070ce <memmove+0x12>
 80070dc:	4402      	add	r2, r0
 80070de:	4601      	mov	r1, r0
 80070e0:	428a      	cmp	r2, r1
 80070e2:	d100      	bne.n	80070e6 <memmove+0x2a>
 80070e4:	bd10      	pop	{r4, pc}
 80070e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070ee:	e7f7      	b.n	80070e0 <memmove+0x24>

080070f0 <_sbrk_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4d06      	ldr	r5, [pc, #24]	@ (800710c <_sbrk_r+0x1c>)
 80070f4:	2300      	movs	r3, #0
 80070f6:	4604      	mov	r4, r0
 80070f8:	4608      	mov	r0, r1
 80070fa:	602b      	str	r3, [r5, #0]
 80070fc:	f7fb fbf8 	bl	80028f0 <_sbrk>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_sbrk_r+0x1a>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	b103      	cbz	r3, 800710a <_sbrk_r+0x1a>
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	2000746c 	.word	0x2000746c

08007110 <memcpy>:
 8007110:	440a      	add	r2, r1
 8007112:	4291      	cmp	r1, r2
 8007114:	f100 33ff 	add.w	r3, r0, #4294967295
 8007118:	d100      	bne.n	800711c <memcpy+0xc>
 800711a:	4770      	bx	lr
 800711c:	b510      	push	{r4, lr}
 800711e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007126:	4291      	cmp	r1, r2
 8007128:	d1f9      	bne.n	800711e <memcpy+0xe>
 800712a:	bd10      	pop	{r4, pc}

0800712c <_realloc_r>:
 800712c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007130:	4680      	mov	r8, r0
 8007132:	4615      	mov	r5, r2
 8007134:	460c      	mov	r4, r1
 8007136:	b921      	cbnz	r1, 8007142 <_realloc_r+0x16>
 8007138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800713c:	4611      	mov	r1, r2
 800713e:	f7ff bc4b 	b.w	80069d8 <_malloc_r>
 8007142:	b92a      	cbnz	r2, 8007150 <_realloc_r+0x24>
 8007144:	f7ff fbdc 	bl	8006900 <_free_r>
 8007148:	2400      	movs	r4, #0
 800714a:	4620      	mov	r0, r4
 800714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007150:	f000 f81a 	bl	8007188 <_malloc_usable_size_r>
 8007154:	4285      	cmp	r5, r0
 8007156:	4606      	mov	r6, r0
 8007158:	d802      	bhi.n	8007160 <_realloc_r+0x34>
 800715a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800715e:	d8f4      	bhi.n	800714a <_realloc_r+0x1e>
 8007160:	4629      	mov	r1, r5
 8007162:	4640      	mov	r0, r8
 8007164:	f7ff fc38 	bl	80069d8 <_malloc_r>
 8007168:	4607      	mov	r7, r0
 800716a:	2800      	cmp	r0, #0
 800716c:	d0ec      	beq.n	8007148 <_realloc_r+0x1c>
 800716e:	42b5      	cmp	r5, r6
 8007170:	462a      	mov	r2, r5
 8007172:	4621      	mov	r1, r4
 8007174:	bf28      	it	cs
 8007176:	4632      	movcs	r2, r6
 8007178:	f7ff ffca 	bl	8007110 <memcpy>
 800717c:	4621      	mov	r1, r4
 800717e:	4640      	mov	r0, r8
 8007180:	f7ff fbbe 	bl	8006900 <_free_r>
 8007184:	463c      	mov	r4, r7
 8007186:	e7e0      	b.n	800714a <_realloc_r+0x1e>

08007188 <_malloc_usable_size_r>:
 8007188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718c:	1f18      	subs	r0, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfbc      	itt	lt
 8007192:	580b      	ldrlt	r3, [r1, r0]
 8007194:	18c0      	addlt	r0, r0, r3
 8007196:	4770      	bx	lr

08007198 <cos>:
 8007198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800719a:	eeb0 7b40 	vmov.f64	d7, d0
 800719e:	ee17 3a90 	vmov	r3, s15
 80071a2:	4a21      	ldr	r2, [pc, #132]	@ (8007228 <cos+0x90>)
 80071a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d806      	bhi.n	80071ba <cos+0x22>
 80071ac:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8007220 <cos+0x88>
 80071b0:	b005      	add	sp, #20
 80071b2:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b6:	f000 b887 	b.w	80072c8 <__kernel_cos>
 80071ba:	4a1c      	ldr	r2, [pc, #112]	@ (800722c <cos+0x94>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d904      	bls.n	80071ca <cos+0x32>
 80071c0:	ee30 0b40 	vsub.f64	d0, d0, d0
 80071c4:	b005      	add	sp, #20
 80071c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80071ca:	4668      	mov	r0, sp
 80071cc:	f000 f93c 	bl	8007448 <__ieee754_rem_pio2>
 80071d0:	f000 0003 	and.w	r0, r0, #3
 80071d4:	2801      	cmp	r0, #1
 80071d6:	d009      	beq.n	80071ec <cos+0x54>
 80071d8:	2802      	cmp	r0, #2
 80071da:	d010      	beq.n	80071fe <cos+0x66>
 80071dc:	b9b0      	cbnz	r0, 800720c <cos+0x74>
 80071de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071e2:	ed9d 0b00 	vldr	d0, [sp]
 80071e6:	f000 f86f 	bl	80072c8 <__kernel_cos>
 80071ea:	e7eb      	b.n	80071c4 <cos+0x2c>
 80071ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071f0:	ed9d 0b00 	vldr	d0, [sp]
 80071f4:	f000 f8d0 	bl	8007398 <__kernel_sin>
 80071f8:	eeb1 0b40 	vneg.f64	d0, d0
 80071fc:	e7e2      	b.n	80071c4 <cos+0x2c>
 80071fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007202:	ed9d 0b00 	vldr	d0, [sp]
 8007206:	f000 f85f 	bl	80072c8 <__kernel_cos>
 800720a:	e7f5      	b.n	80071f8 <cos+0x60>
 800720c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007210:	ed9d 0b00 	vldr	d0, [sp]
 8007214:	2001      	movs	r0, #1
 8007216:	f000 f8bf 	bl	8007398 <__kernel_sin>
 800721a:	e7d3      	b.n	80071c4 <cos+0x2c>
 800721c:	f3af 8000 	nop.w
	...
 8007228:	3fe921fb 	.word	0x3fe921fb
 800722c:	7fefffff 	.word	0x7fefffff

08007230 <sin>:
 8007230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007232:	eeb0 7b40 	vmov.f64	d7, d0
 8007236:	ee17 3a90 	vmov	r3, s15
 800723a:	4a21      	ldr	r2, [pc, #132]	@ (80072c0 <sin+0x90>)
 800723c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007240:	4293      	cmp	r3, r2
 8007242:	d807      	bhi.n	8007254 <sin+0x24>
 8007244:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80072b8 <sin+0x88>
 8007248:	2000      	movs	r0, #0
 800724a:	b005      	add	sp, #20
 800724c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007250:	f000 b8a2 	b.w	8007398 <__kernel_sin>
 8007254:	4a1b      	ldr	r2, [pc, #108]	@ (80072c4 <sin+0x94>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d904      	bls.n	8007264 <sin+0x34>
 800725a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800725e:	b005      	add	sp, #20
 8007260:	f85d fb04 	ldr.w	pc, [sp], #4
 8007264:	4668      	mov	r0, sp
 8007266:	f000 f8ef 	bl	8007448 <__ieee754_rem_pio2>
 800726a:	f000 0003 	and.w	r0, r0, #3
 800726e:	2801      	cmp	r0, #1
 8007270:	d00a      	beq.n	8007288 <sin+0x58>
 8007272:	2802      	cmp	r0, #2
 8007274:	d00f      	beq.n	8007296 <sin+0x66>
 8007276:	b9c0      	cbnz	r0, 80072aa <sin+0x7a>
 8007278:	ed9d 1b02 	vldr	d1, [sp, #8]
 800727c:	ed9d 0b00 	vldr	d0, [sp]
 8007280:	2001      	movs	r0, #1
 8007282:	f000 f889 	bl	8007398 <__kernel_sin>
 8007286:	e7ea      	b.n	800725e <sin+0x2e>
 8007288:	ed9d 1b02 	vldr	d1, [sp, #8]
 800728c:	ed9d 0b00 	vldr	d0, [sp]
 8007290:	f000 f81a 	bl	80072c8 <__kernel_cos>
 8007294:	e7e3      	b.n	800725e <sin+0x2e>
 8007296:	ed9d 1b02 	vldr	d1, [sp, #8]
 800729a:	ed9d 0b00 	vldr	d0, [sp]
 800729e:	2001      	movs	r0, #1
 80072a0:	f000 f87a 	bl	8007398 <__kernel_sin>
 80072a4:	eeb1 0b40 	vneg.f64	d0, d0
 80072a8:	e7d9      	b.n	800725e <sin+0x2e>
 80072aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072ae:	ed9d 0b00 	vldr	d0, [sp]
 80072b2:	f000 f809 	bl	80072c8 <__kernel_cos>
 80072b6:	e7f5      	b.n	80072a4 <sin+0x74>
	...
 80072c0:	3fe921fb 	.word	0x3fe921fb
 80072c4:	7fefffff 	.word	0x7fefffff

080072c8 <__kernel_cos>:
 80072c8:	eeb0 5b40 	vmov.f64	d5, d0
 80072cc:	ee15 1a90 	vmov	r1, s11
 80072d0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80072d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80072d8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 80072dc:	d204      	bcs.n	80072e8 <__kernel_cos+0x20>
 80072de:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80072e2:	ee17 3a90 	vmov	r3, s15
 80072e6:	b343      	cbz	r3, 800733a <__kernel_cos+0x72>
 80072e8:	ee25 6b05 	vmul.f64	d6, d5, d5
 80072ec:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80072f0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8007360 <__kernel_cos+0x98>
 80072f4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8007368 <__kernel_cos+0xa0>
 80072f8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80072fc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8007370 <__kernel_cos+0xa8>
 8007300:	eea4 7b06 	vfma.f64	d7, d4, d6
 8007304:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8007378 <__kernel_cos+0xb0>
 8007308:	eea7 4b06 	vfma.f64	d4, d7, d6
 800730c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8007380 <__kernel_cos+0xb8>
 8007310:	4b1f      	ldr	r3, [pc, #124]	@ (8007390 <__kernel_cos+0xc8>)
 8007312:	eea4 7b06 	vfma.f64	d7, d4, d6
 8007316:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8007388 <__kernel_cos+0xc0>
 800731a:	4299      	cmp	r1, r3
 800731c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8007320:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8007324:	ee24 4b06 	vmul.f64	d4, d4, d6
 8007328:	ee26 7b07 	vmul.f64	d7, d6, d7
 800732c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8007330:	d804      	bhi.n	800733c <__kernel_cos+0x74>
 8007332:	ee37 7b41 	vsub.f64	d7, d7, d1
 8007336:	ee30 0b47 	vsub.f64	d0, d0, d7
 800733a:	4770      	bx	lr
 800733c:	4b15      	ldr	r3, [pc, #84]	@ (8007394 <__kernel_cos+0xcc>)
 800733e:	4299      	cmp	r1, r3
 8007340:	d809      	bhi.n	8007356 <__kernel_cos+0x8e>
 8007342:	2200      	movs	r2, #0
 8007344:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8007348:	ec43 2b16 	vmov	d6, r2, r3
 800734c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007350:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007354:	e7ed      	b.n	8007332 <__kernel_cos+0x6a>
 8007356:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800735a:	e7f7      	b.n	800734c <__kernel_cos+0x84>
 800735c:	f3af 8000 	nop.w
 8007360:	be8838d4 	.word	0xbe8838d4
 8007364:	bda8fae9 	.word	0xbda8fae9
 8007368:	bdb4b1c4 	.word	0xbdb4b1c4
 800736c:	3e21ee9e 	.word	0x3e21ee9e
 8007370:	809c52ad 	.word	0x809c52ad
 8007374:	be927e4f 	.word	0xbe927e4f
 8007378:	19cb1590 	.word	0x19cb1590
 800737c:	3efa01a0 	.word	0x3efa01a0
 8007380:	16c15177 	.word	0x16c15177
 8007384:	bf56c16c 	.word	0xbf56c16c
 8007388:	5555554c 	.word	0x5555554c
 800738c:	3fa55555 	.word	0x3fa55555
 8007390:	3fd33332 	.word	0x3fd33332
 8007394:	3fe90000 	.word	0x3fe90000

08007398 <__kernel_sin>:
 8007398:	ee10 3a90 	vmov	r3, s1
 800739c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073a0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80073a4:	d204      	bcs.n	80073b0 <__kernel_sin+0x18>
 80073a6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80073aa:	ee17 3a90 	vmov	r3, s15
 80073ae:	b35b      	cbz	r3, 8007408 <__kernel_sin+0x70>
 80073b0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80073b4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80073b8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8007410 <__kernel_sin+0x78>
 80073bc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8007418 <__kernel_sin+0x80>
 80073c0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80073c4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8007420 <__kernel_sin+0x88>
 80073c8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80073cc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8007428 <__kernel_sin+0x90>
 80073d0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80073d4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8007430 <__kernel_sin+0x98>
 80073d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80073dc:	b930      	cbnz	r0, 80073ec <__kernel_sin+0x54>
 80073de:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8007438 <__kernel_sin+0xa0>
 80073e2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80073e6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80073ea:	4770      	bx	lr
 80073ec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80073f0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80073f4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80073f8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80073fc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8007440 <__kernel_sin+0xa8>
 8007400:	eea5 1b07 	vfma.f64	d1, d5, d7
 8007404:	ee30 0b41 	vsub.f64	d0, d0, d1
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	f3af 8000 	nop.w
 8007410:	5acfd57c 	.word	0x5acfd57c
 8007414:	3de5d93a 	.word	0x3de5d93a
 8007418:	8a2b9ceb 	.word	0x8a2b9ceb
 800741c:	be5ae5e6 	.word	0xbe5ae5e6
 8007420:	57b1fe7d 	.word	0x57b1fe7d
 8007424:	3ec71de3 	.word	0x3ec71de3
 8007428:	19c161d5 	.word	0x19c161d5
 800742c:	bf2a01a0 	.word	0xbf2a01a0
 8007430:	1110f8a6 	.word	0x1110f8a6
 8007434:	3f811111 	.word	0x3f811111
 8007438:	55555549 	.word	0x55555549
 800743c:	bfc55555 	.word	0xbfc55555
 8007440:	55555549 	.word	0x55555549
 8007444:	3fc55555 	.word	0x3fc55555

08007448 <__ieee754_rem_pio2>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	eeb0 7b40 	vmov.f64	d7, d0
 800744e:	ee17 5a90 	vmov	r5, s15
 8007452:	4b99      	ldr	r3, [pc, #612]	@ (80076b8 <__ieee754_rem_pio2+0x270>)
 8007454:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007458:	429e      	cmp	r6, r3
 800745a:	b088      	sub	sp, #32
 800745c:	4604      	mov	r4, r0
 800745e:	d807      	bhi.n	8007470 <__ieee754_rem_pio2+0x28>
 8007460:	2200      	movs	r2, #0
 8007462:	2300      	movs	r3, #0
 8007464:	ed84 0b00 	vstr	d0, [r4]
 8007468:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800746c:	2000      	movs	r0, #0
 800746e:	e01b      	b.n	80074a8 <__ieee754_rem_pio2+0x60>
 8007470:	4b92      	ldr	r3, [pc, #584]	@ (80076bc <__ieee754_rem_pio2+0x274>)
 8007472:	429e      	cmp	r6, r3
 8007474:	d83b      	bhi.n	80074ee <__ieee754_rem_pio2+0xa6>
 8007476:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800747a:	2d00      	cmp	r5, #0
 800747c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8007678 <__ieee754_rem_pio2+0x230>
 8007480:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8007484:	dd19      	ble.n	80074ba <__ieee754_rem_pio2+0x72>
 8007486:	ee30 7b46 	vsub.f64	d7, d0, d6
 800748a:	429e      	cmp	r6, r3
 800748c:	d00e      	beq.n	80074ac <__ieee754_rem_pio2+0x64>
 800748e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8007680 <__ieee754_rem_pio2+0x238>
 8007492:	ee37 6b45 	vsub.f64	d6, d7, d5
 8007496:	ee37 7b46 	vsub.f64	d7, d7, d6
 800749a:	ed84 6b00 	vstr	d6, [r4]
 800749e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80074a2:	ed84 7b02 	vstr	d7, [r4, #8]
 80074a6:	2001      	movs	r0, #1
 80074a8:	b008      	add	sp, #32
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
 80074ac:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8007688 <__ieee754_rem_pio2+0x240>
 80074b0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8007690 <__ieee754_rem_pio2+0x248>
 80074b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074b8:	e7eb      	b.n	8007492 <__ieee754_rem_pio2+0x4a>
 80074ba:	429e      	cmp	r6, r3
 80074bc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80074c0:	d00e      	beq.n	80074e0 <__ieee754_rem_pio2+0x98>
 80074c2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8007680 <__ieee754_rem_pio2+0x238>
 80074c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80074ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074ce:	ed84 6b00 	vstr	d6, [r4]
 80074d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295
 80074da:	ed84 7b02 	vstr	d7, [r4, #8]
 80074de:	e7e3      	b.n	80074a8 <__ieee754_rem_pio2+0x60>
 80074e0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8007688 <__ieee754_rem_pio2+0x240>
 80074e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8007690 <__ieee754_rem_pio2+0x248>
 80074e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80074ec:	e7eb      	b.n	80074c6 <__ieee754_rem_pio2+0x7e>
 80074ee:	4b74      	ldr	r3, [pc, #464]	@ (80076c0 <__ieee754_rem_pio2+0x278>)
 80074f0:	429e      	cmp	r6, r3
 80074f2:	d870      	bhi.n	80075d6 <__ieee754_rem_pio2+0x18e>
 80074f4:	f000 f8ec 	bl	80076d0 <fabs>
 80074f8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80074fc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007698 <__ieee754_rem_pio2+0x250>
 8007500:	eea0 7b06 	vfma.f64	d7, d0, d6
 8007504:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007508:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800750c:	ee17 0a90 	vmov	r0, s15
 8007510:	eeb1 4b45 	vneg.f64	d4, d5
 8007514:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8007678 <__ieee754_rem_pio2+0x230>
 8007518:	eea5 0b47 	vfms.f64	d0, d5, d7
 800751c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8007680 <__ieee754_rem_pio2+0x238>
 8007520:	281f      	cmp	r0, #31
 8007522:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007526:	ee30 6b47 	vsub.f64	d6, d0, d7
 800752a:	dc05      	bgt.n	8007538 <__ieee754_rem_pio2+0xf0>
 800752c:	4b65      	ldr	r3, [pc, #404]	@ (80076c4 <__ieee754_rem_pio2+0x27c>)
 800752e:	1e42      	subs	r2, r0, #1
 8007530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007534:	42b3      	cmp	r3, r6
 8007536:	d109      	bne.n	800754c <__ieee754_rem_pio2+0x104>
 8007538:	ee16 3a90 	vmov	r3, s13
 800753c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007540:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8007544:	2b10      	cmp	r3, #16
 8007546:	ea4f 5226 	mov.w	r2, r6, asr #20
 800754a:	dc02      	bgt.n	8007552 <__ieee754_rem_pio2+0x10a>
 800754c:	ed84 6b00 	vstr	d6, [r4]
 8007550:	e01a      	b.n	8007588 <__ieee754_rem_pio2+0x140>
 8007552:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8007688 <__ieee754_rem_pio2+0x240>
 8007556:	eeb0 6b40 	vmov.f64	d6, d0
 800755a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800755e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8007562:	eea4 7b03 	vfma.f64	d7, d4, d3
 8007566:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8007690 <__ieee754_rem_pio2+0x248>
 800756a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800756e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8007572:	ee13 3a90 	vmov	r3, s7
 8007576:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b31      	cmp	r3, #49	@ 0x31
 800757e:	dc17      	bgt.n	80075b0 <__ieee754_rem_pio2+0x168>
 8007580:	eeb0 0b46 	vmov.f64	d0, d6
 8007584:	ed84 3b00 	vstr	d3, [r4]
 8007588:	ed94 6b00 	vldr	d6, [r4]
 800758c:	2d00      	cmp	r5, #0
 800758e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007592:	ee30 0b47 	vsub.f64	d0, d0, d7
 8007596:	ed84 0b02 	vstr	d0, [r4, #8]
 800759a:	da85      	bge.n	80074a8 <__ieee754_rem_pio2+0x60>
 800759c:	eeb1 6b46 	vneg.f64	d6, d6
 80075a0:	eeb1 0b40 	vneg.f64	d0, d0
 80075a4:	ed84 6b00 	vstr	d6, [r4]
 80075a8:	ed84 0b02 	vstr	d0, [r4, #8]
 80075ac:	4240      	negs	r0, r0
 80075ae:	e77b      	b.n	80074a8 <__ieee754_rem_pio2+0x60>
 80075b0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 80076a0 <__ieee754_rem_pio2+0x258>
 80075b4:	eeb0 0b46 	vmov.f64	d0, d6
 80075b8:	eea4 0b07 	vfma.f64	d0, d4, d7
 80075bc:	ee36 6b40 	vsub.f64	d6, d6, d0
 80075c0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80075c4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 80076a8 <__ieee754_rem_pio2+0x260>
 80075c8:	eeb0 7b46 	vmov.f64	d7, d6
 80075cc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80075d0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80075d4:	e7ba      	b.n	800754c <__ieee754_rem_pio2+0x104>
 80075d6:	4b3c      	ldr	r3, [pc, #240]	@ (80076c8 <__ieee754_rem_pio2+0x280>)
 80075d8:	429e      	cmp	r6, r3
 80075da:	d906      	bls.n	80075ea <__ieee754_rem_pio2+0x1a2>
 80075dc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80075e0:	ed80 7b02 	vstr	d7, [r0, #8]
 80075e4:	ed80 7b00 	vstr	d7, [r0]
 80075e8:	e740      	b.n	800746c <__ieee754_rem_pio2+0x24>
 80075ea:	ee10 3a10 	vmov	r3, s0
 80075ee:	1532      	asrs	r2, r6, #20
 80075f0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80075f4:	4618      	mov	r0, r3
 80075f6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80075fa:	ec41 0b17 	vmov	d7, r0, r1
 80075fe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8007602:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80076b0 <__ieee754_rem_pio2+0x268>
 8007606:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800760a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800760e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007612:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007616:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800761a:	a808      	add	r0, sp, #32
 800761c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8007620:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007624:	ed8d 6b04 	vstr	d6, [sp, #16]
 8007628:	ee27 7b05 	vmul.f64	d7, d7, d5
 800762c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007630:	2103      	movs	r1, #3
 8007632:	ed30 7b02 	vldmdb	r0!, {d7}
 8007636:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800763a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763e:	460b      	mov	r3, r1
 8007640:	f101 31ff 	add.w	r1, r1, #4294967295
 8007644:	d0f5      	beq.n	8007632 <__ieee754_rem_pio2+0x1ea>
 8007646:	4921      	ldr	r1, [pc, #132]	@ (80076cc <__ieee754_rem_pio2+0x284>)
 8007648:	9101      	str	r1, [sp, #4]
 800764a:	2102      	movs	r1, #2
 800764c:	9100      	str	r1, [sp, #0]
 800764e:	a802      	add	r0, sp, #8
 8007650:	4621      	mov	r1, r4
 8007652:	f000 f845 	bl	80076e0 <__kernel_rem_pio2>
 8007656:	2d00      	cmp	r5, #0
 8007658:	f6bf af26 	bge.w	80074a8 <__ieee754_rem_pio2+0x60>
 800765c:	ed94 7b00 	vldr	d7, [r4]
 8007660:	eeb1 7b47 	vneg.f64	d7, d7
 8007664:	ed84 7b00 	vstr	d7, [r4]
 8007668:	ed94 7b02 	vldr	d7, [r4, #8]
 800766c:	eeb1 7b47 	vneg.f64	d7, d7
 8007670:	ed84 7b02 	vstr	d7, [r4, #8]
 8007674:	e79a      	b.n	80075ac <__ieee754_rem_pio2+0x164>
 8007676:	bf00      	nop
 8007678:	54400000 	.word	0x54400000
 800767c:	3ff921fb 	.word	0x3ff921fb
 8007680:	1a626331 	.word	0x1a626331
 8007684:	3dd0b461 	.word	0x3dd0b461
 8007688:	1a600000 	.word	0x1a600000
 800768c:	3dd0b461 	.word	0x3dd0b461
 8007690:	2e037073 	.word	0x2e037073
 8007694:	3ba3198a 	.word	0x3ba3198a
 8007698:	6dc9c883 	.word	0x6dc9c883
 800769c:	3fe45f30 	.word	0x3fe45f30
 80076a0:	2e000000 	.word	0x2e000000
 80076a4:	3ba3198a 	.word	0x3ba3198a
 80076a8:	252049c1 	.word	0x252049c1
 80076ac:	397b839a 	.word	0x397b839a
 80076b0:	00000000 	.word	0x00000000
 80076b4:	41700000 	.word	0x41700000
 80076b8:	3fe921fb 	.word	0x3fe921fb
 80076bc:	4002d97b 	.word	0x4002d97b
 80076c0:	413921fb 	.word	0x413921fb
 80076c4:	08007e30 	.word	0x08007e30
 80076c8:	7fefffff 	.word	0x7fefffff
 80076cc:	08007eb0 	.word	0x08007eb0

080076d0 <fabs>:
 80076d0:	ec51 0b10 	vmov	r0, r1, d0
 80076d4:	4602      	mov	r2, r0
 80076d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80076da:	ec43 2b10 	vmov	d0, r2, r3
 80076de:	4770      	bx	lr

080076e0 <__kernel_rem_pio2>:
 80076e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	ed2d 8b06 	vpush	{d8-d10}
 80076e8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80076ec:	469b      	mov	fp, r3
 80076ee:	9001      	str	r0, [sp, #4]
 80076f0:	4bbb      	ldr	r3, [pc, #748]	@ (80079e0 <__kernel_rem_pio2+0x300>)
 80076f2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 80076f4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 80076f8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80076fc:	f112 0f14 	cmn.w	r2, #20
 8007700:	bfa8      	it	ge
 8007702:	1ed3      	subge	r3, r2, #3
 8007704:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007708:	bfb8      	it	lt
 800770a:	2300      	movlt	r3, #0
 800770c:	f06f 0517 	mvn.w	r5, #23
 8007710:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80079c8 <__kernel_rem_pio2+0x2e8>
 8007714:	bfa4      	itt	ge
 8007716:	2018      	movge	r0, #24
 8007718:	fb93 f3f0 	sdivge	r3, r3, r0
 800771c:	fb03 5505 	mla	r5, r3, r5, r5
 8007720:	eba3 040a 	sub.w	r4, r3, sl
 8007724:	4415      	add	r5, r2
 8007726:	460f      	mov	r7, r1
 8007728:	eb09 060a 	add.w	r6, r9, sl
 800772c:	a81a      	add	r0, sp, #104	@ 0x68
 800772e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8007732:	2200      	movs	r2, #0
 8007734:	42b2      	cmp	r2, r6
 8007736:	dd0e      	ble.n	8007756 <__kernel_rem_pio2+0x76>
 8007738:	aa1a      	add	r2, sp, #104	@ 0x68
 800773a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800773e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8007742:	2600      	movs	r6, #0
 8007744:	454e      	cmp	r6, r9
 8007746:	dc25      	bgt.n	8007794 <__kernel_rem_pio2+0xb4>
 8007748:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80079c8 <__kernel_rem_pio2+0x2e8>
 800774c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007750:	4614      	mov	r4, r2
 8007752:	2000      	movs	r0, #0
 8007754:	e015      	b.n	8007782 <__kernel_rem_pio2+0xa2>
 8007756:	42d4      	cmn	r4, r2
 8007758:	d409      	bmi.n	800776e <__kernel_rem_pio2+0x8e>
 800775a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800775e:	ee07 1a90 	vmov	s15, r1
 8007762:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007766:	eca0 7b02 	vstmia	r0!, {d7}
 800776a:	3201      	adds	r2, #1
 800776c:	e7e2      	b.n	8007734 <__kernel_rem_pio2+0x54>
 800776e:	eeb0 7b46 	vmov.f64	d7, d6
 8007772:	e7f8      	b.n	8007766 <__kernel_rem_pio2+0x86>
 8007774:	ecbc 5b02 	vldmia	ip!, {d5}
 8007778:	ed94 6b00 	vldr	d6, [r4]
 800777c:	3001      	adds	r0, #1
 800777e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007782:	4550      	cmp	r0, sl
 8007784:	f1a4 0408 	sub.w	r4, r4, #8
 8007788:	ddf4      	ble.n	8007774 <__kernel_rem_pio2+0x94>
 800778a:	ecae 7b02 	vstmia	lr!, {d7}
 800778e:	3601      	adds	r6, #1
 8007790:	3208      	adds	r2, #8
 8007792:	e7d7      	b.n	8007744 <__kernel_rem_pio2+0x64>
 8007794:	aa06      	add	r2, sp, #24
 8007796:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80079d0 <__kernel_rem_pio2+0x2f0>
 800779a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80079d8 <__kernel_rem_pio2+0x2f8>
 800779e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80077a2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80077a6:	9203      	str	r2, [sp, #12]
 80077a8:	9302      	str	r3, [sp, #8]
 80077aa:	464c      	mov	r4, r9
 80077ac:	00e3      	lsls	r3, r4, #3
 80077ae:	9304      	str	r3, [sp, #16]
 80077b0:	ab92      	add	r3, sp, #584	@ 0x248
 80077b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077b6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80077ba:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80077bc:	ab06      	add	r3, sp, #24
 80077be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80077c2:	461e      	mov	r6, r3
 80077c4:	4620      	mov	r0, r4
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f1a2 0208 	sub.w	r2, r2, #8
 80077cc:	dc4a      	bgt.n	8007864 <__kernel_rem_pio2+0x184>
 80077ce:	4628      	mov	r0, r5
 80077d0:	9305      	str	r3, [sp, #20]
 80077d2:	f000 fa01 	bl	8007bd8 <scalbn>
 80077d6:	eeb0 8b40 	vmov.f64	d8, d0
 80077da:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80077de:	ee28 0b00 	vmul.f64	d0, d8, d0
 80077e2:	f000 fa79 	bl	8007cd8 <floor>
 80077e6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80077ea:	eea0 8b47 	vfms.f64	d8, d0, d7
 80077ee:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80077f2:	2d00      	cmp	r5, #0
 80077f4:	ee17 8a90 	vmov	r8, s15
 80077f8:	9b05      	ldr	r3, [sp, #20]
 80077fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80077fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007802:	dd41      	ble.n	8007888 <__kernel_rem_pio2+0x1a8>
 8007804:	1e60      	subs	r0, r4, #1
 8007806:	aa06      	add	r2, sp, #24
 8007808:	f1c5 0c18 	rsb	ip, r5, #24
 800780c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8007810:	fa46 f20c 	asr.w	r2, r6, ip
 8007814:	4490      	add	r8, r2
 8007816:	fa02 f20c 	lsl.w	r2, r2, ip
 800781a:	1ab6      	subs	r6, r6, r2
 800781c:	aa06      	add	r2, sp, #24
 800781e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8007822:	f1c5 0217 	rsb	r2, r5, #23
 8007826:	4116      	asrs	r6, r2
 8007828:	2e00      	cmp	r6, #0
 800782a:	dd3c      	ble.n	80078a6 <__kernel_rem_pio2+0x1c6>
 800782c:	f04f 0c00 	mov.w	ip, #0
 8007830:	f108 0801 	add.w	r8, r8, #1
 8007834:	4660      	mov	r0, ip
 8007836:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800783a:	4564      	cmp	r4, ip
 800783c:	dc66      	bgt.n	800790c <__kernel_rem_pio2+0x22c>
 800783e:	2d00      	cmp	r5, #0
 8007840:	dd03      	ble.n	800784a <__kernel_rem_pio2+0x16a>
 8007842:	2d01      	cmp	r5, #1
 8007844:	d072      	beq.n	800792c <__kernel_rem_pio2+0x24c>
 8007846:	2d02      	cmp	r5, #2
 8007848:	d07a      	beq.n	8007940 <__kernel_rem_pio2+0x260>
 800784a:	2e02      	cmp	r6, #2
 800784c:	d12b      	bne.n	80078a6 <__kernel_rem_pio2+0x1c6>
 800784e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007852:	ee30 8b48 	vsub.f64	d8, d0, d8
 8007856:	b330      	cbz	r0, 80078a6 <__kernel_rem_pio2+0x1c6>
 8007858:	4628      	mov	r0, r5
 800785a:	f000 f9bd 	bl	8007bd8 <scalbn>
 800785e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8007862:	e020      	b.n	80078a6 <__kernel_rem_pio2+0x1c6>
 8007864:	ee20 7b09 	vmul.f64	d7, d0, d9
 8007868:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800786c:	3801      	subs	r0, #1
 800786e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8007872:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8007876:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800787a:	eca6 0a01 	vstmia	r6!, {s0}
 800787e:	ed92 0b00 	vldr	d0, [r2]
 8007882:	ee37 0b00 	vadd.f64	d0, d7, d0
 8007886:	e79e      	b.n	80077c6 <__kernel_rem_pio2+0xe6>
 8007888:	d105      	bne.n	8007896 <__kernel_rem_pio2+0x1b6>
 800788a:	1e62      	subs	r2, r4, #1
 800788c:	a906      	add	r1, sp, #24
 800788e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8007892:	15f6      	asrs	r6, r6, #23
 8007894:	e7c8      	b.n	8007828 <__kernel_rem_pio2+0x148>
 8007896:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800789a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800789e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a2:	da31      	bge.n	8007908 <__kernel_rem_pio2+0x228>
 80078a4:	2600      	movs	r6, #0
 80078a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80078aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ae:	f040 809b 	bne.w	80079e8 <__kernel_rem_pio2+0x308>
 80078b2:	1e62      	subs	r2, r4, #1
 80078b4:	2000      	movs	r0, #0
 80078b6:	454a      	cmp	r2, r9
 80078b8:	da49      	bge.n	800794e <__kernel_rem_pio2+0x26e>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d062      	beq.n	8007984 <__kernel_rem_pio2+0x2a4>
 80078be:	3c01      	subs	r4, #1
 80078c0:	ab06      	add	r3, sp, #24
 80078c2:	3d18      	subs	r5, #24
 80078c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0f8      	beq.n	80078be <__kernel_rem_pio2+0x1de>
 80078cc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80078d0:	4628      	mov	r0, r5
 80078d2:	f000 f981 	bl	8007bd8 <scalbn>
 80078d6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80079d0 <__kernel_rem_pio2+0x2f0>
 80078da:	1c62      	adds	r2, r4, #1
 80078dc:	a96a      	add	r1, sp, #424	@ 0x1a8
 80078de:	00d3      	lsls	r3, r2, #3
 80078e0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80078e4:	4622      	mov	r2, r4
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	f280 80a8 	bge.w	8007a3c <__kernel_rem_pio2+0x35c>
 80078ec:	4622      	mov	r2, r4
 80078ee:	2a00      	cmp	r2, #0
 80078f0:	f2c0 80c6 	blt.w	8007a80 <__kernel_rem_pio2+0x3a0>
 80078f4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80078f6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80078fa:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80079c8 <__kernel_rem_pio2+0x2e8>
 80078fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 80079e4 <__kernel_rem_pio2+0x304>
 8007902:	2000      	movs	r0, #0
 8007904:	1aa1      	subs	r1, r4, r2
 8007906:	e0b0      	b.n	8007a6a <__kernel_rem_pio2+0x38a>
 8007908:	2602      	movs	r6, #2
 800790a:	e78f      	b.n	800782c <__kernel_rem_pio2+0x14c>
 800790c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007910:	b948      	cbnz	r0, 8007926 <__kernel_rem_pio2+0x246>
 8007912:	b122      	cbz	r2, 800791e <__kernel_rem_pio2+0x23e>
 8007914:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8007918:	f843 2c04 	str.w	r2, [r3, #-4]
 800791c:	2201      	movs	r2, #1
 800791e:	f10c 0c01 	add.w	ip, ip, #1
 8007922:	4610      	mov	r0, r2
 8007924:	e789      	b.n	800783a <__kernel_rem_pio2+0x15a>
 8007926:	ebae 0202 	sub.w	r2, lr, r2
 800792a:	e7f5      	b.n	8007918 <__kernel_rem_pio2+0x238>
 800792c:	1e62      	subs	r2, r4, #1
 800792e:	ab06      	add	r3, sp, #24
 8007930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007934:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007938:	a906      	add	r1, sp, #24
 800793a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800793e:	e784      	b.n	800784a <__kernel_rem_pio2+0x16a>
 8007940:	1e62      	subs	r2, r4, #1
 8007942:	ab06      	add	r3, sp, #24
 8007944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007948:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800794c:	e7f4      	b.n	8007938 <__kernel_rem_pio2+0x258>
 800794e:	ab06      	add	r3, sp, #24
 8007950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007954:	3a01      	subs	r2, #1
 8007956:	4318      	orrs	r0, r3
 8007958:	e7ad      	b.n	80078b6 <__kernel_rem_pio2+0x1d6>
 800795a:	3301      	adds	r3, #1
 800795c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8007960:	2800      	cmp	r0, #0
 8007962:	d0fa      	beq.n	800795a <__kernel_rem_pio2+0x27a>
 8007964:	9a04      	ldr	r2, [sp, #16]
 8007966:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800796a:	446a      	add	r2, sp
 800796c:	eb04 000b 	add.w	r0, r4, fp
 8007970:	a91a      	add	r1, sp, #104	@ 0x68
 8007972:	1c66      	adds	r6, r4, #1
 8007974:	3a98      	subs	r2, #152	@ 0x98
 8007976:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800797a:	4423      	add	r3, r4
 800797c:	42b3      	cmp	r3, r6
 800797e:	da04      	bge.n	800798a <__kernel_rem_pio2+0x2aa>
 8007980:	461c      	mov	r4, r3
 8007982:	e713      	b.n	80077ac <__kernel_rem_pio2+0xcc>
 8007984:	9a03      	ldr	r2, [sp, #12]
 8007986:	2301      	movs	r3, #1
 8007988:	e7e8      	b.n	800795c <__kernel_rem_pio2+0x27c>
 800798a:	9902      	ldr	r1, [sp, #8]
 800798c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007990:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8007994:	9104      	str	r1, [sp, #16]
 8007996:	ee07 1a90 	vmov	s15, r1
 800799a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800799e:	2400      	movs	r4, #0
 80079a0:	eca0 7b02 	vstmia	r0!, {d7}
 80079a4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80079c8 <__kernel_rem_pio2+0x2e8>
 80079a8:	4686      	mov	lr, r0
 80079aa:	4554      	cmp	r4, sl
 80079ac:	dd03      	ble.n	80079b6 <__kernel_rem_pio2+0x2d6>
 80079ae:	eca2 7b02 	vstmia	r2!, {d7}
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7e2      	b.n	800797c <__kernel_rem_pio2+0x29c>
 80079b6:	ecbc 5b02 	vldmia	ip!, {d5}
 80079ba:	ed3e 6b02 	vldmdb	lr!, {d6}
 80079be:	3401      	adds	r4, #1
 80079c0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80079c4:	e7f1      	b.n	80079aa <__kernel_rem_pio2+0x2ca>
 80079c6:	bf00      	nop
	...
 80079d4:	3e700000 	.word	0x3e700000
 80079d8:	00000000 	.word	0x00000000
 80079dc:	41700000 	.word	0x41700000
 80079e0:	08007ff8 	.word	0x08007ff8
 80079e4:	08007fb8 	.word	0x08007fb8
 80079e8:	4268      	negs	r0, r5
 80079ea:	eeb0 0b48 	vmov.f64	d0, d8
 80079ee:	f000 f8f3 	bl	8007bd8 <scalbn>
 80079f2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8007bc0 <__kernel_rem_pio2+0x4e0>
 80079f6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80079fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079fe:	db17      	blt.n	8007a30 <__kernel_rem_pio2+0x350>
 8007a00:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8007bc8 <__kernel_rem_pio2+0x4e8>
 8007a04:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007a08:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007a0c:	aa06      	add	r2, sp, #24
 8007a0e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8007a12:	eea5 0b46 	vfms.f64	d0, d5, d6
 8007a16:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007a1a:	3518      	adds	r5, #24
 8007a1c:	ee10 3a10 	vmov	r3, s0
 8007a20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007a24:	ee17 3a10 	vmov	r3, s14
 8007a28:	3401      	adds	r4, #1
 8007a2a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007a2e:	e74d      	b.n	80078cc <__kernel_rem_pio2+0x1ec>
 8007a30:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007a34:	aa06      	add	r2, sp, #24
 8007a36:	ee10 3a10 	vmov	r3, s0
 8007a3a:	e7f6      	b.n	8007a2a <__kernel_rem_pio2+0x34a>
 8007a3c:	a806      	add	r0, sp, #24
 8007a3e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8007a42:	9001      	str	r0, [sp, #4]
 8007a44:	ee07 0a90 	vmov	s15, r0
 8007a48:	3a01      	subs	r2, #1
 8007a4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007a4e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8007a52:	ee20 0b06 	vmul.f64	d0, d0, d6
 8007a56:	ed21 7b02 	vstmdb	r1!, {d7}
 8007a5a:	e744      	b.n	80078e6 <__kernel_rem_pio2+0x206>
 8007a5c:	ecbc 5b02 	vldmia	ip!, {d5}
 8007a60:	ecb5 6b02 	vldmia	r5!, {d6}
 8007a64:	3001      	adds	r0, #1
 8007a66:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007a6a:	4548      	cmp	r0, r9
 8007a6c:	dc01      	bgt.n	8007a72 <__kernel_rem_pio2+0x392>
 8007a6e:	4281      	cmp	r1, r0
 8007a70:	daf4      	bge.n	8007a5c <__kernel_rem_pio2+0x37c>
 8007a72:	a842      	add	r0, sp, #264	@ 0x108
 8007a74:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007a78:	ed81 7b00 	vstr	d7, [r1]
 8007a7c:	3a01      	subs	r2, #1
 8007a7e:	e736      	b.n	80078ee <__kernel_rem_pio2+0x20e>
 8007a80:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8007a82:	2a02      	cmp	r2, #2
 8007a84:	dc0a      	bgt.n	8007a9c <__kernel_rem_pio2+0x3bc>
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	dc2d      	bgt.n	8007ae6 <__kernel_rem_pio2+0x406>
 8007a8a:	d046      	beq.n	8007b1a <__kernel_rem_pio2+0x43a>
 8007a8c:	f008 0007 	and.w	r0, r8, #7
 8007a90:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8007a94:	ecbd 8b06 	vpop	{d8-d10}
 8007a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8007a9e:	2a03      	cmp	r2, #3
 8007aa0:	d1f4      	bne.n	8007a8c <__kernel_rem_pio2+0x3ac>
 8007aa2:	a942      	add	r1, sp, #264	@ 0x108
 8007aa4:	f1a3 0208 	sub.w	r2, r3, #8
 8007aa8:	440a      	add	r2, r1
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4620      	mov	r0, r4
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f1a1 0108 	sub.w	r1, r1, #8
 8007ab4:	dc52      	bgt.n	8007b5c <__kernel_rem_pio2+0x47c>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	2901      	cmp	r1, #1
 8007aba:	f1a2 0208 	sub.w	r2, r2, #8
 8007abe:	dc5d      	bgt.n	8007b7c <__kernel_rem_pio2+0x49c>
 8007ac0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8007bd0 <__kernel_rem_pio2+0x4f0>
 8007ac4:	aa42      	add	r2, sp, #264	@ 0x108
 8007ac6:	4413      	add	r3, r2
 8007ac8:	2c01      	cmp	r4, #1
 8007aca:	dc67      	bgt.n	8007b9c <__kernel_rem_pio2+0x4bc>
 8007acc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8007ad0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8007ad4:	2e00      	cmp	r6, #0
 8007ad6:	d167      	bne.n	8007ba8 <__kernel_rem_pio2+0x4c8>
 8007ad8:	ed87 5b00 	vstr	d5, [r7]
 8007adc:	ed87 6b02 	vstr	d6, [r7, #8]
 8007ae0:	ed87 7b04 	vstr	d7, [r7, #16]
 8007ae4:	e7d2      	b.n	8007a8c <__kernel_rem_pio2+0x3ac>
 8007ae6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8007bd0 <__kernel_rem_pio2+0x4f0>
 8007aea:	aa42      	add	r2, sp, #264	@ 0x108
 8007aec:	4413      	add	r3, r2
 8007aee:	4622      	mov	r2, r4
 8007af0:	2a00      	cmp	r2, #0
 8007af2:	da24      	bge.n	8007b3e <__kernel_rem_pio2+0x45e>
 8007af4:	b34e      	cbz	r6, 8007b4a <__kernel_rem_pio2+0x46a>
 8007af6:	eeb1 7b46 	vneg.f64	d7, d6
 8007afa:	ed87 7b00 	vstr	d7, [r7]
 8007afe:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8007b02:	aa44      	add	r2, sp, #272	@ 0x110
 8007b04:	2301      	movs	r3, #1
 8007b06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b0a:	429c      	cmp	r4, r3
 8007b0c:	da20      	bge.n	8007b50 <__kernel_rem_pio2+0x470>
 8007b0e:	b10e      	cbz	r6, 8007b14 <__kernel_rem_pio2+0x434>
 8007b10:	eeb1 7b47 	vneg.f64	d7, d7
 8007b14:	ed87 7b02 	vstr	d7, [r7, #8]
 8007b18:	e7b8      	b.n	8007a8c <__kernel_rem_pio2+0x3ac>
 8007b1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8007bd0 <__kernel_rem_pio2+0x4f0>
 8007b1e:	aa42      	add	r2, sp, #264	@ 0x108
 8007b20:	4413      	add	r3, r2
 8007b22:	2c00      	cmp	r4, #0
 8007b24:	da05      	bge.n	8007b32 <__kernel_rem_pio2+0x452>
 8007b26:	b10e      	cbz	r6, 8007b2c <__kernel_rem_pio2+0x44c>
 8007b28:	eeb1 7b47 	vneg.f64	d7, d7
 8007b2c:	ed87 7b00 	vstr	d7, [r7]
 8007b30:	e7ac      	b.n	8007a8c <__kernel_rem_pio2+0x3ac>
 8007b32:	ed33 6b02 	vldmdb	r3!, {d6}
 8007b36:	3c01      	subs	r4, #1
 8007b38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007b3c:	e7f1      	b.n	8007b22 <__kernel_rem_pio2+0x442>
 8007b3e:	ed33 7b02 	vldmdb	r3!, {d7}
 8007b42:	3a01      	subs	r2, #1
 8007b44:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007b48:	e7d2      	b.n	8007af0 <__kernel_rem_pio2+0x410>
 8007b4a:	eeb0 7b46 	vmov.f64	d7, d6
 8007b4e:	e7d4      	b.n	8007afa <__kernel_rem_pio2+0x41a>
 8007b50:	ecb2 6b02 	vldmia	r2!, {d6}
 8007b54:	3301      	adds	r3, #1
 8007b56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007b5a:	e7d6      	b.n	8007b0a <__kernel_rem_pio2+0x42a>
 8007b5c:	ed91 7b00 	vldr	d7, [r1]
 8007b60:	ed91 5b02 	vldr	d5, [r1, #8]
 8007b64:	3801      	subs	r0, #1
 8007b66:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007b6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b6e:	ed81 6b00 	vstr	d6, [r1]
 8007b72:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007b76:	ed81 7b02 	vstr	d7, [r1, #8]
 8007b7a:	e798      	b.n	8007aae <__kernel_rem_pio2+0x3ce>
 8007b7c:	ed92 7b00 	vldr	d7, [r2]
 8007b80:	ed92 5b02 	vldr	d5, [r2, #8]
 8007b84:	3901      	subs	r1, #1
 8007b86:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007b8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b8e:	ed82 6b00 	vstr	d6, [r2]
 8007b92:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007b96:	ed82 7b02 	vstr	d7, [r2, #8]
 8007b9a:	e78d      	b.n	8007ab8 <__kernel_rem_pio2+0x3d8>
 8007b9c:	ed33 6b02 	vldmdb	r3!, {d6}
 8007ba0:	3c01      	subs	r4, #1
 8007ba2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007ba6:	e78f      	b.n	8007ac8 <__kernel_rem_pio2+0x3e8>
 8007ba8:	eeb1 5b45 	vneg.f64	d5, d5
 8007bac:	eeb1 6b46 	vneg.f64	d6, d6
 8007bb0:	ed87 5b00 	vstr	d5, [r7]
 8007bb4:	eeb1 7b47 	vneg.f64	d7, d7
 8007bb8:	ed87 6b02 	vstr	d6, [r7, #8]
 8007bbc:	e790      	b.n	8007ae0 <__kernel_rem_pio2+0x400>
 8007bbe:	bf00      	nop
 8007bc0:	00000000 	.word	0x00000000
 8007bc4:	41700000 	.word	0x41700000
 8007bc8:	00000000 	.word	0x00000000
 8007bcc:	3e700000 	.word	0x3e700000
	...

08007bd8 <scalbn>:
 8007bd8:	ee10 1a90 	vmov	r1, s1
 8007bdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007be0:	b98b      	cbnz	r3, 8007c06 <scalbn+0x2e>
 8007be2:	ee10 3a10 	vmov	r3, s0
 8007be6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8007bea:	4319      	orrs	r1, r3
 8007bec:	d00a      	beq.n	8007c04 <scalbn+0x2c>
 8007bee:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8007ca0 <scalbn+0xc8>
 8007bf2:	4b37      	ldr	r3, [pc, #220]	@ (8007cd0 <scalbn+0xf8>)
 8007bf4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007bf8:	4298      	cmp	r0, r3
 8007bfa:	da0b      	bge.n	8007c14 <scalbn+0x3c>
 8007bfc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8007ca8 <scalbn+0xd0>
 8007c00:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007c04:	4770      	bx	lr
 8007c06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d107      	bne.n	8007c1e <scalbn+0x46>
 8007c0e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007c12:	4770      	bx	lr
 8007c14:	ee10 1a90 	vmov	r1, s1
 8007c18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007c1c:	3b36      	subs	r3, #54	@ 0x36
 8007c1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007c22:	4290      	cmp	r0, r2
 8007c24:	dd0d      	ble.n	8007c42 <scalbn+0x6a>
 8007c26:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007cb0 <scalbn+0xd8>
 8007c2a:	ee10 3a90 	vmov	r3, s1
 8007c2e:	eeb0 6b47 	vmov.f64	d6, d7
 8007c32:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8007cb8 <scalbn+0xe0>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	fe27 7b05 	vselge.f64	d7, d7, d5
 8007c3c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8007c40:	4770      	bx	lr
 8007c42:	4418      	add	r0, r3
 8007c44:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8007c48:	4298      	cmp	r0, r3
 8007c4a:	dcec      	bgt.n	8007c26 <scalbn+0x4e>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	dd0a      	ble.n	8007c66 <scalbn+0x8e>
 8007c50:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8007c54:	ec53 2b10 	vmov	r2, r3, d0
 8007c58:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8007c5c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8007c60:	ec43 2b10 	vmov	d0, r2, r3
 8007c64:	4770      	bx	lr
 8007c66:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8007c6a:	da09      	bge.n	8007c80 <scalbn+0xa8>
 8007c6c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8007ca8 <scalbn+0xd0>
 8007c70:	ee10 3a90 	vmov	r3, s1
 8007c74:	eeb0 6b47 	vmov.f64	d6, d7
 8007c78:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8007cc0 <scalbn+0xe8>
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	e7db      	b.n	8007c38 <scalbn+0x60>
 8007c80:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8007c84:	ec53 2b10 	vmov	r2, r3, d0
 8007c88:	3036      	adds	r0, #54	@ 0x36
 8007c8a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8007c8e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8007c92:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8007cc8 <scalbn+0xf0>
 8007c96:	ec43 2b10 	vmov	d0, r2, r3
 8007c9a:	e7b1      	b.n	8007c00 <scalbn+0x28>
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	00000000 	.word	0x00000000
 8007ca4:	43500000 	.word	0x43500000
 8007ca8:	c2f8f359 	.word	0xc2f8f359
 8007cac:	01a56e1f 	.word	0x01a56e1f
 8007cb0:	8800759c 	.word	0x8800759c
 8007cb4:	7e37e43c 	.word	0x7e37e43c
 8007cb8:	8800759c 	.word	0x8800759c
 8007cbc:	fe37e43c 	.word	0xfe37e43c
 8007cc0:	c2f8f359 	.word	0xc2f8f359
 8007cc4:	81a56e1f 	.word	0x81a56e1f
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	3c900000 	.word	0x3c900000
 8007cd0:	ffff3cb0 	.word	0xffff3cb0
 8007cd4:	00000000 	.word	0x00000000

08007cd8 <floor>:
 8007cd8:	ee10 3a90 	vmov	r3, s1
 8007cdc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8007ce0:	ee10 2a10 	vmov	r2, s0
 8007ce4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8007ce8:	2913      	cmp	r1, #19
 8007cea:	b530      	push	{r4, r5, lr}
 8007cec:	4615      	mov	r5, r2
 8007cee:	dc33      	bgt.n	8007d58 <floor+0x80>
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	da18      	bge.n	8007d26 <floor+0x4e>
 8007cf4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8007db8 <floor+0xe0>
 8007cf8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007cfc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d04:	dd0a      	ble.n	8007d1c <floor+0x44>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	da50      	bge.n	8007dac <floor+0xd4>
 8007d0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	2200      	movs	r2, #0
 8007d12:	4293      	cmp	r3, r2
 8007d14:	4b2a      	ldr	r3, [pc, #168]	@ (8007dc0 <floor+0xe8>)
 8007d16:	bf08      	it	eq
 8007d18:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	4610      	mov	r0, r2
 8007d20:	ec41 0b10 	vmov	d0, r0, r1
 8007d24:	e01f      	b.n	8007d66 <floor+0x8e>
 8007d26:	4827      	ldr	r0, [pc, #156]	@ (8007dc4 <floor+0xec>)
 8007d28:	4108      	asrs	r0, r1
 8007d2a:	ea03 0400 	and.w	r4, r3, r0
 8007d2e:	4314      	orrs	r4, r2
 8007d30:	d019      	beq.n	8007d66 <floor+0x8e>
 8007d32:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007db8 <floor+0xe0>
 8007d36:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007d3a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d42:	ddeb      	ble.n	8007d1c <floor+0x44>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bfbe      	ittt	lt
 8007d48:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8007d4c:	410a      	asrlt	r2, r1
 8007d4e:	189b      	addlt	r3, r3, r2
 8007d50:	ea23 0300 	bic.w	r3, r3, r0
 8007d54:	2200      	movs	r2, #0
 8007d56:	e7e1      	b.n	8007d1c <floor+0x44>
 8007d58:	2933      	cmp	r1, #51	@ 0x33
 8007d5a:	dd05      	ble.n	8007d68 <floor+0x90>
 8007d5c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007d60:	d101      	bne.n	8007d66 <floor+0x8e>
 8007d62:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007d66:	bd30      	pop	{r4, r5, pc}
 8007d68:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	40e0      	lsrs	r0, r4
 8007d72:	4210      	tst	r0, r2
 8007d74:	d0f7      	beq.n	8007d66 <floor+0x8e>
 8007d76:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8007db8 <floor+0xe0>
 8007d7a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007d7e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d86:	ddc9      	ble.n	8007d1c <floor+0x44>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	da02      	bge.n	8007d92 <floor+0xba>
 8007d8c:	2914      	cmp	r1, #20
 8007d8e:	d103      	bne.n	8007d98 <floor+0xc0>
 8007d90:	3301      	adds	r3, #1
 8007d92:	ea22 0200 	bic.w	r2, r2, r0
 8007d96:	e7c1      	b.n	8007d1c <floor+0x44>
 8007d98:	2401      	movs	r4, #1
 8007d9a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8007d9e:	fa04 f101 	lsl.w	r1, r4, r1
 8007da2:	440a      	add	r2, r1
 8007da4:	42aa      	cmp	r2, r5
 8007da6:	bf38      	it	cc
 8007da8:	191b      	addcc	r3, r3, r4
 8007daa:	e7f2      	b.n	8007d92 <floor+0xba>
 8007dac:	2200      	movs	r2, #0
 8007dae:	4613      	mov	r3, r2
 8007db0:	e7b4      	b.n	8007d1c <floor+0x44>
 8007db2:	bf00      	nop
 8007db4:	f3af 8000 	nop.w
 8007db8:	8800759c 	.word	0x8800759c
 8007dbc:	7e37e43c 	.word	0x7e37e43c
 8007dc0:	bff00000 	.word	0xbff00000
 8007dc4:	000fffff 	.word	0x000fffff

08007dc8 <_init>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	bf00      	nop
 8007dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dce:	bc08      	pop	{r3}
 8007dd0:	469e      	mov	lr, r3
 8007dd2:	4770      	bx	lr

08007dd4 <_fini>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	bf00      	nop
 8007dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dda:	bc08      	pop	{r3}
 8007ddc:	469e      	mov	lr, r3
 8007dde:	4770      	bx	lr
